{"meta":{"exported_on":1442876252983,"version":"003"},"data":{"app_fields":[],"app_settings":[],"apps":[],"permissions":[{"id":4,"uuid":"55b859c9-bd4a-4043-afd5-d8748804c072","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2014-12-22T01:36:14.000Z","created_by":1,"updated_at":"2014-12-22T01:36:14.000Z","updated_by":1},{"id":5,"uuid":"5402b246-1edc-4b66-9493-72f8ee4bc477","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":6,"uuid":"74b2e79b-efd7-4352-86ae-8c3d354db00c","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":7,"uuid":"9ae8a730-970d-4055-b0b4-85d4f180cbf5","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":8,"uuid":"434ceb2b-c07e-4248-9573-b641b191a3e2","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":9,"uuid":"cb13771a-1259-41f8-9c05-1bf788305f3a","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":10,"uuid":"6eb1fee0-d8c6-4ebf-b1e2-1e0a024a533b","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":11,"uuid":"66384476-e695-4d3f-913a-c0abacfb9c1a","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":12,"uuid":"9f5da4c0-0a3c-4609-8800-098d939b0aff","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":13,"uuid":"c2ffcfd4-568b-46fc-aab8-e803fc30b9c6","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":14,"uuid":"c9a1830b-e593-4e4e-aa56-41ac041d5ded","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":15,"uuid":"7248b337-e939-4d9a-b1e3-24073c14a9f2","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":16,"uuid":"f6980e88-9ac8-48d7-ba85-97eaf400b4b8","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":17,"uuid":"105f60a0-f980-46d9-aab2-e532d4e2eb3b","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":18,"uuid":"7bc312e2-ed22-4fc4-9187-820c6cbcb1db","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":19,"uuid":"230218a8-14a8-47e5-973f-49d999d91c54","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":20,"uuid":"726b3bcb-bb9f-4a46-a712-5a17b3bd6a92","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":21,"uuid":"b49c1918-e6fd-4651-8a6c-5955cca9889e","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":22,"uuid":"41545628-d04f-44f0-bd32-ab9235bd26f1","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":23,"uuid":"965405ef-50d0-4d7a-92d7-64a405c11ead","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":24,"uuid":"95bd7b19-44d7-44d8-a712-2cf5b07bb9ea","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":25,"uuid":"5c6644e1-401b-46de-91ee-72e4cc626266","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":26,"uuid":"82c16b84-3ba5-4c4b-88e2-23d6fb62d886","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":27,"uuid":"0fd37ed1-a2a4-4188-958b-1e7977aea5a0","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":28,"uuid":"e4c1afeb-64e0-4b83-a061-2e92f88bb5ed","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":29,"uuid":"f5e54aa8-847e-41ca-85ef-6c7a20fb692e","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":30,"uuid":"2ce65881-7d75-4027-b505-9da4a62b5338","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":31,"uuid":"4892187c-6a4f-4fab-a64d-f1b6c85bffec","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":32,"uuid":"92a3df1f-6bee-4603-8f79-ba496b3ed7f5","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1},{"id":33,"uuid":"f21793e7-92bf-4933-ac43-1abce27a5266","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2014-12-22T01:36:15.000Z","updated_by":1}],"permissions_apps":[],"permissions_roles":[{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":7},{"id":7,"role_id":1,"permission_id":6},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":15},{"id":39,"role_id":2,"permission_id":16},{"id":40,"role_id":2,"permission_id":17},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":22},{"id":45,"role_id":2,"permission_id":23},{"id":46,"role_id":2,"permission_id":24},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":2,"permission_id":31},{"id":52,"role_id":2,"permission_id":32},{"id":53,"role_id":2,"permission_id":33},{"id":54,"role_id":3,"permission_id":11},{"id":55,"role_id":3,"permission_id":12},{"id":56,"role_id":3,"permission_id":14},{"id":57,"role_id":3,"permission_id":16},{"id":58,"role_id":3,"permission_id":17},{"id":59,"role_id":3,"permission_id":19},{"id":60,"role_id":3,"permission_id":20},{"id":61,"role_id":3,"permission_id":21},{"id":62,"role_id":3,"permission_id":23},{"id":63,"role_id":3,"permission_id":27},{"id":64,"role_id":3,"permission_id":28},{"id":65,"role_id":3,"permission_id":33}],"permissions_users":[],"posts":[{"id":1,"uuid":"84459189-e67a-404a-97dc-697a72aeaf51","title":"Finally/First","slug":"finally-first","markdown":"Yep! **Finally** here's the **first** post on the path of this blog. *Finally/first*, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure.\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: **Why start a blog?**\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in *qbasic*, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. \n\nI think that's all for now.\nStay tuned ;)","html":"<p>Yep! <strong>Finally</strong> here's the <strong>first</strong> post on the path of this blog. <em>Finally/first</em>, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure. <br />\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: <strong>Why start a blog?</strong> <br />\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in <em>qbasic</em>, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. </p>\n\n<p>I think that's all for now. <br />\nStay tuned ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-17T03:06:07.000Z","updated_by":1,"published_at":"2014-01-16T23:04:36.000Z","published_by":1},{"id":2,"uuid":"5ad52a4d-18d6-4add-b97b-841aa66187aa","title":"Backup your server with Dropbox","slug":"backup-your-server-with-dropbox","markdown":"In my early days as *CTO* at [Sbaam](http://sbaam.com) I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an *almost-0-budget*, so it left no space to sophysticated solutions for recurring tasks such as **backup**. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.\n\nSo, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a [Dropbox](https://db.tt/ref37L7) folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.\n\nUltimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.\n\nThis solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an *ubuntu* machine so I suppose the following steps should work on debian machines.\n\n### 1. Prepare the dropbox user\nI preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:\n\n    sudo useradd -d /dropbox -m dropbox\n\nIt will have the directory `/dropbox` as home and the name `dropbox`. You can change these values if you like.\n\nThen you have to set the password for the new user:\n\n    sudo passwd dropbox\n    \nChoose whatever password you like.\n\n**Security concern:** If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file `/etc/ssh/sshd_config` and add the rule `DenyUsers dropbox`, the restart ssh with `sudo service ssh restart`.\n\n### 2. Install the dropbox client\n\nFirst of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have `/dropbox/Dropbox` as the synced folder:\n\n    su dropbox\n    \n(enter the password for the user dropbox)\n\nNow you're the *dropbox* user. Be sure to switch to your user folder with `cd ~` and let's download and install the daemon.\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n    \nfor 32bit or\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n\nfor 64bit.\n\nExtract it:\n\n    tar -xvzf dropbox.tar.gz\n    \nIt will extract to the `~/.dropbox-dist.` folder. Now run the client:\n\n    ~/.dropbox-dist/dropbox\n    \nYou will see an output like the following:\n\n> This client is not linked to any account...\n> Please visit {SOME_URL} to link this machine. [...]\n\nCopy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press `CTRL+C` and get back to your user with the `exit` command.\n\n### 3. Dropbox as a service\n\nAt this point we need to define dropbox as a service. So let's create an *etc init script*. Download [my gist](https://gist.github.com/lmammino/8467336)\n\n    wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n    \nand move it in the init folder:\n\n    sudo mv dropbox_init_script /etc/init.d/dropbox\n   \nMake it executable:\n\n    sudo chmod +x /etc/init.d/dropbox\n   \nAnd set it to load at startup:\n\n    sudo update-rc.d dropbox defaults\n    \nNow it's a service! Run:\n\n    sudo /etc/init.d/dropbox start\n    \nto start it and feel free to use common service command such as `stop`, `restart` and `status`.\n\n### 4. Enjoy\n\nAt this point you have all your dropbox data in the `/dropbox/Dropbox` folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.\n\n**Security concerns**: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.\n\n### 5. Bonus\n\nDropbox released the [Dropbox CLI](https://www.dropbox.com/download?dl=packages/dropbox.py), a python command line application that you can use to perform some useful task such as *Selective Sync*, disable the *LAN sync* or retrive public links of your files. I suggest to download it by using the dropbox user and place it under `/dropbox/bin`. So you can simply switch to the dropbox user (again with `su dropbox`), download it and make it executable:\n\n    mkdir ~/bin\n    wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n    chmod +x ~/bin/dropbox.py\n    \nAt this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:\n\n    /dropbox/bin/dropbox.py lansync n\n\n---\n\nThat's all.\nIt was a long read but I hope it has been useful ;)\n\n","html":"<p>In my early days as <em>CTO</em> at <a href=\"http://sbaam.com\">Sbaam</a> I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an <em>almost-0-budget</em>, so it left no space to sophysticated solutions for recurring tasks such as <strong>backup</strong>. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.</p>\n\n<p>So, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a <a href=\"https://db.tt/ref37L7\">Dropbox</a> folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.</p>\n\n<p>Ultimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.</p>\n\n<p>This solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an <em>ubuntu</em> machine so I suppose the following steps should work on debian machines.</p>\n\n<h3 id=\"1preparethedropboxuser\">1. Prepare the dropbox user</h3>\n\n<p>I preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:</p>\n\n<pre><code>sudo useradd -d /dropbox -m dropbox\n</code></pre>\n\n<p>It will have the directory <code>/dropbox</code> as home and the name <code>dropbox</code>. You can change these values if you like.</p>\n\n<p>Then you have to set the password for the new user:</p>\n\n<pre><code>sudo passwd dropbox\n</code></pre>\n\n<p>Choose whatever password you like.</p>\n\n<p><strong>Security concern:</strong> If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file <code>/etc/ssh/sshd_config</code> and add the rule <code>DenyUsers dropbox</code>, the restart ssh with <code>sudo service ssh restart</code>.</p>\n\n<h3 id=\"2installthedropboxclient\">2. Install the dropbox client</h3>\n\n<p>First of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have <code>/dropbox/Dropbox</code> as the synced folder:</p>\n\n<pre><code>su dropbox\n</code></pre>\n\n<p>(enter the password for the user dropbox)</p>\n\n<p>Now you're the <em>dropbox</em> user. Be sure to switch to your user folder with <code>cd ~</code> and let's download and install the daemon.</p>\n\n<pre><code>wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n</code></pre>\n\n<p>for 32bit or</p>\n\n<pre><code>wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n</code></pre>\n\n<p>for 64bit.</p>\n\n<p>Extract it:</p>\n\n<pre><code>tar -xvzf dropbox.tar.gz\n</code></pre>\n\n<p>It will extract to the <code>~/.dropbox-dist.</code> folder. Now run the client:</p>\n\n<pre><code>~/.dropbox-dist/dropbox\n</code></pre>\n\n<p>You will see an output like the following:</p>\n\n<blockquote>\n  <p>This client is not linked to any account...\n  Please visit {SOME_URL} to link this machine. [...]</p>\n</blockquote>\n\n<p>Copy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press <code>CTRL+C</code> and get back to your user with the <code>exit</code> command.</p>\n\n<h3 id=\"3dropboxasaservice\">3. Dropbox as a service</h3>\n\n<p>At this point we need to define dropbox as a service. So let's create an <em>etc init script</em>. Download <a href=\"https://gist.github.com/lmammino/8467336\">my gist</a></p>\n\n<pre><code>wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n</code></pre>\n\n<p>and move it in the init folder:</p>\n\n<pre><code>sudo mv dropbox_init_script /etc/init.d/dropbox\n</code></pre>\n\n<p>Make it executable:</p>\n\n<pre><code>sudo chmod +x /etc/init.d/dropbox\n</code></pre>\n\n<p>And set it to load at startup:</p>\n\n<pre><code>sudo update-rc.d dropbox defaults\n</code></pre>\n\n<p>Now it's a service! Run:</p>\n\n<pre><code>sudo /etc/init.d/dropbox start\n</code></pre>\n\n<p>to start it and feel free to use common service command such as <code>stop</code>, <code>restart</code> and <code>status</code>.</p>\n\n<h3 id=\"4enjoy\">4. Enjoy</h3>\n\n<p>At this point you have all your dropbox data in the <code>/dropbox/Dropbox</code> folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.</p>\n\n<p><strong>Security concerns</strong>: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.</p>\n\n<h3 id=\"5bonus\">5. Bonus</h3>\n\n<p>Dropbox released the <a href=\"https://www.dropbox.com/download?dl=packages/dropbox.py\">Dropbox CLI</a>, a python command line application that you can use to perform some useful task such as <em>Selective Sync</em>, disable the <em>LAN sync</em> or retrive public links of your files. I suggest to download it by using the dropbox user and place it under <code>/dropbox/bin</code>. So you can simply switch to the dropbox user (again with <code>su dropbox</code>), download it and make it executable:</p>\n\n<pre><code>mkdir ~/bin\nwget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\nchmod +x ~/bin/dropbox.py\n</code></pre>\n\n<p>At this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:</p>\n\n<pre><code>/dropbox/bin/dropbox.py lansync n\n</code></pre>\n\n<hr />\n\n<p>That's all. <br />\nIt was a long read but I hope it has been useful ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-17T02:52:44.000Z","created_by":1,"updated_at":"2014-04-05T16:21:17.000Z","updated_by":1,"published_at":"2014-01-17T03:44:19.000Z","published_by":1},{"id":3,"uuid":"e935373e-574b-493e-8f84-de5194c67401","title":"Writing a new Extractor for PHPoAuthUserData","slug":"writing-a-new-extractor-for-php-oauth-user-data","markdown":"In my [previous post](http://loige.com/new-php-library-php-oauth-user-data/) I introduced my latest library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) that allows to abstract the process of\nextracting user profile data from various OAuth providers (*Facebook*, *Twitter*, *Linkedin*, etc).\n\nThe library still need a lot of work, especially to write the logic to extract data from all the services available in the [parent OAuth library](https://github.com/Lusitanian/PHPoAuthLib).\n\nAt the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:\n\nAmazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.\n\nSo that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.\n\nThis article illustrates how to add support for a new service by writing a dedicate **extractor** class. It's really simple so stick with me and you will be able to submit your pull request in minutes!\n\nExtractors defines the logic to request information to a given service API and to normalize the received data according to a common [interface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php).\nThe most basic way to define an extractor is to write a class that implements the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php) (that is pretty self-explanatory). \n\nYou could extend the class [Extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php) that implements most of the needed code to get you started. Anyway, extractors should **really** extend the class [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) where possible\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that **lazy loads** data (perform requests only when needed to) and **caches** data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make\nrequests and how to normalize data.\n\nTo understand how to write a new extractor by adopting the [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) we need to clarify some concepts:\n\n  - **Supported fields**: an array of the fields that can be extracted (you should use field constants from the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php)).\n  - **Loaders**: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix `Loader` in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: `profileLoader`).\n  - **Normalizers**: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix `Normalizer` (eg. `uniqueIdNormalizer` or `descriptionNormalizer`).\n  - **LoadersMap**: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the `Loader` suffix.\nMost of the time, if you have only the `profileLoader` loader you will have an array with all fields mapping to the string `profile`.\n  - **NormalizersMap**: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the `Normalizer` suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. `array(self::FIELD_UNIQUE_ID => self::FIELD_UNIQUE_ID)`) for\nevery supported field.\n\nOnce you defined *Supported Fields*, *Loaders*, *Normalizers*, *Loaders Map* and *Normalizers Map* from within your new extractor class you must\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as `getSupportedField`, `getLoadersMap` and `getNormalizersMap`\nyou will end up with a constructor like this:\n\n```php\npublic function __construct()\n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n```\n\nBut let's see how I built the [Instagram extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php) to have a better understanding on the whole process.\n\n## Writing the Instagram extractor\n\nFirst of all I had a look on [a bit of documentation](http://instagram.com/developer/api-console/) to find out what kind of data can be extracted from Instagram users.\n\nSo I discovered that the request to retrieve information about the user is: `/users/self` and its response is a json object that looks like the following:\n\n```json\n{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n```\n\nSo I understood wich fields can be mapped and started writing the `Instagram` class under the `OAuth\\UserData\\Extractor` namespace.\n\n```php\n<?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor\n{\n\t//...\n}\n```\n\nFirst of all I wrote the method `profileLoader` and added a class constant that defines the url of the request.\n\n```php\nconst REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()\n{\n\treturn json_decode($this->service->request(self::REQUEST_PROFILE), true);\n}\n```\n\nEach extractor has access to the property `$this->service` that is an instance of the specific OAuth service from the parent library (`OAuth\\OAuth2\\Service\\Instagram`) in this case. With this instance you can easily make request to the provider API endpoint.\n\nThen I added the `getSupportedFields` method:\n\n```php\nprotected static function getSupportedFields()\n{\n\treturn array(\n\t\tself::FIELD_UNIQUE_ID,\n\t\tself::FIELD_USERNAME,\n\t\tself::FIELD_FULL_NAME,\n\t\tself::FIELD_FIRST_NAME,\n\t\tself::FIELD_LAST_NAME,\n\t\tself::FIELD_DESCRIPTION,\n\t\tself::FIELD_WEBSITES,\n\t\tself::FIELD_IMAGE_URL,\n\t\tself::FIELD_PROFILE_URL,\n\t\tself::FIELD_EXTRA\n\t);\n}\n```\n\nThe fields *first_name*, *last_name* and *profile_url* are not directly available on the json response but are easy to reconstruct by using the *full_name* and *username* fields.\n\nThan I started writing all the normalizer methods to map the raw data to the respective supported fields:\n\n```php\nprotected function uniqueIdNormalizer($data)\n{\n\treturn isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)\n{\n\treturn isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)\n{\n\treturn isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\treturn $names[0];\n\t}\n\n\treturn null;\n}\n\nprotected function lastNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\t\treturn $names[sizeof($names) - 1];\n\t}\n\n\treturn null;\n}\n\nprotected function descriptionNormalizer($data)\n{\n\treturn isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)\n{\n\t$websites = array();\n\tif (isset($data['data']['website'])) {\n\t\t$websites[] = $data['data']['website'];\n\t}\n\n\treturn $websites;\n}\n\nprotected function profileUrlNormalizer()\n{\n\t$username = $this->getField(self::FIELD_USERNAME);\n\n\tif (null !== $username) {\n\t\treturn sprintf('http://instagram.com/%s', $username);\n\t}\n\n\treturn null;\n}\n\nprotected function imageUrlNormalizer($data)\n{\n\treturn isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)\n{\n\treturn ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n\t));\n}\n```\n\nNotice that each normalizer must return `null` if the field is not defined. That's a best pratice to follow for safety.\n\nAlso notice that the `extraNormalizer` method has the purpose to keep track of all the fields that could not be mapped to the `ExtractorInterface` fields. So we use the `OAuth\\UserData\\Utils\\ArrayUtils::removeKeys` method to simply remove already mapped data.\n\nFinally we need to wire our `profileLoader` method and all our normalizers methods in the constructor:\n\n```php\npublic function __construct()\n{\n\tparent::__construct(\n\t\tself::getDefaultLoadersMap(),\n\t\tself::getDefaultNormalizersMap(),\n\t\tself::getSupportedFields()\n\t);\n}\n```\n\nThe methods `self::getDefaultLoadersMap` and `self::getDefaultNormalizersMap` are convenience methods defined in the `LazyExtractor` class that defines respectively a loaders map and a normalizers map that are good in most of the cases.\n\nThat's all. To see the complete class have a look [here](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php).\n\n**Important note**: if you are willing to submit a pull request to integrate a new extractor be sure to follow [PSR-2 code style](http://www.php-fig.org/psr/psr-2/) and to add a dedicated test case. Have a look at the [InstagramTest](https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php) class to understand how to do it.","html":"<p>In my <a href=\"http://loige.com/new-php-library-php-oauth-user-data/\">previous post</a> I introduced my latest library <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a> that allows to abstract the process of <br />\nextracting user profile data from various OAuth providers (<em>Facebook</em>, <em>Twitter</em>, <em>Linkedin</em>, etc).</p>\n\n<p>The library still need a lot of work, especially to write the logic to extract data from all the services available in the <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">parent OAuth library</a>.</p>\n\n<p>At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:</p>\n\n<p>Amazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.</p>\n\n<p>So that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.</p>\n\n<p>This article illustrates how to add support for a new service by writing a dedicate <strong>extractor</strong> class. It's really simple so stick with me and you will be able to submit your pull request in minutes!</p>\n\n<p>Extractors defines the logic to request information to a given service API and to normalize the received data according to a common <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">interface</a>. <br />\nThe most basic way to define an extractor is to write a class that implements the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a> (that is pretty self-explanatory). </p>\n\n<p>You could extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php\">Extractor</a> that implements most of the needed code to get you started. Anyway, extractors should <strong>really</strong> extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> where possible <br />\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that <strong>lazy loads</strong> data (perform requests only when needed to) and <strong>caches</strong> data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make <br />\nrequests and how to normalize data.</p>\n\n<p>To understand how to write a new extractor by adopting the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> we need to clarify some concepts:</p>\n\n<ul>\n<li><strong>Supported fields</strong>: an array of the fields that can be extracted (you should use field constants from the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a>).</li>\n<li><strong>Loaders</strong>: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix <code>Loader</code> in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: <code>profileLoader</code>).  </li>\n<li><strong>Normalizers</strong>: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix <code>Normalizer</code> (eg. <code>uniqueIdNormalizer</code> or <code>descriptionNormalizer</code>).  </li>\n<li><strong>LoadersMap</strong>: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the <code>Loader</code> suffix.\nMost of the time, if you have only the <code>profileLoader</code> loader you will have an array with all fields mapping to the string <code>profile</code>.  </li>\n<li><strong>NormalizersMap</strong>: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the <code>Normalizer</code> suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. <code>array(self::FIELD_UNIQUE_ID =&gt; self::FIELD_UNIQUE_ID)</code>) for\nevery supported field.</li>\n</ul>\n\n<p>Once you defined <em>Supported Fields</em>, <em>Loaders</em>, <em>Normalizers</em>, <em>Loaders Map</em> and <em>Normalizers Map</em> from within your new extractor class you must <br />\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as <code>getSupportedField</code>, <code>getLoadersMap</code> and <code>getNormalizersMap</code> <br />\nyou will end up with a constructor like this:</p>\n\n<pre><code class=\"php\">public function __construct()  \n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n</code></pre>\n\n<p>But let's see how I built the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">Instagram extractor</a> to have a better understanding on the whole process.</p>\n\n<h2 id=\"writingtheinstagramextractor\">Writing the Instagram extractor</h2>\n\n<p>First of all I had a look on <a href=\"http://instagram.com/developer/api-console/\">a bit of documentation</a> to find out what kind of data can be extracted from Instagram users.</p>\n\n<p>So I discovered that the request to retrieve information about the user is: <code>/users/self</code> and its response is a json object that looks like the following:</p>\n\n<pre><code class=\"json\">{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n</code></pre>\n\n<p>So I understood wich fields can be mapped and started writing the <code>Instagram</code> class under the <code>OAuth\\UserData\\Extractor</code> namespace.</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor  \n{\n    //...\n}\n</code></pre>\n\n<p>First of all I wrote the method <code>profileLoader</code> and added a class constant that defines the url of the request.</p>\n\n<pre><code class=\"php\">const REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()  \n{\n    return json_decode($this-&gt;service-&gt;request(self::REQUEST_PROFILE), true);\n}\n</code></pre>\n\n<p>Each extractor has access to the property <code>$this-&gt;service</code> that is an instance of the specific OAuth service from the parent library (<code>OAuth\\OAuth2\\Service\\Instagram</code>) in this case. With this instance you can easily make request to the provider API endpoint.</p>\n\n<p>Then I added the <code>getSupportedFields</code> method:</p>\n\n<pre><code class=\"php\">protected static function getSupportedFields()  \n{\n    return array(\n        self::FIELD_UNIQUE_ID,\n        self::FIELD_USERNAME,\n        self::FIELD_FULL_NAME,\n        self::FIELD_FIRST_NAME,\n        self::FIELD_LAST_NAME,\n        self::FIELD_DESCRIPTION,\n        self::FIELD_WEBSITES,\n        self::FIELD_IMAGE_URL,\n        self::FIELD_PROFILE_URL,\n        self::FIELD_EXTRA\n    );\n}\n</code></pre>\n\n<p>The fields <em>first_name</em>, <em>last_name</em> and <em>profile_url</em> are not directly available on the json response but are easy to reconstruct by using the <em>full_name</em> and <em>username</em> fields.</p>\n\n<p>Than I started writing all the normalizer methods to map the raw data to the respective supported fields:</p>\n\n<pre><code class=\"php\">protected function uniqueIdNormalizer($data)  \n{\n    return isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)  \n{\n    return isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)  \n{\n    return isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()  \n{\n    $fullName = $this-&gt;getField(self::FIELD_FULL_NAME);\n    if ($fullName) {\n        $names = explode(' ', $fullName);\n\n        return $names[0];\n    }\n\n    return null;\n}\n\nprotected function lastNameNormalizer()  \n{\n    $fullName = $this-&gt;getField(self::FIELD_FULL_NAME);\n    if ($fullName) {\n        $names = explode(' ', $fullName);\n\n            return $names[sizeof($names) - 1];\n    }\n\n    return null;\n}\n\nprotected function descriptionNormalizer($data)  \n{\n    return isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)  \n{\n    $websites = array();\n    if (isset($data['data']['website'])) {\n        $websites[] = $data['data']['website'];\n    }\n\n    return $websites;\n}\n\nprotected function profileUrlNormalizer()  \n{\n    $username = $this-&gt;getField(self::FIELD_USERNAME);\n\n    if (null !== $username) {\n        return sprintf('http://instagram.com/%s', $username);\n    }\n\n    return null;\n}\n\nprotected function imageUrlNormalizer($data)  \n{\n    return isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)  \n{\n    return ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n    ));\n}\n</code></pre>\n\n<p>Notice that each normalizer must return <code>null</code> if the field is not defined. That's a best pratice to follow for safety.</p>\n\n<p>Also notice that the <code>extraNormalizer</code> method has the purpose to keep track of all the fields that could not be mapped to the <code>ExtractorInterface</code> fields. So we use the <code>OAuth\\UserData\\Utils\\ArrayUtils::removeKeys</code> method to simply remove already mapped data.</p>\n\n<p>Finally we need to wire our <code>profileLoader</code> method and all our normalizers methods in the constructor:</p>\n\n<pre><code class=\"php\">public function __construct()  \n{\n    parent::__construct(\n        self::getDefaultLoadersMap(),\n        self::getDefaultNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n</code></pre>\n\n<p>The methods <code>self::getDefaultLoadersMap</code> and <code>self::getDefaultNormalizersMap</code> are convenience methods defined in the <code>LazyExtractor</code> class that defines respectively a loaders map and a normalizers map that are good in most of the cases.</p>\n\n<p>That's all. To see the complete class have a look <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">here</a>.</p>\n\n<p><strong>Important note</strong>: if you are willing to submit a pull request to integrate a new extractor be sure to follow <a href=\"http://www.php-fig.org/psr/psr-2/\">PSR-2 code style</a> and to add a dedicated test case. Have a look at the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php\">InstagramTest</a> class to understand how to do it.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-09T23:38:26.000Z","created_by":1,"updated_at":"2014-02-10T17:30:42.000Z","updated_by":1,"published_at":"2014-02-10T17:23:54.000Z","published_by":1},{"id":4,"uuid":"d79a0db9-3f46-4023-9fbe-e18c5c66d0c4","title":"New PHP library: PHPoAuthUserData","slug":"new-php-library-php-oauth-user-data","markdown":"I recently wrote a new [PHP library](https://github.com/Oryzone/PHPoAuthUserData) to simplify the extraction of user data (*name*, *email*, *id*, etc...) from various OAuth providers such as *Facebook*, *Twitter* and *Linkedin*.\n\nIs well know that OAuth 1 and 2 are great *standard* protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.\n\nSo each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.\n\nThat's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!\n\nJust to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?\n\nThe library I wrote is called [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData). It sits on top of the excellent OAuth library [Lusitanian/PHPoAuthLib](https://github.com/Lusitanian/PHPoAuthLib) and aims to resolve the user extraction data problem in the most simple and effective way.\n\nIt offers a *uniform* and (really) simple interface to extract the most interesting and common user data such as *Name*, *Username*, *Id* and so on.\n\nJust to give you a *quick* idea of what is possible with the library have a look at the following snippet:\n\n```php\n// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory->get($service); // get the extractor for the given service\necho $extractor->getUniqueId(); // prints out the unique id of the user\necho $extractor->getUsername(); // prints out the username of the user\necho $extractor->getImageUrl(); // prints out the url of the user profile image\n```\n\nThe code is available on [Github](https://github.com/Oryzone/PHPoAuthUserData) where you will find detailed information on how to install and use the library.\n\nI Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains [how to write an extractor for the library](http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/).","html":"<p>I recently wrote a new <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHP library</a> to simplify the extraction of user data (<em>name</em>, <em>email</em>, <em>id</em>, etc...) from various OAuth providers such as <em>Facebook</em>, <em>Twitter</em> and <em>Linkedin</em>.</p>\n\n<p>Is well know that OAuth 1 and 2 are great <em>standard</em> protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.</p>\n\n<p>So each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.</p>\n\n<p>That's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!</p>\n\n<p>Just to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?</p>\n\n<p>The library I wrote is called <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a>. It sits on top of the excellent OAuth library <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">Lusitanian/PHPoAuthLib</a> and aims to resolve the user extraction data problem in the most simple and effective way.</p>\n\n<p>It offers a <em>uniform</em> and (really) simple interface to extract the most interesting and common user data such as <em>Name</em>, <em>Username</em>, <em>Id</em> and so on.</p>\n\n<p>Just to give you a <em>quick</em> idea of what is possible with the library have a look at the following snippet:</p>\n\n<pre><code class=\"php\">// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory-&gt;get($service); // get the extractor for the given service\necho $extractor-&gt;getUniqueId(); // prints out the unique id of the user  \necho $extractor-&gt;getUsername(); // prints out the username of the user  \necho $extractor-&gt;getImageUrl(); // prints out the url of the user profile image  \n</code></pre>\n\n<p>The code is available on <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">Github</a> where you will find detailed information on how to install and use the library.</p>\n\n<p>I Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains <a href=\"http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/\">how to write an extractor for the library</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-10T12:12:20.000Z","created_by":1,"updated_at":"2014-02-10T23:23:21.000Z","updated_by":1,"published_at":"2014-02-10T12:13:50.000Z","published_by":1},{"id":5,"uuid":"7f08c58e-6898-490b-9b6f-a4680ab114a9","title":"Symfony security: authentication made simple (well, maybe!)","slug":"symfony-security-authentication-made-simple","markdown":"The [Symfony2 security component](http://symfony.com/doc/current/components/security/introduction.html) has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.\n\nI am in the process of writing an [OAuth bundle](https://github.com/Oryzone/OryzoneOauthBundle) and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!\n\nGoing back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. \n\nSo in this post I will try to collect few interesting resources that helped me understanding it better and a [graph](#symfony-authentication-graph) I drawn to resume what I learned.\n\n## Interesting links:\n\nI highly suggest you to read them in the proposed order.\n\n- [Symfony Security component documentation](http://symfony.com/doc/current/components/security/introduction.html): must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!\n- [Diving into security layer](http://www.screenfony.com/blog/symfony-custom-authentication-provider): a great blog post from [Francesco Tassi](http://www.ftassi.com/) of [Screenfony](http://www.screenfony.com/). It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.\n- [Love and Loss: A Symfony Security Play](http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play): slides by the great [Kris Wallsmith](http://kriswallsmith.net/) from the Symfony Live 2013 in Portland. Also a [Video](http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony) is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!\n- [Symfony2: Introduction to The Security Component Part I](http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/), [Part II](http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/) & [Part III](http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/): a series of articles by [Matthias Noback](http://php-and-symfony.matthiasnoback.nl/) that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.\n- [Security in real life](http://symfony.com/video/1/security-in-real-life/English): A video from the Symfony Live Paris 2012 by [Johannes Schmitt](http://jmsyst.com/blog/). Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.\n- [Custom authentication provider](http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html): a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!\n- [How to Authenticate Users with API Keys](http://symfony.com/doc/current/cookbook/security/api_key_authentication.html): another great cookbook article that will shed some light on the topic by providing a simple example.\n- [How to Create a Custom Form Password Authenticator](http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html): yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.\n- [Code of the RememberMe Listener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php): the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.\n\n## Symfony Authentication graph\n\nNotice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a `Request` object and you should check if it can be used to produce an `AuthenticatedToken` according to some authentication logic.\n\n[![Symfony Authentication chart](/content/images/2014/Feb/symfony_security_component_authentication_flow.png)](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing)\n\nGet the image in [full resolution on Google Drive](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing) (you can also propose edits with comments if you want) or [Download the PDF](/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf).\n\nThat's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.","html":"<p>The <a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony2 security component</a> has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.</p>\n\n<p>I am in the process of writing an <a href=\"https://github.com/Oryzone/OryzoneOauthBundle\">OAuth bundle</a> and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component. <br />\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great <a href=\"https://github.com/hwi/HWIOAuthBundle\">HWIOAuthBundle</a> to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!</p>\n\n<p>Going back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. </p>\n\n<p>So in this post I will try to collect few interesting resources that helped me understanding it better and a <a href=\"#symfony-authentication-graph\">graph</a> I drawn to resume what I learned.</p>\n\n<h2 id=\"interestinglinks\">Interesting links:</h2>\n\n<p>I highly suggest you to read them in the proposed order.</p>\n\n<ul>\n<li><a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony Security component documentation</a>: must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!</li>\n<li><a href=\"http://www.screenfony.com/blog/symfony-custom-authentication-provider\">Diving into security layer</a>: a great blog post from <a href=\"http://www.ftassi.com/\">Francesco Tassi</a> of <a href=\"http://www.screenfony.com/\">Screenfony</a>. It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.</li>\n<li><a href=\"http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play\">Love and Loss: A Symfony Security Play</a>: slides by the great <a href=\"http://kriswallsmith.net/\">Kris Wallsmith</a> from the Symfony Live 2013 in Portland. Also a <a href=\"http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony\">Video</a> is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!</li>\n<li><a href=\"http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/\">Symfony2: Introduction to The Security Component Part I</a>, <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/\">Part II</a> &amp; <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/\">Part III</a>: a series of articles by <a href=\"http://php-and-symfony.matthiasnoback.nl/\">Matthias Noback</a> that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.</li>\n<li><a href=\"http://symfony.com/video/1/security-in-real-life/English\">Security in real life</a>: A video from the Symfony Live Paris 2012 by <a href=\"http://jmsyst.com/blog/\">Johannes Schmitt</a>. Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html\">Custom authentication provider</a>: a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/api_key_authentication.html\">How to Authenticate Users with API Keys</a>: another great cookbook article that will shed some light on the topic by providing a simple example.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html\">How to Create a Custom Form Password Authenticator</a>: yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.</li>\n<li><a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php\">Code of the RememberMe Listener</a>: the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.</li>\n</ul>\n\n<h2 id=\"symfonyauthenticationgraph\">Symfony Authentication graph</h2>\n\n<p>Notice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a <code>Request</code> object and you should check if it can be used to produce an <code>AuthenticatedToken</code> according to some authentication logic.</p>\n\n<p><a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\"><img src=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.png\" alt=\"Symfony Authentication chart\" title=\"\" /></a></p>\n\n<p>Get the image in <a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\">full resolution on Google Drive</a> (you can also propose edits with comments if you want) or <a href=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf\">Download the PDF</a>.</p>\n\n<p>That's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-12T10:29:41.000Z","created_by":1,"updated_at":"2014-03-13T14:54:05.000Z","updated_by":1,"published_at":"2014-02-14T00:34:23.000Z","published_by":1},{"id":6,"uuid":"000b9c76-e0e2-4b7b-95c2-29a6a84a65e1","title":"Integrating Twig.js and BazingaJsTranslationBundle","slug":"integrating-twig-js-and-bazingajstranslationbundle","markdown":"Recently I had the need to run a twig template that uses the `trans` filter on my frontend using [twig.js](http://jmsyst.com/libs/twig.js), a pure JavaScript port of twig written by the good [Johannes Schmitt](http://jmsyst.com/).\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the `trans` filter.\n\nSo, at first, I got a JavaScript runtime exception on my page when trying to use the template.\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.\n\nIn my specific case I had a Symfony application where I was already using [BazingaJsTranslationBundle](https://github.com/willdurand/BazingaJsTranslationBundle) to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the `Translator` JavaScript object offered by the Bazinga bundle.\n\n**Note**: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.\n\nIn my first attempt I wrote something like this:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThat seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.\n\nSuppose we have the string `hello %name%`. With twig we expect to do something like:\n\n```jinja+html\n{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n```\n\nNote the `%` delimiters around the parameter name.\n\nThe `Translator.trans` method expects an hash map without parameter delimiters in it. So we would have to do something like this:\n\n```javascript\nTranslator.trans(\"hello %name%\", { 'name' ; 'Alice' });\n```\nNote that there's no `%` delimiter this time.\nThe `Translator.trans` method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: `Translator.placeHolderPrefix` and `Translator.placeHolderSuffix`.\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).\n\nSo my final solution was the following:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &&\n            key[0] == Translator.placeHolderPrefix &&\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThis way it automatically normalizes parameters for the `Translator` object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex).\nLet me know if you do it ;)\n\nObviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the `Translator` object expects it (without delimiters). In this case you can stick to my first implementation.\n\nThat's all. See ya ;)","html":"<p>Recently I had the need to run a twig template that uses the <code>trans</code> filter on my frontend using <a href=\"http://jmsyst.com/libs/twig.js\">twig.js</a>, a pure JavaScript port of twig written by the good <a href=\"http://jmsyst.com/\">Johannes Schmitt</a>. <br />\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the <code>trans</code> filter.</p>\n\n<p>So, at first, I got a JavaScript runtime exception on my page when trying to use the template. <br />\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.</p>\n\n<p>In my specific case I had a Symfony application where I was already using <a href=\"https://github.com/willdurand/BazingaJsTranslationBundle\">BazingaJsTranslationBundle</a> to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the <code>Translator</code> JavaScript object offered by the Bazinga bundle.</p>\n\n<p><strong>Note</strong>: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.</p>\n\n<p>In my first attempt I wrote something like this:</p>\n\n<pre><code class=\"javascript\">Twig.setFilter(\"trans\", function(id, params, domain, locale) {  \n    return Translator.trans(id, params, domain, locale);\n});\n</code></pre>\n\n<p>That seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values! <br />\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.</p>\n\n<p>Suppose we have the string <code>hello %name%</code>. With twig we expect to do something like:</p>\n\n<pre><code class=\"jinja+html\">{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n</code></pre>\n\n<p>Note the <code>%</code> delimiters around the parameter name.</p>\n\n<p>The <code>Translator.trans</code> method expects an hash map without parameter delimiters in it. So we would have to do something like this:</p>\n\n<pre><code class=\"javascript\">Translator.trans(\"hello %name%\", { 'name' ; 'Alice' });  \n</code></pre>\n\n<p>Note that there's no <code>%</code> delimiter this time. <br />\nThe <code>Translator.trans</code> method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: <code>Translator.placeHolderPrefix</code> and <code>Translator.placeHolderSuffix</code>. <br />\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).</p>\n\n<p>So my final solution was the following:</p>\n\n<pre><code class=\"javascript\">Twig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &amp;&amp;\n            key[0] == Translator.placeHolderPrefix &amp;&amp;\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n</code></pre>\n\n<p>This way it automatically normalizes parameters for the <code>Translator</code> object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js. <br />\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex). <br />\nLet me know if you do it ;)</p>\n\n<p>Obviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the <code>Translator</code> object expects it (without delimiters). In this case you can stick to my first implementation.</p>\n\n<p>That's all. See ya ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-21T10:32:24.000Z","created_by":1,"updated_at":"2014-02-28T12:35:38.000Z","updated_by":1,"published_at":"2014-02-28T11:40:05.000Z","published_by":1},{"id":7,"uuid":"c59c1d51-e429-4617-90d0-ff1d3ca71234","title":"Write a console application using Symfony and Pimple","slug":"write-a-console-application-using-symfony-and-pimple","markdown":"In this article I will show you how to set up a stand alone command line application by using the [Symfony Console component](https://github.com/symfony/console) and [Pimple](http://pimple.sensiolabs.org/).\n\n![Sample command line app](/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png)\n\nWriting console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).\n\nAnyway I discovered that writing stand alone command line applications using only the [Symfony/Console](https://github.com/symfony/console) component is a lot more easy and enjoyable and that a lot of famous command line applications uses it ([Composer](https://getcomposer.org/) and [Laravel/Artisan](http://laravel.com/docs/commands) just to name a few). Furthermore by using Symfony I became a great fan of the *Dependency Injection* and *Inversion of Control (IoC)* [design pattern](http://martinfowler.com/articles/injection.html) and, as my dependencies started to grow, I wanted to put some sort of *container* in my command line apps. I decided to go with [Pimple](http://pimple.sensiolabs.org/): a really simple dependency injection container written by [Fabien Potencier](http://fabien.potencier.org/), the notorious head behind the Symfony framework and Sensio.\n\n###Let's start\nI will demonstrate my approach by creating a simple \"hello *$name*\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated [GitHub repository](https://github.com/lmammino/SymfonyConsolePimple).\n\nSo we will be able to run\n\n```bash\napp/console greet Alice\n```\n\nand it will print out \n\n```bash\nHello Alice\n(First time!)\n```\n\nYes, intentionally simple! ;)\n\nLet's start by creating our *composer.json* file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).\n\n```json\n{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n```\n\nYes, let's run `composer update` to download all the libraries.\n\n### Folder structure\n\nLet's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:\n\n- app\n- src\n- vendors\n\nThe **app** folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.\n\n### The Greeter service\n\nLet's just define our core service by Writing the `Greeter` class. This class defines the business logic of our greeting application.\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter\n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this->file = $file;\n        if (file_exists($file)) {\n            $this->greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this->greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this->file, Yaml::dump($this->greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            $this->greetings[$name] = 1;\n        } else {\n            $this->greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            return 0;\n        }\n\n        return $this->greetings[$name];\n    }\n}\n```\n\nThe class is really simple. The main methods are `greet` and `countGreetings` that allows you to build the greet string for someone and to count how many times you have greet someone.\n\nNote that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.\n\n### The GreetCommand\n\nNow we have a service with the main business logic, let's just write a Symfony command to run it:\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this->greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this->setName('greet')\n            ->setDescription('Greet someone')\n            ->addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            ->addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $yell = $input->getOption('yell');\n\n        $output->writeln($this->greeter->greet($name, $yell));\n        if (1 === ($count = $this->greeter->countGreetings($name))) {\n            $output->writeln('(First time!)');\n        } else {\n            $output->writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n```\n\nThe command is totally self explainatory! It just defines the *greet* command offering a *name* argument and a *yell* option (both optional). The point here is that our command has a dependency on the `Greeter` class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).\n\n### Ladies and gents, the Pimple container!\n\nFinally it's time to write our Pimple container. Before getting to the code let's recap things a bit.\nWe have a parameter (the name of the greetings count file) and two services (the `Greeter` service and the `GreetCommand`).\nWe will create a `app/config/container.php` file to define our parameters and services with Pimple:\n\n```php\n<?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' => 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application->addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;\n```\n\nIf you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.\nLet's check our definitions one by one:\n\n- `$c['parameters']` contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)\n- `$c['greeter']` defines the construction of our `Greeter` service\n- `$c['command.greet']` defines the construction of our *greet* command\n- `$c['commands']` is an helper definition that returns an array with all the commands that we want to add in our application\n- `$c['application']` defines the creation of our command line application\n\nOk, we are almost done. We just need to write our bootstrap file and our console executable file.\n\n### The bootstrap file\n\nThe file `app/bootstrap.php` is used to load the composer autoloader class and our container:\n\n```php\n<?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n```\n\n`set_time_limit(0)` ensures that our script will not be killed after a certain amount of seconds (if your *php.ini* wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).\n\n### The executable console file\n\nThe last step needed to make our application executable is to write the `app/console` file. This is a php file that can be executed from the command line (you need to `chmod +x` it).\n\n```php\n#!/usr/bin/env php\n<?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application->run();\n```\n\nBy using a container it just need to load our \"application\" service and call `run()` on it.\n\nNote that the first \"[shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29)\" line (`#!/usr/bin/env php`) allows us to run this file by calling `app/console` (so that you can avoid to call the php interpreter explicitly).\n\n### Conclusions\n\nThis app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.\n\nJust to make a final recap I think this approach guarantees several benefits:\n\n- Write **\"container agnostic\" commands** (they does not know the container, but have only the required dependencies injected)\n- **Attach new commands from configuration**: you just need to add them to the `$container['commands']` array\n- Help you a lot to write **thin commands** (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command\n- Allow you to have **parameters and configuration** (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)\n\nThat should be all. Feel free to comment this post or to contribute to the [sample app repository](https://github.com/lmammino/SymfonyConsolePimple) if you feel that this approach can be tweaked.\n\n**UPDATE** (March 16, 2014):  \n[Javier Egiluz](https://twitter.com/javiereguiluz), great Symfony evangelist, pointed out that one of his command line applications, [easybook](http://easybook-project.org/), uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the [easybook code base](https://github.com/javiereguiluz/easybook).\n\nHave a nice weekend!","html":"<p>In this article I will show you how to set up a stand alone command line application by using the <a href=\"https://github.com/symfony/console\">Symfony Console component</a> and <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>.</p>\n\n<p><img src=\"/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png\" alt=\"Sample command line app\" /></p>\n\n<p>Writing console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).</p>\n\n<p>Anyway I discovered that writing stand alone command line applications using only the <a href=\"https://github.com/symfony/console\">Symfony/Console</a> component is a lot more easy and enjoyable and that a lot of famous command line applications uses it (<a href=\"https://getcomposer.org/\">Composer</a> and <a href=\"http://laravel.com/docs/commands\">Laravel/Artisan</a> just to name a few). Furthermore by using Symfony I became a great fan of the <em>Dependency Injection</em> and <em>Inversion of Control (IoC)</em> <a href=\"http://martinfowler.com/articles/injection.html\">design pattern</a> and, as my dependencies started to grow, I wanted to put some sort of <em>container</em> in my command line apps. I decided to go with <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>: a really simple dependency injection container written by <a href=\"http://fabien.potencier.org/\">Fabien Potencier</a>, the notorious head behind the Symfony framework and Sensio.</p>\n\n<h3 id=\"letsstart\">Let's start</h3>\n\n<p>I will demonstrate my approach by creating a simple \"hello <em>$name</em>\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">GitHub repository</a>.</p>\n\n<p>So we will be able to run</p>\n\n<pre><code class=\"bash\">app/console greet Alice  \n</code></pre>\n\n<p>and it will print out </p>\n\n<pre><code class=\"bash\">Hello Alice  \n(First time!)\n</code></pre>\n\n<p>Yes, intentionally simple! ;)</p>\n\n<p>Let's start by creating our <em>composer.json</em> file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).</p>\n\n<pre><code class=\"json\">{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n</code></pre>\n\n<p>Yes, let's run <code>composer update</code> to download all the libraries.</p>\n\n<h3 id=\"folderstructure\">Folder structure</h3>\n\n<p>Let's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:</p>\n\n<ul>\n<li>app</li>\n<li>src</li>\n<li>vendors</li>\n</ul>\n\n<p>The <strong>app</strong> folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.</p>\n\n<h3 id=\"thegreeterservice\">The Greeter service</h3>\n\n<p>Let's just define our core service by Writing the <code>Greeter</code> class. This class defines the business logic of our greeting application.</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter  \n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this-&gt;file = $file;\n        if (file_exists($file)) {\n            $this-&gt;greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this-&gt;greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this-&gt;file, Yaml::dump($this-&gt;greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this-&gt;greetings[$name])) {\n            $this-&gt;greetings[$name] = 1;\n        } else {\n            $this-&gt;greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this-&gt;greetings[$name])) {\n            return 0;\n        }\n\n        return $this-&gt;greetings[$name];\n    }\n}\n</code></pre>\n\n<p>The class is really simple. The main methods are <code>greet</code> and <code>countGreetings</code> that allows you to build the greet string for someone and to count how many times you have greet someone.</p>\n\n<p>Note that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.</p>\n\n<h3 id=\"thegreetcommand\">The GreetCommand</h3>\n\n<p>Now we have a service with the main business logic, let's just write a Symfony command to run it:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;  \nuse Symfony\\Component\\Console\\Command\\Command;  \nuse Symfony\\Component\\Console\\Input\\InputArgument;  \nuse Symfony\\Component\\Console\\Input\\InputInterface;  \nuse Symfony\\Component\\Console\\Input\\InputOption;  \nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command  \n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this-&gt;greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this-&gt;setName('greet')\n            -&gt;setDescription('Greet someone')\n            -&gt;addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            -&gt;addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input-&gt;getArgument('name');\n        $yell = $input-&gt;getOption('yell');\n\n        $output-&gt;writeln($this-&gt;greeter-&gt;greet($name, $yell));\n        if (1 === ($count = $this-&gt;greeter-&gt;countGreetings($name))) {\n            $output-&gt;writeln('(First time!)');\n        } else {\n            $output-&gt;writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n</code></pre>\n\n<p>The command is totally self explainatory! It just defines the <em>greet</em> command offering a <em>name</em> argument and a <em>yell</em> option (both optional). The point here is that our command has a dependency on the <code>Greeter</code> class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).</p>\n\n<h3 id=\"ladiesandgentsthepimplecontainer\">Ladies and gents, the Pimple container!</h3>\n\n<p>Finally it's time to write our Pimple container. Before getting to the code let's recap things a bit. <br />\nWe have a parameter (the name of the greetings count file) and two services (the <code>Greeter</code> service and the <code>GreetCommand</code>). <br />\nWe will create a <code>app/config/container.php</code> file to define our parameters and services with Pimple:</p>\n\n<pre><code class=\"php\">&lt;?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' =&gt; 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application-&gt;addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;  \n</code></pre>\n\n<p>If you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services. <br />\nLet's check our definitions one by one:</p>\n\n<ul>\n<li><code>$c['parameters']</code> contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)</li>\n<li><code>$c['greeter']</code> defines the construction of our <code>Greeter</code> service</li>\n<li><code>$c['command.greet']</code> defines the construction of our <em>greet</em> command</li>\n<li><code>$c['commands']</code> is an helper definition that returns an array with all the commands that we want to add in our application</li>\n<li><code>$c['application']</code> defines the creation of our command line application</li>\n</ul>\n\n<p>Ok, we are almost done. We just need to write our bootstrap file and our console executable file.</p>\n\n<h3 id=\"thebootstrapfile\">The bootstrap file</h3>\n\n<p>The file <code>app/bootstrap.php</code> is used to load the composer autoloader class and our container:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n</code></pre>\n\n<p><code>set_time_limit(0)</code> ensures that our script will not be killed after a certain amount of seconds (if your <em>php.ini</em> wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).</p>\n\n<h3 id=\"theexecutableconsolefile\">The executable console file</h3>\n\n<p>The last step needed to make our application executable is to write the <code>app/console</code> file. This is a php file that can be executed from the command line (you need to <code>chmod +x</code> it).</p>\n\n<pre><code class=\"php\">#!/usr/bin/env php\n&lt;?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application-&gt;run();\n</code></pre>\n\n<p>By using a container it just need to load our \"application\" service and call <code>run()</code> on it.</p>\n\n<p>Note that the first \"<a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\">shebang</a>\" line (<code>#!/usr/bin/env php</code>) allows us to run this file by calling <code>app/console</code> (so that you can avoid to call the php interpreter explicitly).</p>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n\n<p>This app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity. <br />\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.</p>\n\n<p>Just to make a final recap I think this approach guarantees several benefits:</p>\n\n<ul>\n<li>Write <strong>\"container agnostic\" commands</strong> (they does not know the container, but have only the required dependencies injected)</li>\n<li><strong>Attach new commands from configuration</strong>: you just need to add them to the <code>$container['commands']</code> array</li>\n<li>Help you a lot to write <strong>thin commands</strong> (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command</li>\n<li>Allow you to have <strong>parameters and configuration</strong> (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)</li>\n</ul>\n\n<p>That should be all. Feel free to comment this post or to contribute to the <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">sample app repository</a> if you feel that this approach can be tweaked.</p>\n\n<p><strong>UPDATE</strong> (March 16, 2014): <br />\n<a href=\"https://twitter.com/javiereguiluz\">Javier Egiluz</a>, great Symfony evangelist, pointed out that one of his command line applications, <a href=\"http://easybook-project.org/\">easybook</a>, uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the <a href=\"https://github.com/javiereguiluz/easybook\">easybook code base</a>.</p>\n\n<p>Have a nice weekend!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-03-16T16:50:57.000Z","updated_by":1,"published_at":"2014-03-15T02:16:20.000Z","published_by":1},{"id":8,"uuid":"1e2cce9d-4250-415d-b752-8755ca204bdf","title":"Reset your MySql server password","slug":"reset-your-mysql-server-password","markdown":"Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.\n\nYou just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).\n\n![Reset your MySql server password](/content/images/2014/Mar/password_reset.jpg)\n\n#### 1. Stop the mysql daemon\n\n```bash\nsudo /etc/init.d/mysql stopRun\n```\n\n#### 2. Disable the security checks\n\n```bash\nmysqld_safe --skip-grant-tables &\n```\n\nThe [mysqld_safe](http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html) command will essentially restarts your MySql server but with the option `--skip-grant-tables` it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.\n\nYeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.\n\n#### 3. Login as root\n\n```bash\nmysql -u root -p mysql\n```\n\nIt will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root!\nThe last argument (`mysql`) specifies you want to access the MySql internal database (where user credentials are stored).\n\n#### 4. Change the root password\n\nYou're using the MySql shell now. Just run:\n\n```mysql\nupdate user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";\nexit;\n```\n\nYou need to change the `\"NEW-ROOT-PASSWORD\"` with a password of your choice (obviously).\n\n#### 5. Restart MySql\n\nYou're back in your bash shell:\n\n```bash\nsudo service mysql restart\n```\n\nThis will restart the MySql server and will enable the security checks again.\n\nSo that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)","html":"<p>Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.</p>\n\n<p>You just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).</p>\n\n<p><img src=\"/content/images/2014/Mar/password_reset.jpg\" alt=\"Reset your MySql server password\" /></p>\n\n<h4 id=\"1stopthemysqldaemon\">1. Stop the mysql daemon</h4>\n\n<pre><code class=\"bash\">sudo /etc/init.d/mysql stopRun  \n</code></pre>\n\n<h4 id=\"2disablethesecuritychecks\">2. Disable the security checks</h4>\n\n<pre><code class=\"bash\">mysqld_safe --skip-grant-tables &amp;  \n</code></pre>\n\n<p>The <a href=\"http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html\">mysqld_safe</a> command will essentially restarts your MySql server but with the option <code>--skip-grant-tables</code> it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any! <br />\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.</p>\n\n<p>Yeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.</p>\n\n<h4 id=\"3loginasroot\">3. Login as root</h4>\n\n<pre><code class=\"bash\">mysql -u root -p mysql  \n</code></pre>\n\n<p>It will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root! <br />\nThe last argument (<code>mysql</code>) specifies you want to access the MySql internal database (where user credentials are stored).</p>\n\n<h4 id=\"4changetherootpassword\">4. Change the root password</h4>\n\n<p>You're using the MySql shell now. Just run:</p>\n\n<pre><code class=\"mysql\">update user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";  \nexit;  \n</code></pre>\n\n<p>You need to change the <code>\"NEW-ROOT-PASSWORD\"</code> with a password of your choice (obviously).</p>\n\n<h4 id=\"5restartmysql\">5. Restart MySql</h4>\n\n<p>You're back in your bash shell:</p>\n\n<pre><code class=\"bash\">sudo service mysql restart  \n</code></pre>\n\n<p>This will restart the MySql server and will enable the security checks again.</p>\n\n<p>So that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:20:07.000Z","updated_by":1,"published_at":"2014-03-30T09:07:56.000Z","published_by":1},{"id":9,"uuid":"f1da9e6a-ad1d-422f-91a0-25afe4aad30b","title":"3 invitations to try Atom.io","slug":"3-invitations-to-try-atom-io","markdown":"I have finally got my invitation to try the new text editor [Atom.io](https://atom.io). Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous [SublimeText](http://www.sublimetext.com/).\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.\n\n![Atom.io screenshoot](/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png)\n\nThe point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.\n\nI would be glad to **share the invitations** with the first 3 readers who would **follow me** on [GitHub](https://github.com/lmammino) or [Twitter](https://twitter.com/loige) **and write a comment** on this post.\n\nPS: You would probably need a GitHub account!\n\n**UPDATE**, April 12: \nSorry guys, my invitations has gone for now.\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.\n\nHope you will enjoy it.","html":"<p>I have finally got my invitation to try the new text editor <a href=\"https://atom.io\">Atom.io</a>. Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous <a href=\"http://www.sublimetext.com/\">SublimeText</a>. <br />\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.</p>\n\n<p><img src=\"/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png\" alt=\"Atom.io screenshoot\" /></p>\n\n<p>The point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.</p>\n\n<p>I would be glad to <strong>share the invitations</strong> with the first 3 readers who would <strong>follow me</strong> on <a href=\"https://github.com/lmammino\">GitHub</a> or <a href=\"https://twitter.com/loige\">Twitter</a> <strong>and write a comment</strong> on this post.</p>\n\n<p>PS: You would probably need a GitHub account!</p>\n\n<p><strong>UPDATE</strong>, April 12: \nSorry guys, my invitations has gone for now. <br />\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.</p>\n\n<p>Hope you will enjoy it.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-09T10:48:49.000Z","created_by":1,"updated_at":"2014-04-11T22:37:21.000Z","updated_by":1,"published_at":"2014-04-09T10:58:22.000Z","published_by":1},{"id":10,"uuid":"d057377d-8e7c-4e9e-b5c8-fd07290b7467","title":"Introducing ORM Cheatsheet","slug":"introducing-orm-cheatsheet","markdown":"This week I received an interesting email from Martin Stradej, the developer of [ORM Designer](http://www.orm-designer.com), a tool to design ORM relationships with a simple but powerful graphic user interface.\n\nMartin wrote the mail because he wanted to acknowledge me of his latest project: [ORM Cheatsheet](http://ormcheatsheet.com).\n\n[![ORM Cheatsheet homepage screenshoot](/content/images/2014/Apr/orm-cheatsheet-screenshoot.png)](http://ormcheatsheet.com)\n\nORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports *Doctrine2* and *Doctrine*, but it seems that *Propel* and *Cake PHP*  will be supported too).\n\nIn my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.\n\nIt also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a *Symfony* (both version 2 and 1.4) or a *Zend Framework 2* based one.\n\nThe project has its own [GitHub repository](https://github.com/atlantic18/ormcheatsheet) so everyone can submit a pull request and improve the project.\n\nThat's all\n\nHave a nice weekend","html":"<p>This week I received an interesting email from Martin Stradej, the developer of <a href=\"http://www.orm-designer.com\">ORM Designer</a>, a tool to design ORM relationships with a simple but powerful graphic user interface.</p>\n\n<p>Martin wrote the mail because he wanted to acknowledge me of his latest project: <a href=\"http://ormcheatsheet.com\">ORM Cheatsheet</a>.</p>\n\n<p><a href=\"http://ormcheatsheet.com\"><img src=\"/content/images/2014/Apr/orm-cheatsheet-screenshoot.png\" alt=\"ORM Cheatsheet homepage screenshoot\" title=\"\" /></a></p>\n\n<p>ORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports <em>Doctrine2</em> and <em>Doctrine</em>, but it seems that <em>Propel</em> and <em>Cake PHP</em>  will be supported too).</p>\n\n<p>In my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.</p>\n\n<p>It also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a <em>Symfony</em> (both version 2 and 1.4) or a <em>Zend Framework 2</em> based one.</p>\n\n<p>The project has its own <a href=\"https://github.com/atlantic18/ormcheatsheet\">GitHub repository</a> so everyone can submit a pull request and improve the project.</p>\n\n<p>That's all</p>\n\n<p>Have a nice weekend</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-11T08:50:48.000Z","created_by":1,"updated_at":"2014-04-11T09:24:23.000Z","updated_by":1,"published_at":"2014-04-11T08:50:53.000Z","published_by":1},{"id":11,"uuid":"f35460e0-938b-41cc-be68-3fb5143ee211","title":"Transparent pixel response with Symfony, how to track email opening","slug":"transparent-pixel-response-with-symfony-how-to-track-email-opening","markdown":"If you have ever heard about \"**transparent pixel**\", \"**1x1 blank pixel**\", \"**tracking pixel**\" or simply \"**tracking image**\" you probably know what we are going to talk about and can just [skip to the implementation](#symfonyimplementation)!\n\n\n###Introduction\n\nTransparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.\n\nOne of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.\n\n\n###Track email opening\n\nThe following image shows the typical tracking flow applied to emails:\n\n![Tracking email opening](/content/images/2014/Jun/email-tracking.png)\n\n  1. A user receives our HTML email. Within the email content there's a \"smart\" tracking image: `<img src=\"http://example.com/track.gif?id=1234\">`. Notice that it points to our server **example.com** and has a parameter `id=1234`.\n\n  2. When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.\n  \n  3. The request is handled by the **example.com** webserver. It does not handle the request as a static image but it executes some logic. It checks the `id` parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!\n  \n  4. Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.\n\n\n### Symfony implementation\n\nNow let's see how to implement this tracking flow using the Symfony framework.\n\nNotice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.\n\nFirst of all, we want to have a dedicated `Response` class to send back a transparent pixel to the client, let's call it `TransparentPixelResponse`:\n\n```php\n<?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino <lucianomammino@gmail.com>\n */\nclass TransparentPixelResponse extends Response\n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n    \n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this->headers->set('Content-Type', self::CONTENT_TYPE);\n        $this->setPrivate();\n        $this->headers->addCacheControlDirective('no-cache', true);\n        $this->headers->addCacheControlDirective('must-revalidate', true);\n    }\n}\n```\n\nThe logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.\n\nNow we can write a controller that will handle the tracking request:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\n\nHere the logic is pretty simple too. \nWe created a controller with a `trackEmail` action. The action has been assigned to the route `/track.gif` using the `Route` annotation (if you prefer you can do it also by using the yaml or the xml convention).\nWithin this action we just read the parameter `id` from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).\nThen we just have to return a new instance of our `TransparentPixelResponse` class.\n\nThat's it! Pretty simple, isn't it?\n\n####Improve performance\n\n**UPDATE 2014-06-16**: A comment from [Lumbendil](http://disqus.com/Lumbendil) pointed out that it would be possible to do the \"heavy logic\" within a `kernel.terminate` event listener. So let's refactor our code to follow this good suggestion:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n        \t$dispatcher = $this->get('event_dispatcher');\n            $dispatcher->addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\nNotice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the [`kernel.terminate`](http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate) event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.\n\nObviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.\n\nKeep in mind that the `kernel.terminate` event is optional, and should only be called if your kernel implements `TerminableInterface` (it should work if you are using the  Symfony Standard Edition).\n\n[Lumbendil](http://disqus.com/Lumbendil) also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as [RabbitMq](http://www.rabbitmq.com), [Gearman](http://gearman.org) or [Beanstalkd](http://kr.github.io/beanstalkd). These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).\n\n### Considerations\n\nYou can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript).\nAnyway, regarding tracking email opening, you should be aware that **some e-mail clients block images loading** when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.\n\n**UPDATE 2014-06-17**: [Jelte Steijaert](http://disqus.com/jeltesteijaert/) reported that using email authentication systems such as [DKIM](http://www.dkim.org/) or [SPF](http://www.openspf.org/) will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! \n\nIf you have some other consideration you are very welcome to write a comment, as always!","html":"<p>If you have ever heard about \"<strong>transparent pixel</strong>\", \"<strong>1x1 blank pixel</strong>\", \"<strong>tracking pixel</strong>\" or simply \"<strong>tracking image</strong>\" you probably know what we are going to talk about and can just <a href=\"#symfonyimplementation\">skip to the implementation</a>!</p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Transparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.</p>\n\n<p>One of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.</p>\n\n<h3 id=\"trackemailopening\">Track email opening</h3>\n\n<p>The following image shows the typical tracking flow applied to emails:</p>\n\n<p><img src=\"/content/images/2014/Jun/email-tracking.png\" alt=\"Tracking email opening\" /></p>\n\n<ol>\n<li><p>A user receives our HTML email. Within the email content there's a \"smart\" tracking image: <code>&lt;img src=\"http://example.com/track.gif?id=1234\"&gt;</code>. Notice that it points to our server <strong>example.com</strong> and has a parameter <code>id=1234</code>.</p></li>\n<li><p>When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.</p></li>\n<li><p>The request is handled by the <strong>example.com</strong> webserver. It does not handle the request as a static image but it executes some logic. It checks the <code>id</code> parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!</p></li>\n<li><p>Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.</p></li>\n</ol>\n\n<h3 id=\"symfonyimplementation\">Symfony implementation</h3>\n\n<p>Now let's see how to implement this tracking flow using the Symfony framework.</p>\n\n<p>Notice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.</p>\n\n<p>First of all, we want to have a dedicated <code>Response</code> class to send back a transparent pixel to the client, let's call it <code>TransparentPixelResponse</code>:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino &lt;lucianomammino@gmail.com&gt;\n */\nclass TransparentPixelResponse extends Response  \n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n\n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this-&gt;headers-&gt;set('Content-Type', self::CONTENT_TYPE);\n        $this-&gt;setPrivate();\n        $this-&gt;headers-&gt;addCacheControlDirective('no-cache', true);\n        $this-&gt;headers-&gt;addCacheControlDirective('must-revalidate', true);\n    }\n}\n</code></pre>\n\n<p>The logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string. <br />\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.</p>\n\n<p>Now we can write a controller that will handle the tracking request:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;  \nuse Symfony\\Component\\HttpFoundation\\Request;  \nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller  \n{\n    /**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n        $id = $request-&gt;query-&gt;get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n</code></pre>\n\n<p>Here the logic is pretty simple too. <br />\nWe created a controller with a <code>trackEmail</code> action. The action has been assigned to the route <code>/track.gif</code> using the <code>Route</code> annotation (if you prefer you can do it also by using the yaml or the xml convention). <br />\nWithin this action we just read the parameter <code>id</code> from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example). <br />\nThen we just have to return a new instance of our <code>TransparentPixelResponse</code> class.</p>\n\n<p>That's it! Pretty simple, isn't it?</p>\n\n<h4 id=\"improveperformance\">Improve performance</h4>\n\n<p><strong>UPDATE 2014-06-16</strong>: A comment from <a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> pointed out that it would be possible to do the \"heavy logic\" within a <code>kernel.terminate</code> event listener. So let's refactor our code to follow this good suggestion:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;  \nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;  \nuse Symfony\\Component\\HttpKernel\\KernelEvents;  \nuse Symfony\\Component\\HttpFoundation\\Request;  \nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller  \n{\n    /**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n        $id = $request-&gt;query-&gt;get('id');\n        if (null !== $id) {\n            $dispatcher = $this-&gt;get('event_dispatcher');\n            $dispatcher-&gt;addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n</code></pre>\n\n<p>Notice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate\"><code>kernel.terminate</code></a> event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.</p>\n\n<p>Obviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.</p>\n\n<p>Keep in mind that the <code>kernel.terminate</code> event is optional, and should only be called if your kernel implements <code>TerminableInterface</code> (it should work if you are using the  Symfony Standard Edition).</p>\n\n<p><a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as <a href=\"http://www.rabbitmq.com\">RabbitMq</a>, <a href=\"http://gearman.org\">Gearman</a> or <a href=\"http://kr.github.io/beanstalkd\">Beanstalkd</a>. These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).</p>\n\n<h3 id=\"considerations\">Considerations</h3>\n\n<p>You can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript). <br />\nAnyway, regarding tracking email opening, you should be aware that <strong>some e-mail clients block images loading</strong> when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.</p>\n\n<p><strong>UPDATE 2014-06-17</strong>: <a href=\"http://disqus.com/jeltesteijaert/\">Jelte Steijaert</a> reported that using email authentication systems such as <a href=\"http://www.dkim.org/\">DKIM</a> or <a href=\"http://www.openspf.org/\">SPF</a> will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! </p>\n\n<p>If you have some other consideration you are very welcome to write a comment, as always!</p>","image":null,"featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-30T17:30:14.000Z","created_by":1,"updated_at":"2014-06-17T09:00:17.000Z","updated_by":1,"published_at":"2014-06-13T10:33:04.000Z","published_by":1},{"id":12,"uuid":"f579dce5-6865-4048-8471-656d02d49066","title":"Simple echo server written in Go, dockerized!","slug":"simple-echo-server-written-in-go-dockerized","markdown":"In this post we will see how to write a (very) simple **Go server app** and how to put it into a **Docker container** and run it.\n\n![Dockerize a Go application](/content/images/2014/Jun/dockerize-go-app.png)\n\n**Disclaimer**: I'm an absolute beginner with both [Go](http://golang.org) and [Docker](https://docker.com) and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are **very** encouraged to scream at me in the comments ([Comments](#disqus_thread)), I will be extremely thankful ;)\n\n##Introduction\n\nWe are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.\n\n*\"Luciano, you are a PHP developer, why bothering with Go?\"* \n\nNice question! Well, there are at least two reasons for this choice:\n\n- **Experimenting**! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.\n- **Simplicity**! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.\n\nFor those who are not familiar with these two technologies I suggest give the official websites a shot ([Docker.com](https://docker.com) and [Golang.org](http://golang.org)) as I will not provide many specific details about them.\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at [Boot2Docker](https://github.com/boot2docker/boot2docker), it will definitely make your life easier.\n\nBeware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).\n\n##The Go echo server\n\nOk, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that *\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"*.\n\nSo let's just write some code. The following script has been widely inspired by [this one](https://coderwall.com/p/wohavg).\n\n```go\n//server.go\n\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (\n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {\n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -> %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {\n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n  \n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n```\n\nOk, the code is commented at it should be understandable enough. \nLet's try if it works.\n\nJust launch the server with the command:\n\n```bash\ngo run server.go\n```\n\nWe will have our server running and it will print out something like:\n\n```\nListening on :3333\n```\n\nLet's open another terminal window to try to speak with him. We will use [netcat](http://wikipedia.org/wiki/Netcat):\n\n```bash \necho \"Hello server\" | nc localhost 3333\n```\n\nThat's what we should see in the two terminal windows:\n\n![Go echo server terminal windows execution](/content/images/2014/Jun/go-server-output.png)\n\nThe terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a *very useful* response from the server.\n\nThat's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a `CTRL+C`.\n\n\n##Dockerizing the application\n\nOk, now we want to *\"dockerize\"* this simple application. Wait, what does *\"dockerize\"* mean? Well, by *\"dockerizing\"* an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.\n\n\n### Images, Containers and Dockerfile(s)\n\nAn extract from the Docker documentation should make things a bit clearer:\n\n> Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.\n\n\nThere are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"*Dockerfile*\".\n\nA \"*Dockerfile*\" is a file called exactly `Dockerfile` that contains several reproducible instructions to create a Docker *image* from scratch.\n\n*What the hell is an image and how it is different from a container?*\n\nIf you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a [brilliant answer from stackoverflow](http://stackoverflow.com/a/21499102/495177) that should make things a bit clearer:\n\n> An image is the set of layers that are built up and can be moved around. Images are read-only.\n> \n> http://docs.docker.io/en/latest/terms/image/\n> http://docs.docker.io/en/latest/terms/layer/\nA container is an active (or inactive if exited) stateful instantiation of an image.\n>\n> http://docs.docker.io/en/latest/terms/container/\n\nFeel free to visit these links if things are not clear yet.\n\nNow let's get back to our `Dockerfile`. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.\n\n### Let's write the Dockerfile\n\nEnough talking, let's jump to the code:\n\n```\nFROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang\nRUN apt-get update\nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]\n```\n\n**Note:** A reader mentioned in a [comment](#comment-1881765009) that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that's your case you can use a minimal dockerfile optimized for GoLang provided by in the [GoLang blog](https://blog.golang.org/docker#TOC_3.) itself.\n\nLet's analyze all the instructions one by one:\n\n- `FROM ubuntu:12.04` defines the base image from which to start. In this case we will use the `ubuntu:12.04` image, a very lightweight image based on ubuntu 12.04.\n\n- `MAINTAINER Luciano Mammino` isn't it self-explanatory enough? ;)\n\n- `RUN apt-get install -y python-software-properties` installs the `python-software-properties` package to be able to execute `add-apt-repository` next.\n\n- `RUN add-apt-repository ppa:duh/golang`, `RUN apt-get update`, `RUN apt-get install -y golang` and  `RUN apt-get install -y golang`: adds a custom repository for Go and installs it.\n\n- `ADD server.go /var/server/server.go`: copies the file `server.go` into the image (storing it into the `/var/server/` folder)\n\n- `EXPOSE 3333`: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.\n\n- `CMD [\"go\", \"run\", \"/var/server/server.go\"]`: describes the command to execute our Go application when the container is launched (yes, it will execute `go run /var/server/server.go`).\n\n### Let's build!\n\nBefore building the image from our Dockerfile, if you are using `boot2docker`, you need to run it with:\n\n```bash\nboot2docker start\n```\n\nIn case it prints out something like this:\n\n```\n2014/06/29 16:09:32 Started.\n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:\n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375\n```\n\nRun the suggested `export` command. Also take note of the given IP address as we would need to use later to connect to our server.\n\nNow just `cd` into the folder that contains the `Dockerfile` and the `server.go` file and run:\n\n```bash\ndocker build -t goecho .\n```\n\nNotice the `.` that refers to the current folder (yes you got it, it says Docker to look for a `Dockerfile` whitin it).\n\nThe `-t goecho` option is not mandatory and is used to \"give a convenience name\" to the resulting image.\n\nYou will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:\n\n```\nSuccessfully built 713c09526bc1\n```\n\nYou can also execute\n\n```bash\ndocker images\n```\n\nTo list all the available images (you should see our `goecho` on the top of the list).\n\nOur image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.\n\n### Running the container\n\nRunning the image and having a live container is just a matter of running:\n\n```bash\ndocker run -i -t -p 3333:3333 goecho\n```\n\nThe options `-i` and `-t` allows us to execute the container into the interactive mode that allows us to shut it down with `CTRL+C` when needed.\n\nThe option `-p 3333:3333` maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.\n\nNow our container is live and running and our server application is active.\n\nLet's open a new terminal window and try again:\n\n```bash\necho \"Hello server\" | nc <ip> 3333\n```\n\n`<ip>` is `localhost` if you are not using `boot2docker`. If you are using it you need to provide the IP of the intermediade virtual machine provided by `boot2docker`. It is the one we recorded before, but if you can't find it you can simply run `boot2docker ip` to discover it (it's usually `192.168.59.103`).\n\n## Conclusions\n\nThat's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.\n\nThank you","html":"<p>In this post we will see how to write a (very) simple <strong>Go server app</strong> and how to put it into a <strong>Docker container</strong> and run it.</p>\n\n<p><img src=\"/content/images/2014/Jun/dockerize-go-app.png\" alt=\"Dockerize a Go application\" /></p>\n\n<p><strong>Disclaimer</strong>: I'm an absolute beginner with both <a href=\"http://golang.org\">Go</a> and <a href=\"https://docker.com\">Docker</a> and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are <strong>very</strong> encouraged to scream at me in the comments (<a href=\"#disqus_thread\">Comments</a>), I will be extremely thankful ;)</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>We are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.</p>\n\n<p><em>\"Luciano, you are a PHP developer, why bothering with Go?\"</em> </p>\n\n<p>Nice question! Well, there are at least two reasons for this choice:</p>\n\n<ul>\n<li><strong>Experimenting</strong>! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.</li>\n<li><strong>Simplicity</strong>! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.</li>\n</ul>\n\n<p>For those who are not familiar with these two technologies I suggest give the official websites a shot (<a href=\"https://docker.com\">Docker.com</a> and <a href=\"http://golang.org\">Golang.org</a>) as I will not provide many specific details about them. <br />\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at <a href=\"https://github.com/boot2docker/boot2docker\">Boot2Docker</a>, it will definitely make your life easier.</p>\n\n<p>Beware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).</p>\n\n<h2 id=\"thegoechoserver\">The Go echo server</h2>\n\n<p>Ok, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that <em>\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"</em>.</p>\n\n<p>So let's just write some code. The following script has been widely inspired by <a href=\"https://coderwall.com/p/wohavg\">this one</a>.</p>\n\n<pre><code class=\"language-go\">//server.go\n\npackage main\n\nimport (  \n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (  \n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {  \n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -&gt; %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {  \n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n\n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n</code></pre>\n\n<p>Ok, the code is commented at it should be understandable enough. <br />\nLet's try if it works.</p>\n\n<p>Just launch the server with the command:</p>\n\n<pre><code class=\"language-bash\">go run server.go  \n</code></pre>\n\n<p>We will have our server running and it will print out something like:</p>\n\n<pre><code>Listening on :3333  \n</code></pre>\n\n<p>Let's open another terminal window to try to speak with him. We will use <a href=\"http://wikipedia.org/wiki/Netcat\">netcat</a>:</p>\n\n<pre><code class=\"language-bash \">echo \"Hello server\" | nc localhost 3333  \n</code></pre>\n\n<p>That's what we should see in the two terminal windows:</p>\n\n<p><img src=\"/content/images/2014/Jun/go-server-output.png\" alt=\"Go echo server terminal windows execution\" /></p>\n\n<p>The terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a <em>very useful</em> response from the server.</p>\n\n<p>That's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a <code>CTRL+C</code>.</p>\n\n<h2 id=\"dockerizingtheapplication\">Dockerizing the application</h2>\n\n<p>Ok, now we want to <em>\"dockerize\"</em> this simple application. Wait, what does <em>\"dockerize\"</em> mean? Well, by <em>\"dockerizing\"</em> an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.</p>\n\n<h3 id=\"imagescontainersanddockerfiles\">Images, Containers and Dockerfile(s)</h3>\n\n<p>An extract from the Docker documentation should make things a bit clearer:</p>\n\n<blockquote>\n  <p>Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.</p>\n</blockquote>\n\n<p>There are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"<em>Dockerfile</em>\".</p>\n\n<p>A \"<em>Dockerfile</em>\" is a file called exactly <code>Dockerfile</code> that contains several reproducible instructions to create a Docker <em>image</em> from scratch.</p>\n\n<p><em>What the hell is an image and how it is different from a container?</em></p>\n\n<p>If you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a <a href=\"http://stackoverflow.com/a/21499102/495177\">brilliant answer from stackoverflow</a> that should make things a bit clearer:</p>\n\n<blockquote>\n  <p>An image is the set of layers that are built up and can be moved around. Images are read-only.</p>\n  \n  <p><a href=\"http://docs.docker.io/en/latest/terms/image/\">http://docs.docker.io/en/latest/terms/image/</a>\n  <a href=\"http://docs.docker.io/en/latest/terms/layer/\">http://docs.docker.io/en/latest/terms/layer/</a>\n  A container is an active (or inactive if exited) stateful instantiation of an image.  </p>\n  \n  <p><a href=\"http://docs.docker.io/en/latest/terms/container/\">http://docs.docker.io/en/latest/terms/container/</a></p>\n</blockquote>\n\n<p>Feel free to visit these links if things are not clear yet.</p>\n\n<p>Now let's get back to our <code>Dockerfile</code>. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.</p>\n\n<h3 id=\"letswritethedockerfile\">Let's write the Dockerfile</h3>\n\n<p>Enough talking, let's jump to the code:</p>\n\n<pre><code>FROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang  \nRUN apt-get update  \nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]  \n</code></pre>\n\n<p><strong>Note:</strong> A reader mentioned in a <a href=\"#comment-1881765009\">comment</a> that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that's your case you can use a minimal dockerfile optimized for GoLang provided by in the <a href=\"https://blog.golang.org/docker#TOC_3.\">GoLang blog</a> itself.</p>\n\n<p>Let's analyze all the instructions one by one:</p>\n\n<ul>\n<li><p><code>FROM ubuntu:12.04</code> defines the base image from which to start. In this case we will use the <code>ubuntu:12.04</code> image, a very lightweight image based on ubuntu 12.04.</p></li>\n<li><p><code>MAINTAINER Luciano Mammino</code> isn't it self-explanatory enough? ;)</p></li>\n<li><p><code>RUN apt-get install -y python-software-properties</code> installs the <code>python-software-properties</code> package to be able to execute <code>add-apt-repository</code> next.</p></li>\n<li><p><code>RUN add-apt-repository ppa:duh/golang</code>, <code>RUN apt-get update</code>, <code>RUN apt-get install -y golang</code> and  <code>RUN apt-get install -y golang</code>: adds a custom repository for Go and installs it.</p></li>\n<li><p><code>ADD server.go /var/server/server.go</code>: copies the file <code>server.go</code> into the image (storing it into the <code>/var/server/</code> folder)</p></li>\n<li><p><code>EXPOSE 3333</code>: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.</p></li>\n<li><p><code>CMD [\"go\", \"run\", \"/var/server/server.go\"]</code>: describes the command to execute our Go application when the container is launched (yes, it will execute <code>go run /var/server/server.go</code>).</p></li>\n</ul>\n\n<h3 id=\"letsbuild\">Let's build!</h3>\n\n<p>Before building the image from our Dockerfile, if you are using <code>boot2docker</code>, you need to run it with:</p>\n\n<pre><code class=\"language-bash\">boot2docker start  \n</code></pre>\n\n<p>In case it prints out something like this:</p>\n\n<pre><code>2014/06/29 16:09:32 Started.  \n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:  \n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375  \n</code></pre>\n\n<p>Run the suggested <code>export</code> command. Also take note of the given IP address as we would need to use later to connect to our server.</p>\n\n<p>Now just <code>cd</code> into the folder that contains the <code>Dockerfile</code> and the <code>server.go</code> file and run:</p>\n\n<pre><code class=\"language-bash\">docker build -t goecho .  \n</code></pre>\n\n<p>Notice the <code>.</code> that refers to the current folder (yes you got it, it says Docker to look for a <code>Dockerfile</code> whitin it).</p>\n\n<p>The <code>-t goecho</code> option is not mandatory and is used to \"give a convenience name\" to the resulting image.</p>\n\n<p>You will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:</p>\n\n<pre><code>Successfully built 713c09526bc1  \n</code></pre>\n\n<p>You can also execute</p>\n\n<pre><code class=\"language-bash\">docker images  \n</code></pre>\n\n<p>To list all the available images (you should see our <code>goecho</code> on the top of the list).</p>\n\n<p>Our image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.</p>\n\n<h3 id=\"runningthecontainer\">Running the container</h3>\n\n<p>Running the image and having a live container is just a matter of running:</p>\n\n<pre><code class=\"language-bash\">docker run -i -t -p 3333:3333 goecho  \n</code></pre>\n\n<p>The options <code>-i</code> and <code>-t</code> allows us to execute the container into the interactive mode that allows us to shut it down with <code>CTRL+C</code> when needed.</p>\n\n<p>The option <code>-p 3333:3333</code> maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.</p>\n\n<p>Now our container is live and running and our server application is active.</p>\n\n<p>Let's open a new terminal window and try again:</p>\n\n<pre><code class=\"language-bash\">echo \"Hello server\" | nc &lt;ip&gt; 3333  \n</code></pre>\n\n<p><code>&lt;ip&gt;</code> is <code>localhost</code> if you are not using <code>boot2docker</code>. If you are using it you need to provide the IP of the intermediade virtual machine provided by <code>boot2docker</code>. It is the one we recorded before, but if you can't find it you can simply run <code>boot2docker ip</code> to discover it (it's usually <code>192.168.59.103</code>).</p>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>That's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.</p>\n\n<p>Thank you</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Simple server app written in Go lang and docker","meta_description":"How to write a very simple server app written in Go language and use a docker container to launch it ","author_id":1,"created_at":"2014-06-29T10:24:24.000Z","created_by":1,"updated_at":"2015-03-01T13:01:20.000Z","updated_by":1,"published_at":"2014-06-29T14:43:56.000Z","published_by":1},{"id":13,"uuid":"bde6d699-c5aa-4efb-aa3e-0fcdddfd522b","title":"5 lessons learned at the Bank of Ireland Accelerator","slug":"5-lessons-learned-at-the-bank-of-ireland-accelerator","markdown":"**What a hell of 3 months!** \n\nDuring the last 3 months I haven't got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup [Sbaam](http://sbaam.com). There I spent 3 incredible months with a huge amount of lessons learned about **startups** and **entrepreneurship**. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.\n\n<small>Consider this is my first \"non technical\" post with a lot of english written text. You'll probalby find it plenty of mistakes, so feel free to [send me an email](mailto:loige@hotmail.com) and help me to improve it (and improve my english too :P)</small>\n\n\n##1. Being an entrepreneur is hell\n\n<img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Welcome... to hell!\"</p>\n<p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\">@liaonet</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.\n\nYes, it may sound trivial but it's true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!\n\nEntrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!\n\nAnd, speaking about entrepreneurs' earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it's your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day **you are the \"number one\" investor of your company**.\n\n\n##2. Understand who you are, what you want to accomplish but don't forget about your customers\n\n<img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Nail it and then scale it! Find your first 100 happy customers and really understand them\"</p>\n<p> – Sean O'Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\">@sosventures</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nSean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers!\nIt's crucial to understand what you are doing and what your customers need. You shouldn't really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.\n\n**Start small**. Find a niche and try to grasp what's the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that's the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.\n\n\n##3. Passion breaks the point!\n\n<img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive\"</p>\n<p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\">@mynameisdanram</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nDaniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.\n\nGreat success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing.\nYou will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.\n\nThere will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what's the best way for you to release the stress and be ready to start again.\n\nDaniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.\n\n##4. Surround yourself with great people\n\n<img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You are the average of the five people you spend most time with\"</p>\n<p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\">@seangallagher1</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nNobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends.\nThe fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.\n\nThis obviously applies also to your business: **team, team, team**! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.\n\nJust imagine what can happen to your business if your core team is not the right one...\n\n\n##5. You should work really hard if you want to look as good as a swan!\n\n<img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum\"</p>\n<p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\">@waynemurphy77</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is really a great metaphor. I simply loved it.\nI have two different interpretation of it.\n\nThe first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can't fake it, you have to earn it!\n\nMy second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don't make the mistake to relax at the first goal reached, but immediately look at the next one and do what's needed to reach it, immediately! \n\n\n## Conclusion\n\nThese three months have been probably the best of my life in terms of learning and experience, so **I have to say a huge \"thank you\" to everyone that made this possible**.\n\nSecondly i'd like to have your opinion and interpretation of all this quotes. Feel free to **leave a comment and tell me which one of these five lessons you liked most**.","html":"<p><strong>What a hell of 3 months!</strong> </p>\n\n<p>During the last 3 months I haven't got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup <a href=\"http://sbaam.com\">Sbaam</a>. There I spent 3 incredible months with a huge amount of lessons learned about <strong>startups</strong> and <strong>entrepreneurship</strong>. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.</p>\n\n<p><small>Consider this is my first \"non technical\" post with a lot of english written text. You'll probalby find it plenty of mistakes, so feel free to <a href=\"mailto:loige@hotmail.com\">send me an email</a> and help me to improve it (and improve my english too :P)</small></p>\n\n<h2 id=\"1beinganentrepreneurishell\">1. Being an entrepreneur is hell</h2>\n\n<p><img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>  </p>\n\n<blockquote style=\"float:left; width: 70%\">  \n<p>\"Welcome... to hell!\"</p>  \n<p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\">@liaonet</a>)</p>  \n</blockquote>  \n\n<div style=\"clear:both\"></div>\n\n<p>This is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.</p>\n\n<p>Yes, it may sound trivial but it's true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!</p>\n\n<p>Entrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!</p>\n\n<p>And, speaking about entrepreneurs' earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it's your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day <strong>you are the \"number one\" investor of your company</strong>.</p>\n\n<h2 id=\"2understandwhoyouarewhatyouwanttoaccomplishbutdontforgetaboutyourcustomers\">2. Understand who you are, what you want to accomplish but don't forget about your customers</h2>\n\n<p><img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>  </p>\n\n<blockquote style=\"float:left; width: 70%\">  \n<p>\"Nail it and then scale it! Find your first 100 happy customers and really understand them\"</p>  \n<p> – Sean O'Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\">@sosventures</a>)</p>  \n</blockquote>  \n\n<div style=\"clear:both\"></div>\n\n<p>Sean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers! <br />\nIt's crucial to understand what you are doing and what your customers need. You shouldn't really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.</p>\n\n<p><strong>Start small</strong>. Find a niche and try to grasp what's the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that's the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.</p>\n\n<h2 id=\"3passionbreaksthepoint\">3. Passion breaks the point!</h2>\n\n<p><img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>  </p>\n\n<blockquote style=\"float:left; width: 70%\">  \n<p>\"You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive\"</p>  \n<p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\">@mynameisdanram</a>)</p>  \n</blockquote>  \n\n<div style=\"clear:both\"></div>\n\n<p>Daniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.</p>\n\n<p>Great success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing. <br />\nYou will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.</p>\n\n<p>There will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what's the best way for you to release the stress and be ready to start again.</p>\n\n<p>Daniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.</p>\n\n<h2 id=\"4surroundyourselfwithgreatpeople\">4. Surround yourself with great people</h2>\n\n<p><img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>  </p>\n\n<blockquote style=\"float:left; width: 70%\">  \n<p>\"You are the average of the five people you spend most time with\"</p>  \n<p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\">@seangallagher1</a>)</p>  \n</blockquote>  \n\n<div style=\"clear:both\"></div>\n\n<p>Nobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends. <br />\nThe fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.</p>\n\n<p>This obviously applies also to your business: <strong>team, team, team</strong>! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.</p>\n\n<p>Just imagine what can happen to your business if your core team is not the right one...</p>\n\n<h2 id=\"5youshouldworkreallyhardifyouwanttolookasgoodasaswan\">5. You should work really hard if you want to look as good as a swan!</h2>\n\n<p><img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>  </p>\n\n<blockquote style=\"float:left; width: 70%\">  \n<p>\"You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum\"</p>  \n<p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\">@waynemurphy77</a>)</p>  \n</blockquote>  \n\n<div style=\"clear:both\"></div>\n\n<p>This is really a great metaphor. I simply loved it. <br />\nI have two different interpretation of it.</p>\n\n<p>The first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can't fake it, you have to earn it!</p>\n\n<p>My second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don't make the mistake to relax at the first goal reached, but immediately look at the next one and do what's needed to reach it, immediately! </p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>These three months have been probably the best of my life in terms of learning and experience, so <strong>I have to say a huge \"thank you\" to everyone that made this possible</strong>.</p>\n\n<p>Secondly i'd like to have your opinion and interpretation of all this quotes. Feel free to <strong>leave a comment and tell me which one of these five lessons you liked most</strong>.</p>","image":"/content/images/2014/12/boi-1.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-12-22T02:04:32.000Z","created_by":1,"updated_at":"2014-12-24T10:43:15.000Z","updated_by":1,"published_at":"2014-12-22T21:23:58.000Z","published_by":1},{"id":14,"uuid":"80c5a713-60e0-4176-a0a0-e7d063bd4f2e","title":"Symfony, edit the Response globally using the Kernel Response event","slug":"symfony-edit-the-response-globally-using-the-kernel-response-event","markdown":"One of the things I like most of the Symfony framework is its [Http Kernel component](https://packagist.org/packages/symfony/http-kernel). Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through [events](http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener).\n\n[![Symfony Http Kernel component overview](/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png)](http://symfony.com/doc/current/components/http_kernel/introduction.html)\n\nThis approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).\n\n\n## The Kernel Response event\nOne event that I’ve been using a lot lately is the  [Kernel Response event](http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html) which allows you to edit the response after it has been generated.\n\nThanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.\n\nI will present two different real case scenarios to show how useful (and simple) it is.\n\n### Example 1. Add custom Http headers to notify remaining api calls\nLet's suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API.\nIt seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: `X-RateLimit-Limit` (maximum number of requests per period), `X-RateLimit-Remaining` (remaining requests in the current period) and `X-RateLimit-Reset` (the timestamp on which the current period ends).\n\nAs I don't want to implement a fully working solution here let's assume we have already written a rate limit checker service registered as `rate_limit_checker` that implements the following interface:\n\n```php\ninterface RateLimitCheckerInterface\n{\n\tpublic function getRateLimit();\n\n\tpublic function getRateLimitRemaining();\n    \n    public function getRateLimitReset();\n}\n```\n\nLet's now write our `RateLimitHeadersListener`:\n\n```php\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nfinal class RateLimitHeadersListener\n{\n\tprivate $rateLimitChecker;\n\n\tpublic function __construct(\n    \tRateLimitCheckerInterface $rateLimitChecker\n    ){\n    \t$this->rateLimitChecker = $rateLimitChecker;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {   \n        $headers = $event->getResponse()->headers;\n\n        $headers->set(\n        \t'X-RateLimit-Limit',\n            $this->rateLimitChecker->getRateLimit()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Remaining',\n            $this->rateLimitChecker->getRateLimitRemaining()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Reset',\n            $this->rateLimitChecker->getRateLimitReset()\n        );\n    }   \n}\n```\n\nNow we need to register the listener as a tagged service:\n\n```yaml\n#services.yml\nrate_limit_listener:\n    class: RateLimitHeadersListener\n    arguments: [\"@rate_limit_checker\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nThat's it. Really straightforward, isn't it?\nShould be clear now that, by using this event based approach, we don't have to touch the logic of every single controller.\n\nTake a small break and get ready to jump to another example.\n\n### Example 2. Create a cookie to track referrals\n\nWell, now imagine that we have to build an affiliate program based on referral links ([I did it](https://sbaam.com/affiliates?_r=9oj) lately). \n\nThe general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them.\nDoing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate.\nTo write a more formal specification we have to:\n\n  1. Allow any of our affiliates to share links with a special referral code as query parameter: `?_ref=<REF_ID>` (where `REF_ID` is the unique id of the affiliate).\n  2. Intercept visitor referred by affiliates through the referral parameter and identify the referral\n  3. Create a cookie to track the referred visitor for 30 days\n\nAgain we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a `affiliate_repository` service which implementats of the following interface:\n\n```php\ninterface AffiliateRepositoryInterface\n{\n\tpublic function findOneById($id);\n}\n```\n\nNow let's write our listener to intercept clicks on referral links:\n\n```php\nfinal class AffiliateLinkClickListener\n{\n\tprivate $affiliateRepository;\n    \n    public function __construct(\n    \tAffiliateRepositoryInterface $affiliateRepository\n    ){\n    \t$this->affiliateRepository = $affiliateRepository;\n    }\n    \n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n    \t$request = $event->getRequest();\n        $response = $event->getResponse();\n        \n        // 1.\n        if ($request->query->has('_ref')) {\n        \t$affiliateId = $request->query->get('_ref');\n            // 2.\n            if (null !== $this->affiliateRepository->findOneById($affiliateId)) {\n            \t// 3.\n                $cookie = new Cookie('_ref', $affiliateId, new \\DateTime('+30 days'));\n                $response->headers->setCookie($cookie);\n            }\n        }\n    }\n}\n```\n\nThe code is pretty simple here:\n\n  1. We check if there's a `_ref` parameter in the current request\n  2. If so we check if we have an affiliate with the id found in the `_ref` parameter\n  3. If that's the case we create a cookie that will allow us to keep track of the referral for 30 days.\n  \nObviously don't forget to register the listener as a tagged service:\n\n```yaml\n#services.yml\naffiliate_link_click_listener:\n    class: AffiliateLinkClickListener\n    arguments: [\"@affiliate_repository\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nAs I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.\n\n## Conclusion\n\nAs in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.\n\nLet me know what you think with a comment ([comments](#disqus_thread)) and feel free to suggest other real-life use cases for the Kernel Response Event.\n\nThanks!\n\nPS: Huge thanks to [@AxelLessio](http://twitter.com/AxelLessio) and [@JavierEguiluz](http://twitter.com/javiereguiluz) for taking the time to review my very bad english ;)","html":"<p>One of the things I like most of the Symfony framework is its <a href=\"https://packagist.org/packages/symfony/http-kernel\">Http Kernel component</a>. Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener\">events</a>.</p>\n\n<p><a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html\"><img src=\"/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png\" alt=\"Symfony Http Kernel component overview\" title=\"\" /></a></p>\n\n<p>This approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).</p>\n\n<h2 id=\"thekernelresponseevent\">The Kernel Response event</h2>\n\n<p>One event that I’ve been using a lot lately is the  <a href=\"http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html\">Kernel Response event</a> which allows you to edit the response after it has been generated.</p>\n\n<p>Thanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.</p>\n\n<p>I will present two different real case scenarios to show how useful (and simple) it is.</p>\n\n<h3 id=\"example1addcustomhttpheaderstonotifyremainingapicalls\">Example 1. Add custom Http headers to notify remaining api calls</h3>\n\n<p>Let's suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API. <br />\nIt seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: <code>X-RateLimit-Limit</code> (maximum number of requests per period), <code>X-RateLimit-Remaining</code> (remaining requests in the current period) and <code>X-RateLimit-Reset</code> (the timestamp on which the current period ends).</p>\n\n<p>As I don't want to implement a fully working solution here let's assume we have already written a rate limit checker service registered as <code>rate_limit_checker</code> that implements the following interface:</p>\n\n<pre><code class=\"language-php\">interface RateLimitCheckerInterface  \n{\n    public function getRateLimit();\n\n    public function getRateLimitRemaining();\n\n    public function getRateLimitReset();\n}\n</code></pre>\n\n<p>Let's now write our <code>RateLimitHeadersListener</code>:</p>\n\n<pre><code class=\"language-php\">use Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nfinal class RateLimitHeadersListener  \n{\n    private $rateLimitChecker;\n\n    public function __construct(\n        RateLimitCheckerInterface $rateLimitChecker\n    ){\n        $this-&gt;rateLimitChecker = $rateLimitChecker;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {   \n        $headers = $event-&gt;getResponse()-&gt;headers;\n\n        $headers-&gt;set(\n            'X-RateLimit-Limit',\n            $this-&gt;rateLimitChecker-&gt;getRateLimit()\n        );\n\n        $headers-&gt;set(\n            'X-RateLimit-Remaining',\n            $this-&gt;rateLimitChecker-&gt;getRateLimitRemaining()\n        );\n\n        $headers-&gt;set(\n            'X-RateLimit-Reset',\n            $this-&gt;rateLimitChecker-&gt;getRateLimitReset()\n        );\n    }   \n}\n</code></pre>\n\n<p>Now we need to register the listener as a tagged service:</p>\n\n<pre><code class=\"language-yaml\">#services.yml\nrate_limit_listener:  \n    class: RateLimitHeadersListener\n    arguments: [\"@rate_limit_checker\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n</code></pre>\n\n<p>That's it. Really straightforward, isn't it? <br />\nShould be clear now that, by using this event based approach, we don't have to touch the logic of every single controller.</p>\n\n<p>Take a small break and get ready to jump to another example.</p>\n\n<h3 id=\"example2createacookietotrackreferrals\">Example 2. Create a cookie to track referrals</h3>\n\n<p>Well, now imagine that we have to build an affiliate program based on referral links (<a href=\"https://sbaam.com/affiliates?_r=9oj\">I did it</a> lately). </p>\n\n<p>The general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them. <br />\nDoing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate. <br />\nTo write a more formal specification we have to:</p>\n\n<ol>\n<li>Allow any of our affiliates to share links with a special referral code as query parameter: <code>?_ref=&lt;REF_ID&gt;</code> (where <code>REF_ID</code> is the unique id of the affiliate).</li>\n<li>Intercept visitor referred by affiliates through the referral parameter and identify the referral</li>\n<li>Create a cookie to track the referred visitor for 30 days</li>\n</ol>\n\n<p>Again we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a <code>affiliate_repository</code> service which implementats of the following interface:</p>\n\n<pre><code class=\"language-php\">interface AffiliateRepositoryInterface  \n{\n    public function findOneById($id);\n}\n</code></pre>\n\n<p>Now let's write our listener to intercept clicks on referral links:</p>\n\n<pre><code class=\"language-php\">final class AffiliateLinkClickListener  \n{\n    private $affiliateRepository;\n\n    public function __construct(\n        AffiliateRepositoryInterface $affiliateRepository\n    ){\n        $this-&gt;affiliateRepository = $affiliateRepository;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        $request = $event-&gt;getRequest();\n        $response = $event-&gt;getResponse();\n\n        // 1.\n        if ($request-&gt;query-&gt;has('_ref')) {\n            $affiliateId = $request-&gt;query-&gt;get('_ref');\n            // 2.\n            if (null !== $this-&gt;affiliateRepository-&gt;findOneById($affiliateId)) {\n                // 3.\n                $cookie = new Cookie('_ref', $affiliateId, new \\DateTime('+30 days'));\n                $response-&gt;headers-&gt;setCookie($cookie);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code is pretty simple here:</p>\n\n<ol>\n<li>We check if there's a <code>_ref</code> parameter in the current request</li>\n<li>If so we check if we have an affiliate with the id found in the <code>_ref</code> parameter</li>\n<li>If that's the case we create a cookie that will allow us to keep track of the referral for 30 days.</li>\n</ol>\n\n<p>Obviously don't forget to register the listener as a tagged service:</p>\n\n<pre><code class=\"language-yaml\">#services.yml\naffiliate_link_click_listener:  \n    class: AffiliateLinkClickListener\n    arguments: [\"@affiliate_repository\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n</code></pre>\n\n<p>As I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>As in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.</p>\n\n<p>Let me know what you think with a comment (<a href=\"#disqus_thread\">comments</a>) and feel free to suggest other real-life use cases for the Kernel Response Event.</p>\n\n<p>Thanks!</p>\n\n<p>PS: Huge thanks to <a href=\"http://twitter.com/AxelLessio\">@AxelLessio</a> and <a href=\"http://twitter.com/javiereguiluz\">@JavierEguiluz</a> for taking the time to review my very bad english ;)</p>","image":"/content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":null,"author_id":1,"created_at":"2015-02-21T01:09:11.000Z","created_by":1,"updated_at":"2015-03-02T23:19:32.000Z","updated_by":1,"published_at":"2015-02-21T01:12:00.000Z","published_by":1},{"id":15,"uuid":"b7e233ac-3bda-4529-88c5-1fff08b629a1","title":"6 Rules of thumb to build blazing fast web server applications","slug":"6-rules-of-thumb-to-build-blazing-fast-web-applications","markdown":"In this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.\n\nYou can read this article in **Japanese** on [POSTD: 高速なWebサーバアプリケーションを構築するための6つの経験則](http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/)\n\n**TLDR;** the basic rules are:\n\n- [Rule 1](#rule-1). Avoid premature optimization\n- [Rule 2](#rule-2). Do the minimum amount of work to solve the problem\n- [Rule 3](#rule-3). Defer the work you don't need to do immediately\n- [Rule 4](#rule-4). Use cache when you can\n- [Rule 5](#rule-5). Understand and avoid the N+1 query problem with relational databases\n- [Rule 6](#rule-6). Prepare your app for horizontal scalability when possible\n\n![Your code should be fast as Flash Gordon](/content/images/2015/07/flash-gordon-fast-code.png)\n\n<a id=\"rule-1\"></a>\n\n## Rule 1: Avoid premature optimization\n\nOne of the most famous [Donald Knuth](http://www-cs-faculty.stanford.edu/~uno/)'s quotes says: \n\n> \"premature optimization is the root of all evil\" \n\nKnuth's noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don't really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like \"_are double quoted strings slower than single quoted ones?_\"\n\nTo avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a **profiler** to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.\n\n**Note**: I want to make it clear that Knuth's quote doesn't mean that you don't have to care about optimization at all and it's not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to \"optimize smartly\" and that's the way you should read it as well.\n\nIf you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:\n\n- **[xdebug](http://xdebug.org/)**: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it's easily integrable in most of the IDEs.\n- **[xhprof](https://github.com/phacility/xhprof)**: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.\n- **[Symfony profiler](https://symfony.com/doc/current/cookbook/profiler/index.html)**: The Symfony profiler it's a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in \"development\" mode and does not need any PHP extension to be installed.\n- **[The Stopwatch component](https://symfony.com/doc/current/components/stopwatch.html)**: It's the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.\n- **[Blackfire.io](https://blackfire.io/)**: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.\n- **[Tideways](https://tideways.io/)**: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It's meant to be run continuously (also in production).\n\nIf you want to know more on this specific topic you can have a read at the following articles and papers:\n\n- [On optimization in PHP](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html) by Anthony Ferrara\n- [The fallacy of premature optimization](http://ubiquity.acm.org/article.cfm?id=1513451) by Randall Hyde\n- [Premature optimization](http://www.c2.com/cgi/wiki?PrematureOptimization) by Cunningham & Cunningham, Inc\n\n\n<a id=\"rule-2\"></a>\n\n\n## Rule 2: Do just what you need to\n\n![Joker meme I Just Do Things](/content/images/2015/07/i-just-do-things-joker-meme.gif)\n\nVery often your code does more things than it's required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you'll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.\n\nThere are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.\n\n- **Autoloading**: it's a [PHP feature](http://php.net/manual/en/language.oop5.autoload.php) that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the [PSR-0](http://www.php-fig.org/psr/psr-0/) and [PSR-4](http://www.php-fig.org/psr/psr-4/) standards and tools like _Composer_ it is a piece of cake to use autoloading.\n- **Dependency Injection**: it's a very common [design pattern](https://en.wikipedia.org/wiki/Dependency_injection) in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.\n- **Lazy Loading**: another important [design pattern](https://en.wikipedia.org/wiki/Lazy_loading) used to defer initialization of an object until the point at which it is needed. It's mostly used with objects that deals with heavy resources like database connections or file based data sources.\n\n\n<a id=\"rule-3\"></a>\n\n## Rule 3: Mama, I'll do it tomorrow!\n\n![Tomorrow definition mystical land for human productivity](/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg)\n\nHow many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it's quite common to do these \"heavy\" operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred.\nThe most common way to do that is to use [job queues](https://en.wikipedia.org/wiki/Job_queue), which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).\n\nA simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:\n\n  - [Resque](https://github.com/chrisboulton/php-resque): A PHP queue library that uses Redis as data store. \n  - [Laravel Queues](http://laravel.com/docs/5.1/queues): the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.\n  - [Gearman](http://gearman.org/): A generic job server that supports the wide majority of languages (PHP among the others).\n  - [Beanstalkd](http://kr.github.io/beanstalkd/): Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)\n\n\n<a id=\"rule-4\"></a>\n\n\n## Rule 4: Gotta cache 'em all!\n\n![Comic strip about the cloud and the cache](/content/images/2015/07/cache-joke-comic-the-cloud.png)\n\nNowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page.\nUsing a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.\n\nBut there's a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter \"_the cache_\"!\n\n> Cache, which is pronounced \"cash\" (not \"catch\" or \"cashay\"), stores recently used information so that it can be quickly accessed at a later time.\n\nCache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.\n\nIn general with web programming we can focus on several different **levels of cache**:\n\n- **Byte Code Cache**: it's a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to reinterpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: [APC](http://php.net/manual/en/book.apc.php), [eAccelerator](http://eaccelerator.net/), [Xcache](http://xcache.lighttpd.net/). Since PHP 5.5 we can use the [Opcache extension](http://php.net/manual/en/book.opcache.php) which has been integrated in the core.\n- **Application Cache**: to not be confused with HTML5 Application cache, is the the cache logic that regards your specific application and it's probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it's a good idea to use cache servers like [Memcached](http://memcached.org/), [Redis](http://redis.io/) or [Gibson](http://gibson-db.in/).\n- **HTTP Cache**: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn't it be useful to have ways to tell the browser to reuse content that he already downloaded?\nWell, you can do that by using **HTTP Cache headers** like `Etag` and `Cache-control`. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn't get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.\n- **Proxy Cache**: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called **Reverse proxy**). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it's generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn't change too frequently. Famous proxy servers are [Varnish](https://www.varnish-cache.org/), [Nginx](http://nginx.org/) and [Squid](http://www.squid-cache.org/). Also [Apache](http://httpd.apache.org/) can be configured to act as a reverse proxy.\n \nAnyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it's requested. This process is called \"_cache invalidation_\" and it generally makes developers insane to the point that a very famous quote exists:\n\n> There are only two hard things in Computer Science: **cache invalidation** and naming things.\n>\n> — Phil Karlton\n\nIf you have been into software development for a while I'm quite sure that you already had chance to read it!\n\nThere's no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!\n\nHere follows some articles that might be interesting to know more about caching for web applications:\n\n- [Web application caching](http://docforge.com/wiki/Web_application/Caching) by DocForge\n- [Fine tune your Opcache configuration to avoid caching surprises](https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises) by Tideways blog\n- [Beginners guide to HTTP cache headers](http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/) by Mobify\n- [HTTP Caching, optimizing content efficiency](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching) by Google\n- [Using Http headers with Symfony](http://symfony.com/it/doc/current/book/http_cache.html) by Symfony\n- [What is a reverse proxy server](https://www.nginx.com/resources/glossary/reverse-proxy-server/) by Nginx\n- [Laravel cache](http://laravel.com/docs/5.1/cache) by Laravel\n\n\n<a id=\"rule-5\"></a>\n\n## Rule 5: Avoid the damn N+1 Query Problem\n\nThe \"_N+1 Query Problem_\" is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well... almost real) example:\n\n```php\n<?php\n\nfunction getUsers() {\n  //... retrieve the users from the database (1 query)\n  return $users;\n}\n\nfunction loadLastLoginsForUsers($users) {\n  foreach ($users as $user) {\n    $lastLogins = ... // load the last logins for the user (1 query, executed n times)\n    $user->setLastLogins($lastLogins);\n  }\n\n  return $users;\n}\n\n$users = getUsers();\nloadLastLoginsForUsers($users);\n```\n\nThe given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id = 1;\nSELECT * FROM Logins WHERE user_id = 2;\nSELECT * FROM Logins WHERE user_id = 3;\nSELECT * FROM Logins WHERE user_id = 4;\nSELECT * FROM Logins WHERE user_id = 5;\nSELECT * FROM Logins WHERE user_id = 6;\n-- ...\n```\n\nThat's obviously inefficient and it happens quite often with \"has many\" relationships in databases, especially when you are using some kind of magic ORM and you don't exactly know what it is doing out of the box (and probably you haven't configured it properly).\n\nIn general you can solve this problem by producing a query like the following:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id IN (1, 2, 3, 4, 5, 6, ...);\n```\n\nor by using the `JOIN` syntax where possible.\n\nThis problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don't fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.\n\nOn a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.\n\nDon't expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:\n\n- [Performance: N+1 Query Problem](https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/) by Phabricator\n- [Nested Loops](http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem) by Use the Index, Luke\n- [Laravel's Eloquent ORM Eager Loading](http://laravel.com/docs/5.0/eloquent#eager-loading) by Laravel\n- Book [Solving The N+1 Problem In PHP](https://leanpub.com/sn1php) by Paul M. Jones\n\n\n<a id=\"rule-6\"></a>\n\n## Rule 6: Scale... horizontally!\n\n![Horizontal scalability is hard](/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png)\n\n\"Scalability\" is not exactly the same thing of \"performance\", but the two things are tightly intertwined.\nTo give you my personal definition, \"scalability\" is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.\n\nIt's a very complex and broad topic and I don't want to get into the details here. But for the sake of performance it's worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.\n\nThe two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.\n\n- **Sessions**: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it's not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.\n- **User files consistency**: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like [Amazon S3](http://aws.amazon.com/s3/) or [Rackspace Cloudfiles](http://www.rackspace.com/cloud/files)). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use [NFS](https://en.wikipedia.org/wiki/Network_File_System) or [GlusterFS](http://www.gluster.org/) to create a shared filesystem.\n\nHere's a list of other interesting resources to know more about scalable web applications:\n\n- [Horizontally scalable web applications](http://inviqa.com/blog/horizontally-scalable-web-applications/) by Inviqa\n- [Horizontally Scaling PHP Applications: A Practical Overview](https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/) by Digital Ocean\n- [Best Practices For Horizontal Application Scaling](https://blog.openshift.com/best-practices-for-horizontal-application-scaling/) by OpenShift\n- [Scalable Web Architecture and Distributed Systems](http://www.aosabook.org/en/distsys.html) by Kate Matsudaira\n- [Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example](http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html) by HighScalability\n- Book [The art of scalability](http://theartofscalability.com/) by Martin Abbot and Michael Fisher\n- Slides [7 Stages of scaling web applications](http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications) by Rackspace\n\n\n## Conclusions\n\nI really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don't fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.\n\nIn case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.\n\nI hope some great discussion will start from the comments here.\n\nThanks for taking your time to read this post.\n\nUntil next time!","html":"<p>In this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.</p>\n\n<p>You can read this article in <strong>Japanese</strong> on <a href=\"http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/\">POSTD: 高速なWebサーバアプリケーションを構築するための6つの経験則</a></p>\n\n<p><strong>TLDR;</strong> the basic rules are:</p>\n\n<ul>\n<li><a href=\"#rule-1\">Rule 1</a>. Avoid premature optimization</li>\n<li><a href=\"#rule-2\">Rule 2</a>. Do the minimum amount of work to solve the problem</li>\n<li><a href=\"#rule-3\">Rule 3</a>. Defer the work you don't need to do immediately</li>\n<li><a href=\"#rule-4\">Rule 4</a>. Use cache when you can</li>\n<li><a href=\"#rule-5\">Rule 5</a>. Understand and avoid the N+1 query problem with relational databases</li>\n<li><a href=\"#rule-6\">Rule 6</a>. Prepare your app for horizontal scalability when possible</li>\n</ul>\n\n<p><img src=\"/content/images/2015/07/flash-gordon-fast-code.png\" alt=\"Your code should be fast as Flash Gordon\" /></p>\n\n<p><a id=\"rule-1\"></a></p>\n\n<h2 id=\"rule1avoidprematureoptimization\">Rule 1: Avoid premature optimization</h2>\n\n<p>One of the most famous <a href=\"http://www-cs-faculty.stanford.edu/~uno/\">Donald Knuth</a>'s quotes says: </p>\n\n<blockquote>\n  <p>\"premature optimization is the root of all evil\" </p>\n</blockquote>\n\n<p>Knuth's noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don't really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like \"<em>are double quoted strings slower than single quoted ones?</em>\"</p>\n\n<p>To avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a <strong>profiler</strong> to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.</p>\n\n<p><strong>Note</strong>: I want to make it clear that Knuth's quote doesn't mean that you don't have to care about optimization at all and it's not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to \"optimize smartly\" and that's the way you should read it as well.</p>\n\n<p>If you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:</p>\n\n<ul>\n<li><strong><a href=\"http://xdebug.org/\">xdebug</a></strong>: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it's easily integrable in most of the IDEs.</li>\n<li><strong><a href=\"https://github.com/phacility/xhprof\">xhprof</a></strong>: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/cookbook/profiler/index.html\">Symfony profiler</a></strong>: The Symfony profiler it's a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in \"development\" mode and does not need any PHP extension to be installed.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/components/stopwatch.html\">The Stopwatch component</a></strong>: It's the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.</li>\n<li><strong><a href=\"https://blackfire.io/\">Blackfire.io</a></strong>: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.</li>\n<li><strong><a href=\"https://tideways.io/\">Tideways</a></strong>: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It's meant to be run continuously (also in production).</li>\n</ul>\n\n<p>If you want to know more on this specific topic you can have a read at the following articles and papers:</p>\n\n<ul>\n<li><a href=\"http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html\">On optimization in PHP</a> by Anthony Ferrara</li>\n<li><a href=\"http://ubiquity.acm.org/article.cfm?id=1513451\">The fallacy of premature optimization</a> by Randall Hyde</li>\n<li><a href=\"http://www.c2.com/cgi/wiki?PrematureOptimization\">Premature optimization</a> by Cunningham &amp; Cunningham, Inc</li>\n</ul>\n\n<p><a id=\"rule-2\"></a></p>\n\n<h2 id=\"rule2dojustwhatyouneedto\">Rule 2: Do just what you need to</h2>\n\n<p><img src=\"/content/images/2015/07/i-just-do-things-joker-meme.gif\" alt=\"Joker meme I Just Do Things\" /></p>\n\n<p>Very often your code does more things than it's required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you'll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.</p>\n\n<p>There are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.</p>\n\n<ul>\n<li><strong>Autoloading</strong>: it's a <a href=\"http://php.net/manual/en/language.oop5.autoload.php\">PHP feature</a> that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the <a href=\"http://www.php-fig.org/psr/psr-0/\">PSR-0</a> and <a href=\"http://www.php-fig.org/psr/psr-4/\">PSR-4</a> standards and tools like <em>Composer</em> it is a piece of cake to use autoloading.</li>\n<li><strong>Dependency Injection</strong>: it's a very common <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\">design pattern</a> in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.</li>\n<li><strong>Lazy Loading</strong>: another important <a href=\"https://en.wikipedia.org/wiki/Lazy_loading\">design pattern</a> used to defer initialization of an object until the point at which it is needed. It's mostly used with objects that deals with heavy resources like database connections or file based data sources.</li>\n</ul>\n\n<p><a id=\"rule-3\"></a></p>\n\n<h2 id=\"rule3mamailldoittomorrow\">Rule 3: Mama, I'll do it tomorrow!</h2>\n\n<p><img src=\"/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg\" alt=\"Tomorrow definition mystical land for human productivity\" /></p>\n\n<p>How many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it's quite common to do these \"heavy\" operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred. <br />\nThe most common way to do that is to use <a href=\"https://en.wikipedia.org/wiki/Job_queue\">job queues</a>, which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).</p>\n\n<p>A simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:</p>\n\n<ul>\n<li><a href=\"https://github.com/chrisboulton/php-resque\">Resque</a>: A PHP queue library that uses Redis as data store. </li>\n<li><a href=\"http://laravel.com/docs/5.1/queues\">Laravel Queues</a>: the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.</li>\n<li><a href=\"http://gearman.org/\">Gearman</a>: A generic job server that supports the wide majority of languages (PHP among the others).</li>\n<li><a href=\"http://kr.github.io/beanstalkd/\">Beanstalkd</a>: Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)</li>\n</ul>\n\n<p><a id=\"rule-4\"></a></p>\n\n<h2 id=\"rule4gottacacheemall\">Rule 4: Gotta cache 'em all!</h2>\n\n<p><img src=\"/content/images/2015/07/cache-joke-comic-the-cloud.png\" alt=\"Comic strip about the cloud and the cache\" /></p>\n\n<p>Nowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page. <br />\nUsing a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.</p>\n\n<p>But there's a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter \"<em>the cache</em>\"!</p>\n\n<blockquote>\n  <p>Cache, which is pronounced \"cash\" (not \"catch\" or \"cashay\"), stores recently used information so that it can be quickly accessed at a later time.</p>\n</blockquote>\n\n<p>Cache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.</p>\n\n<p>In general with web programming we can focus on several different <strong>levels of cache</strong>:</p>\n\n<ul>\n<li><strong>Byte Code Cache</strong>: it's a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to reinterpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: <a href=\"http://php.net/manual/en/book.apc.php\">APC</a>, <a href=\"http://eaccelerator.net/\">eAccelerator</a>, <a href=\"http://xcache.lighttpd.net/\">Xcache</a>. Since PHP 5.5 we can use the <a href=\"http://php.net/manual/en/book.opcache.php\">Opcache extension</a> which has been integrated in the core.</li>\n<li><strong>Application Cache</strong>: to not be confused with HTML5 Application cache, is the the cache logic that regards your specific application and it's probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it's a good idea to use cache servers like <a href=\"http://memcached.org/\">Memcached</a>, <a href=\"http://redis.io/\">Redis</a> or <a href=\"http://gibson-db.in/\">Gibson</a>.</li>\n<li><strong>HTTP Cache</strong>: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn't it be useful to have ways to tell the browser to reuse content that he already downloaded?\nWell, you can do that by using <strong>HTTP Cache headers</strong> like <code>Etag</code> and <code>Cache-control</code>. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn't get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.  </li>\n<li><strong>Proxy Cache</strong>: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called <strong>Reverse proxy</strong>). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it's generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn't change too frequently. Famous proxy servers are <a href=\"https://www.varnish-cache.org/\">Varnish</a>, <a href=\"http://nginx.org/\">Nginx</a> and <a href=\"http://www.squid-cache.org/\">Squid</a>. Also <a href=\"http://httpd.apache.org/\">Apache</a> can be configured to act as a reverse proxy.</li>\n</ul>\n\n<p>Anyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it's requested. This process is called \"<em>cache invalidation</em>\" and it generally makes developers insane to the point that a very famous quote exists:</p>\n\n<blockquote>\n  <p>There are only two hard things in Computer Science: <strong>cache invalidation</strong> and naming things.</p>\n  \n  <p>— Phil Karlton</p>\n</blockquote>\n\n<p>If you have been into software development for a while I'm quite sure that you already had chance to read it!</p>\n\n<p>There's no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!</p>\n\n<p>Here follows some articles that might be interesting to know more about caching for web applications:</p>\n\n<ul>\n<li><a href=\"http://docforge.com/wiki/Web_application/Caching\">Web application caching</a> by DocForge</li>\n<li><a href=\"https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises\">Fine tune your Opcache configuration to avoid caching surprises</a> by Tideways blog</li>\n<li><a href=\"http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/\">Beginners guide to HTTP cache headers</a> by Mobify</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\">HTTP Caching, optimizing content efficiency</a> by Google</li>\n<li><a href=\"http://symfony.com/it/doc/current/book/http_cache.html\">Using Http headers with Symfony</a> by Symfony</li>\n<li><a href=\"https://www.nginx.com/resources/glossary/reverse-proxy-server/\">What is a reverse proxy server</a> by Nginx</li>\n<li><a href=\"http://laravel.com/docs/5.1/cache\">Laravel cache</a> by Laravel</li>\n</ul>\n\n<p><a id=\"rule-5\"></a></p>\n\n<h2 id=\"rule5avoidthedamnn1queryproblem\">Rule 5: Avoid the damn N+1 Query Problem</h2>\n\n<p>The \"<em>N+1 Query Problem</em>\" is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well... almost real) example:</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\nfunction getUsers() {  \n  //... retrieve the users from the database (1 query)\n  return $users;\n}\n\nfunction loadLastLoginsForUsers($users) {  \n  foreach ($users as $user) {\n    $lastLogins = ... // load the last logins for the user (1 query, executed n times)\n    $user-&gt;setLastLogins($lastLogins);\n  }\n\n  return $users;\n}\n\n$users = getUsers();\nloadLastLoginsForUsers($users);  \n</code></pre>\n\n<p>The given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:</p>\n\n<pre><code class=\"language-sql\">SELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...  \nSELECT * FROM Logins WHERE user_id = 1;  \nSELECT * FROM Logins WHERE user_id = 2;  \nSELECT * FROM Logins WHERE user_id = 3;  \nSELECT * FROM Logins WHERE user_id = 4;  \nSELECT * FROM Logins WHERE user_id = 5;  \nSELECT * FROM Logins WHERE user_id = 6;  \n-- ...\n</code></pre>\n\n<p>That's obviously inefficient and it happens quite often with \"has many\" relationships in databases, especially when you are using some kind of magic ORM and you don't exactly know what it is doing out of the box (and probably you haven't configured it properly).</p>\n\n<p>In general you can solve this problem by producing a query like the following:</p>\n\n<pre><code class=\"language-sql\">SELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...  \nSELECT * FROM Logins WHERE user_id IN (1, 2, 3, 4, 5, 6, ...);  \n</code></pre>\n\n<p>or by using the <code>JOIN</code> syntax where possible.</p>\n\n<p>This problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don't fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.</p>\n\n<p>On a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.</p>\n\n<p>Don't expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:</p>\n\n<ul>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/\">Performance: N+1 Query Problem</a> by Phabricator</li>\n<li><a href=\"http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem\">Nested Loops</a> by Use the Index, Luke</li>\n<li><a href=\"http://laravel.com/docs/5.0/eloquent#eager-loading\">Laravel's Eloquent ORM Eager Loading</a> by Laravel</li>\n<li>Book <a href=\"https://leanpub.com/sn1php\">Solving The N+1 Problem In PHP</a> by Paul M. Jones</li>\n</ul>\n\n<p><a id=\"rule-6\"></a></p>\n\n<h2 id=\"rule6scalehorizontally\">Rule 6: Scale... horizontally!</h2>\n\n<p><img src=\"/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png\" alt=\"Horizontal scalability is hard\" /></p>\n\n<p>\"Scalability\" is not exactly the same thing of \"performance\", but the two things are tightly intertwined.\nTo give you my personal definition, \"scalability\" is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.</p>\n\n<p>It's a very complex and broad topic and I don't want to get into the details here. But for the sake of performance it's worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.</p>\n\n<p>The two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.</p>\n\n<ul>\n<li><strong>Sessions</strong>: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it's not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.</li>\n<li><strong>User files consistency</strong>: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a> or <a href=\"http://www.rackspace.com/cloud/files\">Rackspace Cloudfiles</a>). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use <a href=\"https://en.wikipedia.org/wiki/Network_File_System\">NFS</a> or <a href=\"http://www.gluster.org/\">GlusterFS</a> to create a shared filesystem.</li>\n</ul>\n\n<p>Here's a list of other interesting resources to know more about scalable web applications:</p>\n\n<ul>\n<li><a href=\"http://inviqa.com/blog/horizontally-scalable-web-applications/\">Horizontally scalable web applications</a> by Inviqa</li>\n<li><a href=\"https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/\">Horizontally Scaling PHP Applications: A Practical Overview</a> by Digital Ocean</li>\n<li><a href=\"https://blog.openshift.com/best-practices-for-horizontal-application-scaling/\">Best Practices For Horizontal Application Scaling</a> by OpenShift</li>\n<li><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a> by Kate Matsudaira</li>\n<li><a href=\"http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html\">Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example</a> by HighScalability</li>\n<li>Book <a href=\"http://theartofscalability.com/\">The art of scalability</a> by Martin Abbot and Michael Fisher</li>\n<li>Slides <a href=\"http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications\">7 Stages of scaling web applications</a> by Rackspace</li>\n</ul>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>I really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don't fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.</p>\n\n<p>In case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.</p>\n\n<p>I hope some great discussion will start from the comments here.</p>\n\n<p>Thanks for taking your time to read this post.</p>\n\n<p>Until next time!</p>","image":"/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"6 Rules of thumb to build blazing fast web applications (server side)","meta_description":"In this post are described 6 extremely important rules you should take under consideration when writing your next web application","author_id":1,"created_at":"2015-04-16T07:37:59.000Z","created_by":1,"updated_at":"2015-08-27T15:54:51.000Z","updated_by":1,"published_at":"2015-07-25T18:57:00.000Z","published_by":1},{"id":16,"uuid":"02beb6d0-5a44-40bf-b3b8-eac6ae6b2ec0","title":"Developing a web application with Lumen and MySql","slug":"developing-a-web-application-with-lumen-and-mysql","markdown":"[Lumen](http://lumen.laravel.com/) is a new [Php](/tag/php) micro-framework developed by [Taylor Otwell](https://twitter.com/taylorotwell), the same author of the famous [Laravel](http://laravel.com/) framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.\nSo to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?\n\n## A motivational quote everyday\n\nOur app should be quite simple but I'd like also to make something useful. I am a big fan of motivational quotes, and if you [follow me on Twitter](https://twitter.com/loige) (**you should!**) you probably [already know it](https://twitter.com/loige/status/588075619377885186)!\n\nSo, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best!\nTo work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That's an importante detail!\n\n![Motivational quotes Lumen Php app screenshot](/content/images/2015/04/motivation-quote-app-screenshoot.jpg)\n\n## A new Lumen project\n\nLet's start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:\n\n```bash\ncomposer global require \"laravel/lumen-installer=~1.0\"\n```\n\n**Note**: you might need to use `sudo`, depending on the way you installed Composer.\n\nOnce we have done this we have a new toy in our shell: the `lumen` command. We can now create a new project by running:\n\n```bash\nlumen new motivational\n```\n\n**motivational** is the name of our new app. The command creates a new folder for it and downloads all the dependencies.\n\nTo see our application live we need to `cd` into our `motivational` folder and run\n\n```bash\nphp artisan serve\n```\n\nOur project will be immediately up and running on `http://localhost:8000`.\n\n\n## Define the data model\n\nWe said we want to showcase quotes and in our case a quote is made up by:\n\n  - a **text** (The quoted text itself)\n  - an **author** (The name of the author of the quote)\n  - a **background** image (Yes, to make everything fancier)\n\nIn order to manage data from the database, we need to enable [Eloquent](http://laravel.com/docs/5.0/eloquent) (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let's do it step by step.\n\n\n## Enable Eloquent\n\nTo enable Eloquent we need to edit the file `bootstrap/app.php` and remove the comment on the following lines:\n\n```php\n$app->withFacades();\n$app->withEloquent();\n```\n\nNotice that the first line enables the support for [Facades](http://laravel.com/docs/5.0/facades) (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.\n\n\n## Configure the database connection\n\nFirst of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let's create our `.env` (Dotenv) configuration file. Copy the `.env.example` file into a new `.env` file and open it in your favourite editor.\n\nHere we need to edit the following lines and provide the details needed to connect to our local mysql instance:\n\n```ini\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n```\n\nBe sure to create the database (`homestead` in this case, but you can obviously customise it).\n\nIt's also a good idea in general to change the `APP_KEY` value into some random string in case you are building a \"serious\" application.\n\nTo make Lumen load this configuration file we need, again, to edit the `bootstrap/app.php` file and uncomment the following line:\n\n```php\nDotenv::load(__DIR__.'/../');\n```\n\n\n## Create a migration\n\n[Migrations](http://laravel.com/docs/5.0/migrations) allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:\n\n```bash\nphp artisan migrate:install\n```\n\nThis command creates a special table in our database called `migrations` that will be used internally from the framework to keep track of all the available migrations and the current one used.\n\nEvery migrations is identified by a file that generally lives in the `database/migrations` folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc...). In our case we need to create a new table, the \"quotes\" table to be precise. Let's run this:\n\n```bash\nphp artisan make:migration --create=quotes create_quotes_table\n```\n\nIt creates a new file under the `database/migrations` folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the `up()` function a bit:\n\n```php\npublic function up()\n{\n    Schema::create('quotes', function(Blueprint $table)\n    {\n         $table->increments('id');\n    \t\t\t     $table->timestamps();\t\t\t\n\n         // our new fields\n    \t\t\t     $table->string('text');\n    \t\t\t     $table->string('author');\n    \t\t\t     $table->string('background');\n    });\n}\n```\n\nTo execute the migration (and effectively create the table on the database) we have to run:\n\n```bash\nphp artisan migrate\n```\n\n\n## Create the Quote model\n\nIn general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.\n\nIn our case we need to define the `Quote` model in `app/Models/Quote.php`:\n\n```php\n<?php\n\n# app/Models/Quote.php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfinal class Quote extends Model\n{\n\n}\n```\n\nYes, that's it... we don't really need to write anything else! We are extending the Eloquent `Model` class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class `Quote` to the `quotes` table that we created before.\n\n\n## Seed the database\n\nThe seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It's quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).\n\nSeeds files are stored in `database/seeds` and we need to create a new file there. We will call it `QuoteTableSeeder.php`:\n\n```php\n<?php\n\n# database/seeds/QuoteTableSeeder.php\n\nuse App\\Models\\Quote;\nuse Illuminate\\Database\\Seeder;\n\nclass QuoteTableSeeder extends Seeder\n{\n    public function run()\n    {\n        Quote::create([\n            'text' => 'Success is going from failure to failure without losing your enthusiasm',\n            'author' => 'Winston Churchill',\n            'background' => '1.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'Dream big and dare to fail',\n            'author' => 'Norman Vaughan',\n            'background' => '2.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'It does not matter how slowly you go as long as you do not stop',\n            'author' => 'Confucius',\n            'background' => '3.jpg'\n        ]);\n\n        //... add more quotes if you want!\n    }\n}\n```\n\nThe code is quite self explanatory: every call to `Quote::create` inserts a new record into the `quotes` table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the `background` field. You need to have these files into your `public/img/` folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the [Unsplash project](http://unsplash.com).\n\nTo enable this seed script we need to link it to the main `DatabaseSeeder` script by adding the following line within the `run()` method:\n\n```php\n$this->call('QuoteTableSeeder');\n```\n\nNow we just need to launch the following command to execute the seed script and populate the database:\n\n```bash\nphp artisan db:seed\n```\n\nDamn, we got a `Class QuoteTableSeeder does not exist`! That's why by default Lumen Composer file maps the `database` path with the `classmap` strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:\n\n```bash\ncomposer dump-autoload\n```\n\nNow let's run again `php artisan db:seed` and this time everything should be fine.\nIf you explore your database you will see some records within the `quotes` table.\n\n\n## The routing\n\nUntil now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.\n\nWe will have two routes:\n\n  - GET `/` - the main route, providing a new quote everyday\n  - GET `/{id}` - the route of a specific quote, mapped by id\n\nTo define the business logic associate to a route we have to edit the `app/Http/routes.php` file:\n\n```php\n<?php\n\n# app/Http/routes.php\n\nuse App\\Models\\Quote;\n\n/**\n * Display the today quote\n */\n$app->get('/', function() use ($app) {\n\n    /*\n     * Picks a different quote every day \n     * (for a maximum of 366 quotes)\n     *\n     *   - $count: the total number of available quotes\n     *   - $day: the current day of the year (from 0 to 365)\n     *   - $page: the page to look for to retrieve the \n     *            correct record\n     */\n    $count = Quote::query()->get()->count();\n    $day = (int) date('z');\n    $page = $day % $count + 1;\n\n    $quotes = Quote::query()->get()->forPage($page, 1)->all();\n\n    if (empty($quotes)) {\n        throw new \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();\n    }\n\n    return view('quote', ['quote' => $quotes[0]]);\n});\n\n/**\n * Display a specific quote\n */\n$app->get('/{id}', function($id) use ($app) {\n    $quote = Quote::query()->findOrFail($id);\n    return view('quote', ['quote' => $quote]);\n});\n```\n\nThe two `$app->get` defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.\n\nThe `view()` function allow to render a template. In this case we are rendering the  `quote` template passing the model as `quote` variable. In the next paragraph we will see how to define our template.\n\n**Note**: if you don't want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel's controllers. I will not go into the detail of this, but you can check the [Documentation](http://lumen.laravel.com/docs/controllers) that shows how to do it. It's quite simple anyway.\n\n\n## The template\n\nLumen uses the Laravel default template language, [Blade](http://lumen.laravel.com/docs/templates). Blade allows us to render complex HTML code in a easy way. All the templates live in the `resources/views` folder. Let's create the `quote.blade.php` file:\n\n```html\n<!-- resources/views/quote.blade.php -->\n\n<html>\n<head>\n    <title>Motivaitonal — Your daily source of motivation!</title>\n    <link href=\"/css/style.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href='http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed' rel='stylesheet' type='text/css'>\n</head>\n<body style=\"background-image: url('/img/{{$quote->background}}')\">\n<div class=\"container\">\n    <div class=\"quote-container\">\n        <p class=\"text\">{{$quote->text}}</p>\n        <p class=\"author\">— {{$quote->author}}</p>\n    </div>\n</div>\n</body>\n</html>\n```\n\nAs you can see we can use the double curly braces syntax to reference variable values.\n\nTo finish we just need to create our `public/css/style.css` stylesheet file:\n\n```css\nhtml, body {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    background-size: cover;\n}\n\n.container {\n    height: 100%;\n    background: rgba(0,0,0,.3);\n}\n\n.quote-container {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    padding: 2em 4em;\n}\n\n.quote-container p {\n    text-align: center;\n    color: #fff;\n    text-shadow: 1px 1px 1px rgba(150, 150, 150, 0.8);\n}\n\n.quote-container p.text {\n    font-family: 'Alegreya', serif;\n    font-size: 4em;\n}\n\n.quote-container p.author {\n    font-family: 'Roboto Condensed', sans-serif;\n    font-size: 1.2em;\n}\n```\n\nThat's it, now your app is up and running. Isn't it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)\n\n\n## Conclusions\n\nLumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the [cache layer](http://lumen.laravel.com/docs/cache) and the [job queue library](http://lumen.laravel.com/docs/queues).\nHave you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of [Php](/tag/php) framework available out there? I'm really curious to know what you think about it, let me know it in the comments!\n\nBest regards and have a very motivated day ;)","html":"<p><a href=\"http://lumen.laravel.com/\">Lumen</a> is a new <a href=\"/tag/php\">Php</a> micro-framework developed by <a href=\"https://twitter.com/taylorotwell\">Taylor Otwell</a>, the same author of the famous <a href=\"http://laravel.com/\">Laravel</a> framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.\nSo to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?</p>\n\n<h2 id=\"amotivationalquoteeveryday\">A motivational quote everyday</h2>\n\n<p>Our app should be quite simple but I'd like also to make something useful. I am a big fan of motivational quotes, and if you <a href=\"https://twitter.com/loige\">follow me on Twitter</a> (<strong>you should!</strong>) you probably <a href=\"https://twitter.com/loige/status/588075619377885186\">already know it</a>!</p>\n\n<p>So, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best! <br />\nTo work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That's an importante detail!</p>\n\n<p><img src=\"/content/images/2015/04/motivation-quote-app-screenshoot.jpg\" alt=\"Motivational quotes Lumen Php app screenshot\" /></p>\n\n<h2 id=\"anewlumenproject\">A new Lumen project</h2>\n\n<p>Let's start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:</p>\n\n<pre><code class=\"language-bash\">composer global require \"laravel/lumen-installer=~1.0\"  \n</code></pre>\n\n<p><strong>Note</strong>: you might need to use <code>sudo</code>, depending on the way you installed Composer.</p>\n\n<p>Once we have done this we have a new toy in our shell: the <code>lumen</code> command. We can now create a new project by running:</p>\n\n<pre><code class=\"language-bash\">lumen new motivational  \n</code></pre>\n\n<p><strong>motivational</strong> is the name of our new app. The command creates a new folder for it and downloads all the dependencies.</p>\n\n<p>To see our application live we need to <code>cd</code> into our <code>motivational</code> folder and run</p>\n\n<pre><code class=\"language-bash\">php artisan serve  \n</code></pre>\n\n<p>Our project will be immediately up and running on <code>http://localhost:8000</code>.</p>\n\n<h2 id=\"definethedatamodel\">Define the data model</h2>\n\n<p>We said we want to showcase quotes and in our case a quote is made up by:</p>\n\n<ul>\n<li>a <strong>text</strong> (The quoted text itself)</li>\n<li>an <strong>author</strong> (The name of the author of the quote)</li>\n<li>a <strong>background</strong> image (Yes, to make everything fancier)</li>\n</ul>\n\n<p>In order to manage data from the database, we need to enable <a href=\"http://laravel.com/docs/5.0/eloquent\">Eloquent</a> (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let's do it step by step.</p>\n\n<h2 id=\"enableeloquent\">Enable Eloquent</h2>\n\n<p>To enable Eloquent we need to edit the file <code>bootstrap/app.php</code> and remove the comment on the following lines:</p>\n\n<pre><code class=\"language-php\">$app-&gt;withFacades();\n$app-&gt;withEloquent();\n</code></pre>\n\n<p>Notice that the first line enables the support for <a href=\"http://laravel.com/docs/5.0/facades\">Facades</a> (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.</p>\n\n<h2 id=\"configurethedatabaseconnection\">Configure the database connection</h2>\n\n<p>First of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let's create our <code>.env</code> (Dotenv) configuration file. Copy the <code>.env.example</code> file into a new <code>.env</code> file and open it in your favourite editor.</p>\n\n<p>Here we need to edit the following lines and provide the details needed to connect to our local mysql instance:</p>\n\n<pre><code class=\"language-ini\">DB_CONNECTION=mysql  \nDB_HOST=localhost  \nDB_DATABASE=homestead  \nDB_USERNAME=homestead  \nDB_PASSWORD=secret  \n</code></pre>\n\n<p>Be sure to create the database (<code>homestead</code> in this case, but you can obviously customise it).</p>\n\n<p>It's also a good idea in general to change the <code>APP_KEY</code> value into some random string in case you are building a \"serious\" application.</p>\n\n<p>To make Lumen load this configuration file we need, again, to edit the <code>bootstrap/app.php</code> file and uncomment the following line:</p>\n\n<pre><code class=\"language-php\">Dotenv::load(__DIR__.'/../');  \n</code></pre>\n\n<h2 id=\"createamigration\">Create a migration</h2>\n\n<p><a href=\"http://laravel.com/docs/5.0/migrations\">Migrations</a> allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:</p>\n\n<pre><code class=\"language-bash\">php artisan migrate:install  \n</code></pre>\n\n<p>This command creates a special table in our database called <code>migrations</code> that will be used internally from the framework to keep track of all the available migrations and the current one used.</p>\n\n<p>Every migrations is identified by a file that generally lives in the <code>database/migrations</code> folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc...). In our case we need to create a new table, the \"quotes\" table to be precise. Let's run this:</p>\n\n<pre><code class=\"language-bash\">php artisan make:migration --create=quotes create_quotes_table  \n</code></pre>\n\n<p>It creates a new file under the <code>database/migrations</code> folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the <code>up()</code> function a bit:</p>\n\n<pre><code class=\"language-php\">public function up()  \n{\n    Schema::create('quotes', function(Blueprint $table)\n    {\n         $table-&gt;increments('id');\n                     $table-&gt;timestamps();         \n\n         // our new fields\n                     $table-&gt;string('text');\n                     $table-&gt;string('author');\n                     $table-&gt;string('background');\n    });\n}\n</code></pre>\n\n<p>To execute the migration (and effectively create the table on the database) we have to run:</p>\n\n<pre><code class=\"language-bash\">php artisan migrate  \n</code></pre>\n\n<h2 id=\"createthequotemodel\">Create the Quote model</h2>\n\n<p>In general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.</p>\n\n<p>In our case we need to define the <code>Quote</code> model in <code>app/Models/Quote.php</code>:</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n# app/Models/Quote.php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfinal class Quote extends Model  \n{\n\n}\n</code></pre>\n\n<p>Yes, that's it... we don't really need to write anything else! We are extending the Eloquent <code>Model</code> class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class <code>Quote</code> to the <code>quotes</code> table that we created before.</p>\n\n<h2 id=\"seedthedatabase\">Seed the database</h2>\n\n<p>The seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It's quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).</p>\n\n<p>Seeds files are stored in <code>database/seeds</code> and we need to create a new file there. We will call it <code>QuoteTableSeeder.php</code>:</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n# database/seeds/QuoteTableSeeder.php\n\nuse App\\Models\\Quote;  \nuse Illuminate\\Database\\Seeder;\n\nclass QuoteTableSeeder extends Seeder  \n{\n    public function run()\n    {\n        Quote::create([\n            'text' =&gt; 'Success is going from failure to failure without losing your enthusiasm',\n            'author' =&gt; 'Winston Churchill',\n            'background' =&gt; '1.jpg'\n        ]);\n\n        Quote::create([\n            'text' =&gt; 'Dream big and dare to fail',\n            'author' =&gt; 'Norman Vaughan',\n            'background' =&gt; '2.jpg'\n        ]);\n\n        Quote::create([\n            'text' =&gt; 'It does not matter how slowly you go as long as you do not stop',\n            'author' =&gt; 'Confucius',\n            'background' =&gt; '3.jpg'\n        ]);\n\n        //... add more quotes if you want!\n    }\n}\n</code></pre>\n\n<p>The code is quite self explanatory: every call to <code>Quote::create</code> inserts a new record into the <code>quotes</code> table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the <code>background</code> field. You need to have these files into your <code>public/img/</code> folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the <a href=\"http://unsplash.com\">Unsplash project</a>.</p>\n\n<p>To enable this seed script we need to link it to the main <code>DatabaseSeeder</code> script by adding the following line within the <code>run()</code> method:</p>\n\n<pre><code class=\"language-php\">$this-&gt;call('QuoteTableSeeder');\n</code></pre>\n\n<p>Now we just need to launch the following command to execute the seed script and populate the database:</p>\n\n<pre><code class=\"language-bash\">php artisan db:seed  \n</code></pre>\n\n<p>Damn, we got a <code>Class QuoteTableSeeder does not exist</code>! That's why by default Lumen Composer file maps the <code>database</code> path with the <code>classmap</code> strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:</p>\n\n<pre><code class=\"language-bash\">composer dump-autoload  \n</code></pre>\n\n<p>Now let's run again <code>php artisan db:seed</code> and this time everything should be fine. <br />\nIf you explore your database you will see some records within the <code>quotes</code> table.</p>\n\n<h2 id=\"therouting\">The routing</h2>\n\n<p>Until now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.</p>\n\n<p>We will have two routes:</p>\n\n<ul>\n<li>GET <code>/</code> - the main route, providing a new quote everyday</li>\n<li>GET <code>/{id}</code> - the route of a specific quote, mapped by id</li>\n</ul>\n\n<p>To define the business logic associate to a route we have to edit the <code>app/Http/routes.php</code> file:</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n# app/Http/routes.php\n\nuse App\\Models\\Quote;\n\n/**\n * Display the today quote\n */\n$app-&gt;get('/', function() use ($app) {\n\n    /*\n     * Picks a different quote every day \n     * (for a maximum of 366 quotes)\n     *\n     *   - $count: the total number of available quotes\n     *   - $day: the current day of the year (from 0 to 365)\n     *   - $page: the page to look for to retrieve the \n     *            correct record\n     */\n    $count = Quote::query()-&gt;get()-&gt;count();\n    $day = (int) date('z');\n    $page = $day % $count + 1;\n\n    $quotes = Quote::query()-&gt;get()-&gt;forPage($page, 1)-&gt;all();\n\n    if (empty($quotes)) {\n        throw new \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();\n    }\n\n    return view('quote', ['quote' =&gt; $quotes[0]]);\n});\n\n/**\n * Display a specific quote\n */\n$app-&gt;get('/{id}', function($id) use ($app) {\n    $quote = Quote::query()-&gt;findOrFail($id);\n    return view('quote', ['quote' =&gt; $quote]);\n});\n</code></pre>\n\n<p>The two <code>$app-&gt;get</code> defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.</p>\n\n<p>The <code>view()</code> function allow to render a template. In this case we are rendering the  <code>quote</code> template passing the model as <code>quote</code> variable. In the next paragraph we will see how to define our template.</p>\n\n<p><strong>Note</strong>: if you don't want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel's controllers. I will not go into the detail of this, but you can check the <a href=\"http://lumen.laravel.com/docs/controllers\">Documentation</a> that shows how to do it. It's quite simple anyway.</p>\n\n<h2 id=\"thetemplate\">The template</h2>\n\n<p>Lumen uses the Laravel default template language, <a href=\"http://lumen.laravel.com/docs/templates\">Blade</a>. Blade allows us to render complex HTML code in a easy way. All the templates live in the <code>resources/views</code> folder. Let's create the <code>quote.blade.php</code> file:</p>\n\n<pre><code class=\"language-html\">&lt;!-- resources/views/quote.blade.php --&gt;\n\n&lt;html&gt;  \n&lt;head&gt;  \n    &lt;title&gt;Motivaitonal — Your daily source of motivation!&lt;/title&gt;\n    &lt;link href=\"/css/style.css\" rel=\"stylesheet\" type=\"text/css\"/&gt;\n    &lt;link href='http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed' rel='stylesheet' type='text/css'&gt;\n&lt;/head&gt;  \n&lt;body style=\"background-image: url('/img/{{$quote-&gt;background}}')\"&gt;  \n&lt;div class=\"container\"&gt;  \n    &lt;div class=\"quote-container\"&gt;\n        &lt;p class=\"text\"&gt;{{$quote-&gt;text}}&lt;/p&gt;\n        &lt;p class=\"author\"&gt;— {{$quote-&gt;author}}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;  \n&lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>\n\n<p>As you can see we can use the double curly braces syntax to reference variable values.</p>\n\n<p>To finish we just need to create our <code>public/css/style.css</code> stylesheet file:</p>\n\n<pre><code class=\"language-css\">html, body {  \n    height: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {  \n    background-size: cover;\n}\n\n.container {\n    height: 100%;\n    background: rgba(0,0,0,.3);\n}\n\n.quote-container {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    padding: 2em 4em;\n}\n\n.quote-container p {\n    text-align: center;\n    color: #fff;\n    text-shadow: 1px 1px 1px rgba(150, 150, 150, 0.8);\n}\n\n.quote-container p.text {\n    font-family: 'Alegreya', serif;\n    font-size: 4em;\n}\n\n.quote-container p.author {\n    font-family: 'Roboto Condensed', sans-serif;\n    font-size: 1.2em;\n}\n</code></pre>\n\n<p>That's it, now your app is up and running. Isn't it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)</p>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>Lumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the <a href=\"http://lumen.laravel.com/docs/cache\">cache layer</a> and the <a href=\"http://lumen.laravel.com/docs/queues\">job queue library</a>. <br />\nHave you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of <a href=\"/tag/php\">Php</a> framework available out there? I'm really curious to know what you think about it, let me know it in the comments!</p>\n\n<p>Best regards and have a very motivated day ;)</p>","image":"/content/images/2015/04/developing-a-web-application-with-lumen.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"How to develop a simple but useful web application with the Php micro-framework Lumen and MySql in less than 30 minutes.","author_id":1,"created_at":"2015-04-18T16:03:08.000Z","created_by":1,"updated_at":"2015-05-12T14:33:37.000Z","updated_by":1,"published_at":"2015-04-18T16:10:35.000Z","published_by":1},{"id":17,"uuid":"ea2d2f0f-efec-4056-bc64-e48629be8573","title":"Introducing flickr-set-get a command line app to download photos","slug":"introducing-flickr-set-get-a-command-line-app-to-download-photos","markdown":"I recently developed a small command line app that allows you to download an entire gallery from Flickr, it's called `flickr-set-get` and you can find it on [NPM](https://www.npmjs.com/package/flickr-set-get) and [GitHub](https://github.com/lmammino/flickr-set-get).\n\n![a screenshoot of flickr-set-get](/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png)\n\n## Why?\n\nTo be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn't wanted to do it manually. I also wasn't able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.\n\n## How it's built?\n\nAs I said it's built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow \"[the Node way](http://thenodeway.io)\" so I used some very good modules as the foundation to build this app:\n\n  - [Commander](https://www.npmjs.com/package/commander), [Cli](https://www.npmjs.com/package/cli) and [Prompt](https://www.npmjs.com/package/prompt) for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)\n  - [Request](https://www.npmjs.com/package/request): to simplify the creation of the Http request to call the Flickr APIs\n  - [Async](https://www.npmjs.com/package/async): to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).\n\nAs development tools I also used:\n\n  - [JSCS](http://jscs.info): to check the code standard I adopted\n  - [Mocha](http://mochajs.org) and [Chai](http://chaijs.com/): test runner and assertion frameworks for the unit testing\n  - [Nock](https://www.npmjs.com/package/nock): amazing module to \"mock\" the Http requests and avoid to hit Flickr servers in my tests\n  - [Istanbul](https://gotwarlost.github.io/istanbul): for the code coverage\n  - [Travis CI](https://travis-ci.org): continous integration service\n  - [Coveralls](https://coveralls.io): service to keep track of the coverage changes after every new commit\n  - [Gemnasium](https://gemnasium.com): service that checks your dependencies and alerts you if they get out of date\n\n## Going asynchronous and execute requests in parallel\n\nTo download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.\n\nFirst of all you need to call the [flickr.photosets.getPhotos](https://www.flickr.com/services/api/flickr.photosets.getPhotos.html) API method to find out the IDs of all the photos in the set.\nThen, to find out the URL of every photo you need to call the [flickr.photos.getSizes](https://www.flickr.com/services/api/flickr.photos.getSizes.html) API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive.\nThe first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel.\nThanks to `Async` it was very easy to create a `task` function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the `Async.parallelLimit()` function it's even possible to run the tasks with a configurable concurrency level.\n\n![flickr-set-get asynchronous requests diagram](/content/images/2015/05/flickr-set-get-requests-diagram.png)\n\nYou can find out how I implemented this specific logic on GitHub: https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253. \n\n## How to use it?\n\nIf you're interested on using it I suggest you to read the [official documentation on GitHub](https://github.com/lmammino/flickr-set-get), but it should be quite easy to understand and use it if you are a developer (and it's not meant to be used by other people who are comfortable with the command line!)\n\n## Current status\n\nThe project has been developed in a weekend as a \"learning project\" and tested just by me on few Flickr galleries. It's to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases. \nIt's a small side project anyway so I don't expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen).\nBeing an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the [official documentation](https://github.com/lmammino/flickr-set-get).\n\n## Opinions\n\nFor me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests. \nAs I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas. \nI offer the comment box below for this sake... please don't be too much indulgent :D","html":"<p>I recently developed a small command line app that allows you to download an entire gallery from Flickr, it's called <code>flickr-set-get</code> and you can find it on <a href=\"https://www.npmjs.com/package/flickr-set-get\">NPM</a> and <a href=\"https://github.com/lmammino/flickr-set-get\">GitHub</a>.</p>\n\n<p><img src=\"/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png\" alt=\"a screenshoot of flickr-set-get\" /></p>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>To be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn't wanted to do it manually. I also wasn't able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.</p>\n\n<h2 id=\"howitsbuilt\">How it's built?</h2>\n\n<p>As I said it's built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow \"<a href=\"http://thenodeway.io\">the Node way</a>\" so I used some very good modules as the foundation to build this app:</p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/commander\">Commander</a>, <a href=\"https://www.npmjs.com/package/cli\">Cli</a> and <a href=\"https://www.npmjs.com/package/prompt\">Prompt</a> for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)</li>\n<li><a href=\"https://www.npmjs.com/package/request\">Request</a>: to simplify the creation of the Http request to call the Flickr APIs</li>\n<li><a href=\"https://www.npmjs.com/package/async\">Async</a>: to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).</li>\n</ul>\n\n<p>As development tools I also used:</p>\n\n<ul>\n<li><a href=\"http://jscs.info\">JSCS</a>: to check the code standard I adopted</li>\n<li><a href=\"http://mochajs.org\">Mocha</a> and <a href=\"http://chaijs.com/\">Chai</a>: test runner and assertion frameworks for the unit testing</li>\n<li><a href=\"https://www.npmjs.com/package/nock\">Nock</a>: amazing module to \"mock\" the Http requests and avoid to hit Flickr servers in my tests</li>\n<li><a href=\"https://gotwarlost.github.io/istanbul\">Istanbul</a>: for the code coverage</li>\n<li><a href=\"https://travis-ci.org\">Travis CI</a>: continous integration service</li>\n<li><a href=\"https://coveralls.io\">Coveralls</a>: service to keep track of the coverage changes after every new commit</li>\n<li><a href=\"https://gemnasium.com\">Gemnasium</a>: service that checks your dependencies and alerts you if they get out of date</li>\n</ul>\n\n<h2 id=\"goingasynchronousandexecuterequestsinparallel\">Going asynchronous and execute requests in parallel</h2>\n\n<p>To download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.</p>\n\n<p>First of all you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photosets.getPhotos.html\">flickr.photosets.getPhotos</a> API method to find out the IDs of all the photos in the set. <br />\nThen, to find out the URL of every photo you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photos.getSizes.html\">flickr.photos.getSizes</a> API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive. <br />\nThe first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel. <br />\nThanks to <code>Async</code> it was very easy to create a <code>task</code> function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the <code>Async.parallelLimit()</code> function it's even possible to run the tasks with a configurable concurrency level.</p>\n\n<p><img src=\"/content/images/2015/05/flickr-set-get-requests-diagram.png\" alt=\"flickr-set-get asynchronous requests diagram\" /></p>\n\n<p>You can find out how I implemented this specific logic on GitHub: <a href=\"https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253\">https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253</a>. </p>\n\n<h2 id=\"howtouseit\">How to use it?</h2>\n\n<p>If you're interested on using it I suggest you to read the <a href=\"https://github.com/lmammino/flickr-set-get\">official documentation on GitHub</a>, but it should be quite easy to understand and use it if you are a developer (and it's not meant to be used by other people who are comfortable with the command line!)</p>\n\n<h2 id=\"currentstatus\">Current status</h2>\n\n<p>The project has been developed in a weekend as a \"learning project\" and tested just by me on few Flickr galleries. It's to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases. <br />\nIt's a small side project anyway so I don't expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen). <br />\nBeing an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the <a href=\"https://github.com/lmammino/flickr-set-get\">official documentation</a>.</p>\n\n<h2 id=\"opinions\">Opinions</h2>\n\n<p>For me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests. <br />\nAs I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas. <br />\nI offer the comment box below for this sake... please don't be too much indulgent :D</p>","image":"/content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"flickr-set-get a command line app to download photos from Flickr","meta_description":"","author_id":1,"created_at":"2015-05-11T23:04:27.000Z","created_by":1,"updated_at":"2015-05-14T17:05:48.000Z","updated_by":1,"published_at":"2015-05-11T23:04:50.000Z","published_by":1},{"id":18,"uuid":"225370dd-3f1f-4705-a24b-4931123739ed","title":"8 invitations to try Keybase.io","slug":"8-invitations-to-try-keybase-io","markdown":"Hello dear developers,\ntoday I finally got my invitation to access the private beta of [Keybase.io](https://keybase.io)! 😎 🎉\nFor those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it's not just this, it's also a *\"directory of people\"*, as they like to say. It's like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it...\n\n![Keybase.io illustration](/content/images/2015/05/keybase-io-robot.jpg)\n...and furthermore the website is full of wonderful illustrations a-la-Dropbox :D\n\n## A quick demo\n\nJust to give you a practical idea of how it works, let's suppose I want to send a super-secret message to my twitter friend Daniel Li ([@d4nyll](https://twitter.com/d4nyll)).\nOnce I have the Keybase command line app installed (and configured) I can just run:\n\n```bash\n$ keybase encrypt twitter://d4nyll -m \"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"\n```\n\nand it will print out a weird message that only Daniel, with his private key will be able to decrypt:\n\n```\n-----BEGIN PGP MESSAGE-----\nComment: GPGTools - https://gpgtools.org\n\nhQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI\npc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S\nD4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ\n80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS\nZ3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2\nquAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j\nUdc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3\ntn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt\nY+yURG9sqr92QGVDLX/x\n=mmvL\n-----END PGP MESSAGE-----\n```\n\nNow I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.\n\nDaniel will be able to easily decrypt the message through the same command line app or though the Keybase website.\n\nThe clear advantage is that I don't need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.\n\nIt's still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of [APIs](https://keybase.io/docs/api/1.0) that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.\n\nThe command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.\n\n## Do you want to give it a try?\nAs you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven't already received your **I have 8 invite code that I am willing to share**. They go to the **first 8 persons who will leave a comment*** here 😉\n\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\">\n    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br/>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.\n</div>\n\nWhat are you waiting for?\n\nPS: In case you want to \"Track\" (verify+follow) me on Keybase, check out [my Keybase profile](https://keybase.io/loige).","html":"<p>Hello dear developers, <br />\ntoday I finally got my invitation to access the private beta of <a href=\"https://keybase.io\">Keybase.io</a>! 😎 🎉 <br />\nFor those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it's not just this, it's also a <em>\"directory of people\"</em>, as they like to say. It's like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it...</p>\n\n<p><img src=\"/content/images/2015/05/keybase-io-robot.jpg\" alt=\"Keybase.io illustration\" />\n...and furthermore the website is full of wonderful illustrations a-la-Dropbox :D</p>\n\n<h2 id=\"aquickdemo\">A quick demo</h2>\n\n<p>Just to give you a practical idea of how it works, let's suppose I want to send a super-secret message to my twitter friend Daniel Li (<a href=\"https://twitter.com/d4nyll\">@d4nyll</a>). <br />\nOnce I have the Keybase command line app installed (and configured) I can just run:</p>\n\n<pre><code class=\"language-bash\">$ keybase encrypt twitter://d4nyll -m \"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"\n</code></pre>\n\n<p>and it will print out a weird message that only Daniel, with his private key will be able to decrypt:</p>\n\n<pre><code>-----BEGIN PGP MESSAGE-----\nComment: GPGTools - https://gpgtools.org\n\nhQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI  \npc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S  \nD4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ  \n80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS  \nZ3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2  \nquAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j  \nUdc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3  \ntn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt  \nY+yURG9sqr92QGVDLX/x  \n=mmvL\n-----END PGP MESSAGE-----\n</code></pre>\n\n<p>Now I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.</p>\n\n<p>Daniel will be able to easily decrypt the message through the same command line app or though the Keybase website.</p>\n\n<p>The clear advantage is that I don't need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.</p>\n\n<p>It's still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of <a href=\"https://keybase.io/docs/api/1.0\">APIs</a> that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.</p>\n\n<p>The command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.</p>\n\n<h2 id=\"doyouwanttogiveitatry\">Do you want to give it a try?</h2>\n\n<p>As you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven't already received your <strong>I have 8 invite code that I am willing to share</strong>. They go to the <strong>first 8 persons who will leave a comment*</strong> here 😉</p>\n\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\">  \n    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br/>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.\n</div>\n\n<p>What are you waiting for?</p>\n\n<p>PS: In case you want to \"Track\" (verify+follow) me on Keybase, check out <a href=\"https://keybase.io/loige\">my Keybase profile</a>.</p>","image":"/content/images/2015/05/8-invitations-to-try-keybase-io.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-05-26T21:32:12.000Z","created_by":1,"updated_at":"2015-05-27T11:22:09.000Z","updated_by":1,"published_at":"2015-05-26T22:25:45.000Z","published_by":1},{"id":19,"uuid":"96e492f6-2f10-4d11-844c-fa2b14e38b16","title":"Versioning and deploying a static website with Git, Flightplan and Nginx","slug":"versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx","markdown":"Do you ever wondered how to manage the **versioning** and **deployment** process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions.\nIn a recent collaboration with [Usersnap](http://usersnap.com/) I had the pleasure to write a very detailed article for their blog that proposes a solution based on **[Flightplan.js](https://github.com/pstadler/flightplan)**, **Git** and **Nginx**.\n\nMy solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it's easy to customize and extend for more complex requirements.\n\nWithout further ado I really advice you to go and read the article on the Usersnap blog: \n\n[A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\n[![A beginner's guide to deploying static websites](/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg)](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\nIf you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.\n\nCheers :)","html":"<p>Do you ever wondered how to manage the <strong>versioning</strong> and <strong>deployment</strong> process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions. <br />\nIn a recent collaboration with <a href=\"http://usersnap.com/\">Usersnap</a> I had the pleasure to write a very detailed article for their blog that proposes a solution based on <strong><a href=\"https://github.com/pstadler/flightplan\">Flightplan.js</a></strong>, <strong>Git</strong> and <strong>Nginx</strong>.</p>\n\n<p>My solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it's easy to customize and extend for more complex requirements.</p>\n\n<p>Without further ado I really advice you to go and read the article on the Usersnap blog: </p>\n\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\">A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan</a></p>\n\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\"><img src=\"/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg\" alt=\"A beginner's guide to deploying static websites\" title=\"\" /></a></p>\n\n<p>If you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.</p>\n\n<p>Cheers :)</p>","image":"/content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-09-08T21:59:27.000Z","created_by":1,"updated_at":"2015-09-14T22:15:27.000Z","updated_by":1,"published_at":"2015-09-08T22:16:27.000Z","published_by":1},{"id":20,"uuid":"fcc6040c-c47f-4aba-a397-f3dbeee9125a","title":"Having fun with NodeJs, Slack and Chuck Norris","slug":"having-fun-with-nodejs-slack-and-chuck-norris","markdown":"I recently wrote a **Slack bot** in **NodeJs** in collaboration with one of my favourite web development websites: the amazing [Scotch.io](https://scotch.io).\n\nIt's a simple and funny experiment I have done in my free time to learn something new. It's nothing special but it will add a bit of fun inside your Slack organisation... *Who doesn't want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?* :)\n\nThe bot is available on Github ([lmammino/norrisbot](https://github.com/lmammino/norrisbot)) and on NPM ([norrisbot](https://www.npmjs.com/package/norrisbot)) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).\n\nIf you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:\n\n[Building a Slack Bot with Node.js and Chuck Norris Super Powers](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\n[![Building a Slack bot with NodeJs and Chuck Norris Super Powers](/content/images/2015/09/slacker.png)](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\nEnjoy it and feel free to leave your comments here or on the article.\n\nCheers!","html":"<p>I recently wrote a <strong>Slack bot</strong> in <strong>NodeJs</strong> in collaboration with one of my favourite web development websites: the amazing <a href=\"https://scotch.io\">Scotch.io</a>.</p>\n\n<p>It's a simple and funny experiment I have done in my free time to learn something new. It's nothing special but it will add a bit of fun inside your Slack organisation... <em>Who doesn't want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?</em> :)</p>\n\n<p>The bot is available on Github (<a href=\"https://github.com/lmammino/norrisbot\">lmammino/norrisbot</a>) and on NPM (<a href=\"https://www.npmjs.com/package/norrisbot\">norrisbot</a>) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).</p>\n\n<p>If you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:</p>\n\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\">Building a Slack Bot with Node.js and Chuck Norris Super Powers</a></p>\n\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\"><img src=\"/content/images/2015/09/slacker.png\" alt=\"Building a Slack bot with NodeJs and Chuck Norris Super Powers\" title=\"\" /></a></p>\n\n<p>Enjoy it and feel free to leave your comments here or on the article.</p>\n\n<p>Cheers!</p>","image":"/content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-09-14T21:20:35.000Z","created_by":1,"updated_at":"2015-09-14T22:05:30.000Z","updated_by":1,"published_at":"2015-09-14T22:05:30.000Z","published_by":1}],"posts_tags":[{"id":2,"post_id":1,"tag_id":2},{"id":3,"post_id":2,"tag_id":3},{"id":4,"post_id":2,"tag_id":4},{"id":5,"post_id":3,"tag_id":5},{"id":6,"post_id":3,"tag_id":6},{"id":7,"post_id":3,"tag_id":7},{"id":8,"post_id":3,"tag_id":8},{"id":9,"post_id":4,"tag_id":5},{"id":10,"post_id":4,"tag_id":6},{"id":11,"post_id":4,"tag_id":7},{"id":12,"post_id":4,"tag_id":9},{"id":13,"post_id":3,"tag_id":9},{"id":19,"post_id":6,"tag_id":6},{"id":20,"post_id":6,"tag_id":10},{"id":21,"post_id":6,"tag_id":14},{"id":22,"post_id":6,"tag_id":15},{"id":23,"post_id":6,"tag_id":16},{"id":24,"post_id":7,"tag_id":6},{"id":25,"post_id":7,"tag_id":10},{"id":26,"post_id":7,"tag_id":11},{"id":27,"post_id":7,"tag_id":12},{"id":34,"post_id":5,"tag_id":6},{"id":35,"post_id":5,"tag_id":10},{"id":38,"post_id":5,"tag_id":22},{"id":39,"post_id":8,"tag_id":22},{"id":40,"post_id":8,"tag_id":23},{"id":41,"post_id":8,"tag_id":24},{"id":42,"post_id":2,"tag_id":24},{"id":43,"post_id":9,"tag_id":25},{"id":44,"post_id":10,"tag_id":6},{"id":45,"post_id":10,"tag_id":13},{"id":48,"post_id":10,"tag_id":26},{"id":49,"post_id":11,"tag_id":6},{"id":50,"post_id":11,"tag_id":10},{"id":53,"post_id":11,"tag_id":27},{"id":54,"post_id":11,"tag_id":28},{"id":55,"post_id":11,"tag_id":29},{"id":899,"post_id":13,"tag_id":32},{"id":900,"post_id":13,"tag_id":33},{"id":1721,"post_id":12,"tag_id":24},{"id":1722,"post_id":12,"tag_id":30},{"id":1723,"post_id":12,"tag_id":31},{"id":1724,"post_id":14,"tag_id":6},{"id":1725,"post_id":14,"tag_id":10},{"id":1726,"post_id":14,"tag_id":27},{"id":2931,"post_id":16,"tag_id":6},{"id":2932,"post_id":16,"tag_id":23},{"id":2933,"post_id":16,"tag_id":34},{"id":2934,"post_id":16,"tag_id":35},{"id":3257,"post_id":17,"tag_id":14},{"id":3258,"post_id":17,"tag_id":27},{"id":3259,"post_id":17,"tag_id":37},{"id":3260,"post_id":17,"tag_id":39},{"id":3261,"post_id":17,"tag_id":40},{"id":3466,"post_id":18,"tag_id":22},{"id":3467,"post_id":18,"tag_id":41},{"id":6072,"post_id":15,"tag_id":6},{"id":6073,"post_id":15,"tag_id":10},{"id":6074,"post_id":15,"tag_id":35},{"id":6075,"post_id":15,"tag_id":42},{"id":6076,"post_id":15,"tag_id":43},{"id":6353,"post_id":20,"tag_id":37},{"id":6354,"post_id":20,"tag_id":48},{"id":6355,"post_id":20,"tag_id":50},{"id":6356,"post_id":19,"tag_id":14},{"id":6357,"post_id":19,"tag_id":24},{"id":6358,"post_id":19,"tag_id":37},{"id":6359,"post_id":19,"tag_id":44},{"id":6360,"post_id":19,"tag_id":45},{"id":6361,"post_id":19,"tag_id":46},{"id":6362,"post_id":19,"tag_id":50}],"roles":[{"id":1,"uuid":"30f165b6-9ef8-47f5-8f72-78abe423faab","name":"Administrator","description":"Administrators","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"53e56822-489d-4b0f-98f6-b124968ce767","name":"Editor","description":"Editors","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":3,"uuid":"1e349b06-e225-4914-9775-0260bfafdc66","name":"Author","description":"Authors","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":4,"uuid":"798a1c4a-d33b-48f3-918e-5e18647bfd82","name":"Owner","description":"Blog Owner","created_at":"2014-12-22T01:36:14.000Z","created_by":1,"updated_at":"2014-12-22T01:36:14.000Z","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"settings":[{"id":1,"uuid":"d354d5f0-4d32-48d9-a8d5-061feab8e07a","key":"databaseVersion","value":"003","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"68ed2e82-7f0c-46a2-b9c0-578b5ac9e1dc","key":"dbHash","value":"374609ec-a545-4553-a152-4158e1f9510f","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":3,"uuid":"0bb24cca-35e7-4cb5-bf90-c3d1dc57c125","key":"nextUpdateCheck","value":"1442349856","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T20:44:17.000Z","updated_by":1},{"id":4,"uuid":"8f065c74-37a9-4330-b226-8eb51e6341b7","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T20:44:17.000Z","updated_by":1},{"id":5,"uuid":"9c36082a-f69c-4db3-8087-947ccaa7d023","key":"title","value":"Loige","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":6,"uuid":"13591e91-2441-4e7d-b862-6609e92f455f","key":"description","value":"Web developer, entrepreneur, fighter, butterfly maker!","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":7,"uuid":"34f5a211-f283-4657-812e-ef5f5f5b5480","key":"email","value":"lucianomammino@gmail.com","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":8,"uuid":"6454c6e9-6f8e-4d76-9dee-ae28cfb07aa6","key":"logo","value":"","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":9,"uuid":"4f3eae5c-3397-4e85-8d84-ab5704d9898a","key":"cover","value":"/content/images/2014/Mar/DSCN8506.jpg","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":10,"uuid":"40992056-d1f2-441b-b1ca-b1a038a8d1a0","key":"defaultLang","value":"en_US","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":11,"uuid":"914e5ac4-7564-4a9b-afa8-07a2d1560f05","key":"postsPerPage","value":"8","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":12,"uuid":"72a42079-8986-406c-ad5c-c8ade3bd1a96","key":"forceI18n","value":"true","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":13,"uuid":"46b8ac48-3ebe-4bd5-b891-e24066e3f81e","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":14,"uuid":"129e44cd-9248-4c14-8a85-97973a2755ff","key":"activeTheme","value":"casper","type":"theme","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":15,"uuid":"e5fb3a23-61cb-4922-823d-981d0bbc164a","key":"activePlugins","value":"[]","type":"plugin","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":16,"uuid":"6119aabb-8d6f-425a-98ea-4fc1222878a8","key":"installedPlugins","value":"[]","type":"plugin","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-03-17T17:12:52.000Z","updated_by":1},{"id":17,"uuid":"5ab2c40f-fa75-40b6-aa2d-c269435f7d70","key":"activeApps","value":"[]","type":"app","created_at":"2014-04-05T15:43:10.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":18,"uuid":"e1056283-7e61-4f8e-9f90-ddead873264d","key":"installedApps","value":"[]","type":"app","created_at":"2014-04-05T15:43:10.000Z","created_by":1,"updated_at":"2015-09-21T22:05:51.000Z","updated_by":1},{"id":19,"uuid":"c22a9bed-78c9-4f5c-bba9-7032d33bb53f","key":"ghost_head","value":"","type":"blog","created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":20,"uuid":"fd5c6054-e20e-4212-bedf-27fd1afb73db","key":"ghost_foot","value":"<script type=\"text/javascript\">\n      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n      ga('create', 'UA-47248506-1', 'auto');\n      ga('require', 'displayfeatures');\n      ga('send', 'pageview');\n</script>","type":"blog","created_at":"2014-12-22T01:36:15.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":21,"uuid":"a0e5db08-3ead-499e-9ccb-d6dadc5a3dc3","key":"labs","value":"{}","type":"blog","created_at":"2015-04-15T23:48:37.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":22,"uuid":"eccae908-4176-49ca-871f-9e6e7a08b4a8","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"#Php\",\"url\":\"/tag/php/\"},{\"label\":\"#Symfony\",\"url\":\"/tag/symfony/\"},{\"label\":\"#NodeJs\",\"url\":\"/tag/node-js/\"},{\"label\":\"#Startups\",\"url\":\"/tag/startups/\"},{\"label\":\"About\",\"url\":\"/author/luciano-mammino/\"}]","type":"blog","created_at":"2015-04-15T23:48:37.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":23,"uuid":"77fd0154-bfb5-4df3-b826-925d498bdb43","key":"isPrivate","value":"false","type":"blog","created_at":"2015-07-25T17:09:48.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1},{"id":24,"uuid":"cff229d0-45cd-4326-b61d-56e17c95dad3","key":"password","value":"","type":"blog","created_at":"2015-07-25T17:09:48.000Z","created_by":1,"updated_at":"2015-09-14T22:08:03.000Z","updated_by":1}],"tags":[{"id":2,"uuid":"56f19069-64fd-433d-b40e-be1be57703be","name":"Life","slug":"life","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-16T23:32:21.000Z","created_by":1,"updated_at":"2014-01-16T23:32:21.000Z","updated_by":1,"image":null,"hidden":0},{"id":3,"uuid":"cb1d4e27-b5dd-4629-89c1-4874939c330f","name":"Backup","slug":"backup","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-17T03:04:02.000Z","created_by":1,"updated_at":"2014-01-17T03:04:02.000Z","updated_by":1,"image":null,"hidden":0},{"id":4,"uuid":"88d18e6b-bb53-4e5e-9634-3239b235f511","name":"Dropbox","slug":"dropbox","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-17T03:04:02.000Z","created_by":1,"updated_at":"2014-01-17T03:04:02.000Z","updated_by":1,"image":null,"hidden":0},{"id":5,"uuid":"8867cbf6-4d03-465d-ac06-9a84dca06db9","name":"Library","slug":"library","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1,"image":null,"hidden":0},{"id":6,"uuid":"4df71d9a-1587-4c21-b522-17feaf593aa2","name":"Php","slug":"php","description":"Various posts about PHP, the language I generally spend most time with","parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2015-04-16T00:27:44.000Z","updated_by":1,"image":"/content/images/2015/04/tag-php.png","hidden":0},{"id":7,"uuid":"eb92cfad-585d-4f98-a3b9-2bb5c0eaffcd","name":"Oauth","slug":"oauth","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1,"image":null,"hidden":0},{"id":8,"uuid":"596e8dda-41dc-44e0-a2e2-3b942ecef591","name":"Instagram","slug":"instagram","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1,"image":null,"hidden":0},{"id":9,"uuid":"6cca632b-8f96-400e-8702-663488f2269c","name":"Github","slug":"github","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:53:29.000Z","created_by":1,"updated_at":"2014-02-10T16:53:29.000Z","updated_by":1,"image":null,"hidden":0},{"id":10,"uuid":"0eb5d3fe-5fc4-40da-b9f2-0347762cc742","name":"Symfony","slug":"symfony","description":"Symfony is a set of reusable PHP components and a PHP framework for web projects","parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2015-04-16T00:33:59.000Z","updated_by":1,"image":"/content/images/2015/04/tag-symfony.jpg","hidden":0},{"id":11,"uuid":"b4c34a74-fef0-4332-86b3-28f4ca713600","name":"Console","slug":"console","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1,"image":null,"hidden":0},{"id":12,"uuid":"55b50b08-e751-4902-a64d-ab7e19465ced","name":"Pimple","slug":"pimple","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1,"image":null,"hidden":0},{"id":13,"uuid":"d0834ddc-a9d2-42c5-a23a-ce7600df7968","name":"Doctrine","slug":"doctrine","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1,"image":null,"hidden":0},{"id":14,"uuid":"4803a01e-e63f-4902-ab51-c4af2f023e9e","name":"JavaScript","slug":"javascript","description":"JavaScript is the most famous dynamic programming language","parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2015-04-16T00:45:24.000Z","updated_by":1,"image":"/content/images/2015/04/tag-javascript.jpg","hidden":0},{"id":15,"uuid":"0b863ec8-c36c-4ab2-9e1f-c4bd98c97ca4","name":"Translation","slug":"translation","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2014-02-28T09:55:56.000Z","updated_by":1,"image":null,"hidden":0},{"id":16,"uuid":"125117b5-4a81-4a5d-bfaf-7076e331c5db","name":"Twig","slug":"twig","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2014-02-28T09:55:56.000Z","updated_by":1,"image":null,"hidden":0},{"id":22,"uuid":"1c708937-131b-4051-9c1d-0bff6f8ff685","name":"Security","slug":"security","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:54:05.000Z","created_by":1,"updated_at":"2014-03-13T14:54:05.000Z","updated_by":1,"image":null,"hidden":0},{"id":23,"uuid":"e94c3981-dcda-4fd1-8f32-60ea2f5e2b18","name":"MySql","slug":"mysql","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:07:53.000Z","updated_by":1,"image":null,"hidden":0},{"id":24,"uuid":"a8663b87-c7cc-4bf6-a302-c303c8af1af1","name":"Server","slug":"server","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:07:53.000Z","updated_by":1,"image":null,"hidden":0},{"id":25,"uuid":"93b4863a-f620-4430-88e1-0f8a234d4a01","name":"Atom.io","slug":"atom-io","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-09T10:58:04.000Z","created_by":1,"updated_at":"2014-04-09T10:58:04.000Z","updated_by":1,"image":null,"hidden":0},{"id":26,"uuid":"43753810-de69-4757-8eff-9a0bc232c7b5","name":"ORM","slug":"orm","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-11T08:50:48.000Z","created_by":1,"updated_at":"2014-04-11T08:50:48.000Z","updated_by":1,"image":null,"hidden":0},{"id":27,"uuid":"6c2c6fed-eb8e-4a09-b470-243355836e3a","name":"Http","slug":"http","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-30T17:31:03.000Z","created_by":1,"updated_at":"2014-04-30T17:31:03.000Z","updated_by":1,"image":null,"hidden":0},{"id":28,"uuid":"9aadd79b-afe1-48e0-8f0d-83e8d0ac2230","name":"Tracking","slug":"tracking","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-13T10:08:56.000Z","created_by":1,"updated_at":"2014-06-13T10:08:56.000Z","updated_by":1,"image":null,"hidden":0},{"id":29,"uuid":"ac2941d1-19a9-456f-a3c4-64c6899e16ea","name":"Email","slug":"email","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-17T09:00:17.000Z","created_by":1,"updated_at":"2014-06-17T09:00:17.000Z","updated_by":1,"image":null,"hidden":0},{"id":30,"uuid":"029361fc-1b6e-4baa-8521-5b1a357def69","name":"GoLang","slug":"go","description":"Posts about Google's own programming language.","parent_id":null,"meta_title":"GoLang on Loige.co","meta_description":null,"created_at":"2014-06-29T10:56:56.000Z","created_by":1,"updated_at":"2015-07-25T17:15:32.000Z","updated_by":1,"image":"/content/images/2015/07/google-golang-language-posts.jpg","hidden":0},{"id":31,"uuid":"b9c9eeec-74f3-4ed5-ba67-1d2455cf6689","name":"Docker","slug":"docker","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-29T10:56:56.000Z","created_by":1,"updated_at":"2014-06-29T10:56:56.000Z","updated_by":1,"image":null,"hidden":0},{"id":32,"uuid":"728fb86c-92bb-4bb2-aea1-0c3ffe42cd96","name":"Startup","slug":"startup","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-12-22T02:17:05.000Z","created_by":1,"updated_at":"2014-12-22T02:17:05.000Z","updated_by":1,"image":null,"hidden":0},{"id":33,"uuid":"e7f2ab6d-2792-469f-9f07-bf6613d5482b","name":"Entrepreneurship","slug":"entrepreneurship","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-12-22T02:17:05.000Z","created_by":1,"updated_at":"2014-12-22T02:17:05.000Z","updated_by":1,"image":null,"hidden":0},{"id":34,"uuid":"463283c3-8e1f-4086-8eb5-751199ef062a","name":"Lumen","slug":"lumen","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-04-18T16:06:43.000Z","created_by":1,"updated_at":"2015-04-18T16:06:43.000Z","updated_by":1,"image":null,"hidden":0},{"id":35,"uuid":"6ae04c89-5446-4b4c-bd6a-7b42165bf9a5","name":"Laravel","slug":"laravel","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-04-18T16:06:43.000Z","created_by":1,"updated_at":"2015-04-18T16:06:43.000Z","updated_by":1,"image":null,"hidden":0},{"id":37,"uuid":"f5ee4f2a-27dd-457f-b047-ba40d6ffc23b","name":"Node.js","slug":"node-js","description":"Articles about NodeJs, the  open-source, cross-platform Javascript runtime environment for developing server-side web applications","parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-05-12T23:18:17.000Z","created_by":1,"updated_at":"2015-09-14T22:14:31.000Z","updated_by":1,"image":"/content/images/2015/09/nodejs-articles.png","hidden":0},{"id":39,"uuid":"28280c56-fb74-47c3-8e49-54e5954bfe77","name":"API","slug":"api","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-05-13T01:31:40.000Z","created_by":1,"updated_at":"2015-05-13T01:31:40.000Z","updated_by":1,"image":null,"hidden":0},{"id":40,"uuid":"f4815bef-9d53-481a-bf9c-b26927eba743","name":"Flickr","slug":"flickr","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-05-13T01:31:40.000Z","created_by":1,"updated_at":"2015-05-13T01:31:40.000Z","updated_by":1,"image":null,"hidden":0},{"id":41,"uuid":"c33e1d00-d18d-4f6d-9566-8a4ba810e8c9","name":"Cryptography","slug":"cryptography","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-05-26T21:34:36.000Z","created_by":1,"updated_at":"2015-05-26T21:34:36.000Z","updated_by":1,"image":null,"hidden":0},{"id":42,"uuid":"85844d59-43b9-4951-965b-95fcc8fe5fcf","name":"Performance","slug":"performance","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-07-25T19:36:12.000Z","created_by":1,"updated_at":"2015-07-25T19:36:12.000Z","updated_by":1,"image":null,"hidden":0},{"id":43,"uuid":"0d57bcc8-564a-4918-9656-315f5b29e139","name":"Scalaibility","slug":"scalaibility","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-07-26T15:59:48.000Z","created_by":1,"updated_at":"2015-07-26T15:59:48.000Z","updated_by":1,"image":null,"hidden":0},{"id":44,"uuid":"28cb0e64-1087-44b5-b50f-cb1dc7cb8ae1","name":"Nginx","slug":"nginx","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-09-08T22:02:10.000Z","created_by":1,"updated_at":"2015-09-08T22:02:10.000Z","updated_by":1,"image":null,"hidden":0},{"id":45,"uuid":"eeb94e3f-7771-4860-b122-6e8e9a8ad685","name":"Git","slug":"git","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-09-08T22:02:10.000Z","created_by":1,"updated_at":"2015-09-08T22:02:10.000Z","updated_by":1,"image":null,"hidden":0},{"id":46,"uuid":"0a794582-6437-4d83-b198-2669727ff4ec","name":"Flightplan","slug":"flightplan","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-09-08T22:02:10.000Z","created_by":1,"updated_at":"2015-09-08T22:02:10.000Z","updated_by":1,"image":null,"hidden":0},{"id":48,"uuid":"08e07d4b-94da-4631-a01c-e5eadea61431","name":"Slack","slug":"slack","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-09-14T21:55:19.000Z","created_by":1,"updated_at":"2015-09-14T21:55:19.000Z","updated_by":1,"image":null,"hidden":0},{"id":50,"uuid":"24cdf2de-4665-4b4d-ae9d-a60759cf991d","name":"Collaboration","slug":"collaboration","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-09-14T21:58:16.000Z","created_by":1,"updated_at":"2015-09-14T21:58:16.000Z","updated_by":1,"image":null,"hidden":0}],"users":[{"id":1,"uuid":"2e687d25-62b3-40be-8e6d-8c00619e22b9","name":"Luciano Mammino","slug":"luciano-mammino","password":"$2a$10$bEbYXxuGhUtMfW6kjY7UsO2KBOc313spfy1ZY/jzJxd6ON8KdVuWO","email":"lucianomammino@gmail.com","image":"//www.gravatar.com/avatar/e18d2c2510d828bc95bde6817e6e9ce2?d=404","cover":null,"bio":"Web developer, entrepreneur, fighter, butterfly maker!","website":"http://loige.co","location":"Ireland / Italy","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":"2015-09-08T21:13:20.000Z","created_at":"2014-01-17T09:11:28.000Z","created_by":1,"updated_at":"2015-09-08T21:13:20.000Z","updated_by":1}]}}