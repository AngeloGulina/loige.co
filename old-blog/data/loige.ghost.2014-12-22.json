{"meta":{"exported_on":1419212174240,"version":"002"},"data":{"permissions":[{"id":1,"uuid":"fbf66546-4fa3-44fb-ade9-55ccaf8bb792","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"a8e4f5d8-9a1b-40ce-81c3-01a8115c8ade","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":3,"uuid":"da41f498-09f0-4fd4-bc0d-dd205471aa6f","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1}],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"permissions_users":[],"posts":[{"id":1,"uuid":"84459189-e67a-404a-97dc-697a72aeaf51","title":"Finally/First","slug":"finally-first","markdown":"Yep! **Finally** here's the **first** post on the path of this blog. *Finally/first*, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure.\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: **Why start a blog?**\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in *qbasic*, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. \n\nI think that's all for now.\nStay tuned ;)","html":"<p>Yep! <strong>Finally</strong> here's the <strong>first</strong> post on the path of this blog. <em>Finally/first</em>, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure. <br />\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: <strong>Why start a blog?</strong> <br />\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in <em>qbasic</em>, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. </p>\n\n<p>I think that's all for now. <br />\nStay tuned ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-17T03:06:07.000Z","updated_by":1,"published_at":"2014-01-16T23:04:36.000Z","published_by":1},{"id":2,"uuid":"5ad52a4d-18d6-4add-b97b-841aa66187aa","title":"Backup your server with Dropbox","slug":"backup-your-server-with-dropbox","markdown":"In my early days as *CTO* at [Sbaam](http://sbaam.com) I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an *almost-0-budget*, so it left no space to sophysticated solutions for recurring tasks such as **backup**. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.\n\nSo, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a [Dropbox](https://db.tt/ref37L7) folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.\n\nUltimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.\n\nThis solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an *ubuntu* machine so I suppose the following steps should work on debian machines.\n\n### 1. Prepare the dropbox user\nI preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:\n\n    sudo useradd -d /dropbox -m dropbox\n\nIt will have the directory `/dropbox` as home and the name `dropbox`. You can change these values if you like.\n\nThen you have to set the password for the new user:\n\n    sudo passwd dropbox\n    \nChoose whatever password you like.\n\n**Security concern:** If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file `/etc/ssh/sshd_config` and add the rule `DenyUsers dropbox`, the restart ssh with `sudo service ssh restart`.\n\n### 2. Install the dropbox client\n\nFirst of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have `/dropbox/Dropbox` as the synced folder:\n\n    su dropbox\n    \n(enter the password for the user dropbox)\n\nNow you're the *dropbox* user. Be sure to switch to your user folder with `cd ~` and let's download and install the daemon.\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n    \nfor 32bit or\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n\nfor 64bit.\n\nExtract it:\n\n    tar -xvzf dropbox.tar.gz\n    \nIt will extract to the `~/.dropbox-dist.` folder. Now run the client:\n\n    ~/.dropbox-dist/dropbox\n    \nYou will see an output like the following:\n\n> This client is not linked to any account...\n> Please visit {SOME_URL} to link this machine. [...]\n\nCopy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press `CTRL+C` and get back to your user with the `exit` command.\n\n### 3. Dropbox as a service\n\nAt this point we need to define dropbox as a service. So let's create an *etc init script*. Download [my gist](https://gist.github.com/lmammino/8467336)\n\n    wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n    \nand move it in the init folder:\n\n    sudo mv dropbox_init_script /etc/init.d/dropbox\n   \nMake it executable:\n\n    sudo chmod +x /etc/init.d/dropbox\n   \nAnd set it to load at startup:\n\n    sudo update-rc.d dropbox defaults\n    \nNow it's a service! Run:\n\n    sudo /etc/init.d/dropbox start\n    \nto start it and feel free to use common service command such as `stop`, `restart` and `status`.\n\n### 4. Enjoy\n\nAt this point you have all your dropbox data in the `/dropbox/Dropbox` folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.\n\n**Security concerns**: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.\n\n### 5. Bonus\n\nDropbox released the [Dropbox CLI](https://www.dropbox.com/download?dl=packages/dropbox.py), a python command line application that you can use to perform some useful task such as *Selective Sync*, disable the *LAN sync* or retrive public links of your files. I suggest to download it by using the dropbox user and place it under `/dropbox/bin`. So you can simply switch to the dropbox user (again with `su dropbox`), download it and make it executable:\n\n    mkdir ~/bin\n    wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n    chmod +x ~/bin/dropbox.py\n    \nAt this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:\n\n    /dropbox/bin/dropbox.py lansync n\n\n---\n\nThat's all.\nIt was a long read but I hope it has been useful ;)\n\n","html":"<p>In my early days as <em>CTO</em> at <a href=\"http://sbaam.com\">Sbaam</a> I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an <em>almost-0-budget</em>, so it left no space to sophysticated solutions for recurring tasks such as <strong>backup</strong>. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.</p>\n\n<p>So, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a <a href=\"https://db.tt/ref37L7\">Dropbox</a> folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.</p>\n\n<p>Ultimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.</p>\n\n<p>This solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an <em>ubuntu</em> machine so I suppose the following steps should work on debian machines.</p>\n\n<h3 id=\"1preparethedropboxuser\">1. Prepare the dropbox user</h3>\n\n<p>I preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:</p>\n\n<pre><code>sudo useradd -d /dropbox -m dropbox\n</code></pre>\n\n<p>It will have the directory <code>/dropbox</code> as home and the name <code>dropbox</code>. You can change these values if you like.</p>\n\n<p>Then you have to set the password for the new user:</p>\n\n<pre><code>sudo passwd dropbox\n</code></pre>\n\n<p>Choose whatever password you like.</p>\n\n<p><strong>Security concern:</strong> If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file <code>/etc/ssh/sshd_config</code> and add the rule <code>DenyUsers dropbox</code>, the restart ssh with <code>sudo service ssh restart</code>.</p>\n\n<h3 id=\"2installthedropboxclient\">2. Install the dropbox client</h3>\n\n<p>First of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have <code>/dropbox/Dropbox</code> as the synced folder:</p>\n\n<pre><code>su dropbox\n</code></pre>\n\n<p>(enter the password for the user dropbox)</p>\n\n<p>Now you're the <em>dropbox</em> user. Be sure to switch to your user folder with <code>cd ~</code> and let's download and install the daemon.</p>\n\n<pre><code>wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n</code></pre>\n\n<p>for 32bit or</p>\n\n<pre><code>wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n</code></pre>\n\n<p>for 64bit.</p>\n\n<p>Extract it:</p>\n\n<pre><code>tar -xvzf dropbox.tar.gz\n</code></pre>\n\n<p>It will extract to the <code>~/.dropbox-dist.</code> folder. Now run the client:</p>\n\n<pre><code>~/.dropbox-dist/dropbox\n</code></pre>\n\n<p>You will see an output like the following:</p>\n\n<blockquote>\n  <p>This client is not linked to any account...\n  Please visit {SOME_URL} to link this machine. [...]</p>\n</blockquote>\n\n<p>Copy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press <code>CTRL+C</code> and get back to your user with the <code>exit</code> command.</p>\n\n<h3 id=\"3dropboxasaservice\">3. Dropbox as a service</h3>\n\n<p>At this point we need to define dropbox as a service. So let's create an <em>etc init script</em>. Download <a href=\"https://gist.github.com/lmammino/8467336\">my gist</a></p>\n\n<pre><code>wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n</code></pre>\n\n<p>and move it in the init folder:</p>\n\n<pre><code>sudo mv dropbox_init_script /etc/init.d/dropbox\n</code></pre>\n\n<p>Make it executable:</p>\n\n<pre><code>sudo chmod +x /etc/init.d/dropbox\n</code></pre>\n\n<p>And set it to load at startup:</p>\n\n<pre><code>sudo update-rc.d dropbox defaults\n</code></pre>\n\n<p>Now it's a service! Run:</p>\n\n<pre><code>sudo /etc/init.d/dropbox start\n</code></pre>\n\n<p>to start it and feel free to use common service command such as <code>stop</code>, <code>restart</code> and <code>status</code>.</p>\n\n<h3 id=\"4enjoy\">4. Enjoy</h3>\n\n<p>At this point you have all your dropbox data in the <code>/dropbox/Dropbox</code> folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.</p>\n\n<p><strong>Security concerns</strong>: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.</p>\n\n<h3 id=\"5bonus\">5. Bonus</h3>\n\n<p>Dropbox released the <a href=\"https://www.dropbox.com/download?dl=packages/dropbox.py\">Dropbox CLI</a>, a python command line application that you can use to perform some useful task such as <em>Selective Sync</em>, disable the <em>LAN sync</em> or retrive public links of your files. I suggest to download it by using the dropbox user and place it under <code>/dropbox/bin</code>. So you can simply switch to the dropbox user (again with <code>su dropbox</code>), download it and make it executable:</p>\n\n<pre><code>mkdir ~/bin\nwget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\nchmod +x ~/bin/dropbox.py\n</code></pre>\n\n<p>At this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:</p>\n\n<pre><code>/dropbox/bin/dropbox.py lansync n\n</code></pre>\n\n<hr />\n\n<p>That's all. <br />\nIt was a long read but I hope it has been useful ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-17T02:52:44.000Z","created_by":1,"updated_at":"2014-04-05T16:21:17.000Z","updated_by":1,"published_at":"2014-01-17T03:44:19.000Z","published_by":1},{"id":3,"uuid":"e935373e-574b-493e-8f84-de5194c67401","title":"Writing a new Extractor for PHPoAuthUserData","slug":"writing-a-new-extractor-for-php-oauth-user-data","markdown":"In my [previous post](http://loige.com/new-php-library-php-oauth-user-data/) I introduced my latest library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) that allows to abstract the process of\nextracting user profile data from various OAuth providers (*Facebook*, *Twitter*, *Linkedin*, etc).\n\nThe library still need a lot of work, especially to write the logic to extract data from all the services available in the [parent OAuth library](https://github.com/Lusitanian/PHPoAuthLib).\n\nAt the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:\n\nAmazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.\n\nSo that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.\n\nThis article illustrates how to add support for a new service by writing a dedicate **extractor** class. It's really simple so stick with me and you will be able to submit your pull request in minutes!\n\nExtractors defines the logic to request information to a given service API and to normalize the received data according to a common [interface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php).\nThe most basic way to define an extractor is to write a class that implements the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php) (that is pretty self-explanatory). \n\nYou could extend the class [Extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php) that implements most of the needed code to get you started. Anyway, extractors should **really** extend the class [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) where possible\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that **lazy loads** data (perform requests only when needed to) and **caches** data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make\nrequests and how to normalize data.\n\nTo understand how to write a new extractor by adopting the [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) we need to clarify some concepts:\n\n  - **Supported fields**: an array of the fields that can be extracted (you should use field constants from the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php)).\n  - **Loaders**: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix `Loader` in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: `profileLoader`).\n  - **Normalizers**: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix `Normalizer` (eg. `uniqueIdNormalizer` or `descriptionNormalizer`).\n  - **LoadersMap**: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the `Loader` suffix.\nMost of the time, if you have only the `profileLoader` loader you will have an array with all fields mapping to the string `profile`.\n  - **NormalizersMap**: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the `Normalizer` suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. `array(self::FIELD_UNIQUE_ID => self::FIELD_UNIQUE_ID)`) for\nevery supported field.\n\nOnce you defined *Supported Fields*, *Loaders*, *Normalizers*, *Loaders Map* and *Normalizers Map* from within your new extractor class you must\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as `getSupportedField`, `getLoadersMap` and `getNormalizersMap`\nyou will end up with a constructor like this:\n\n```php\npublic function __construct()\n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n```\n\nBut let's see how I built the [Instagram extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php) to have a better understanding on the whole process.\n\n## Writing the Instagram extractor\n\nFirst of all I had a look on [a bit of documentation](http://instagram.com/developer/api-console/) to find out what kind of data can be extracted from Instagram users.\n\nSo I discovered that the request to retrieve information about the user is: `/users/self` and its response is a json object that looks like the following:\n\n```json\n{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n```\n\nSo I understood wich fields can be mapped and started writing the `Instagram` class under the `OAuth\\UserData\\Extractor` namespace.\n\n```php\n<?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor\n{\n\t//...\n}\n```\n\nFirst of all I wrote the method `profileLoader` and added a class constant that defines the url of the request.\n\n```php\nconst REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()\n{\n\treturn json_decode($this->service->request(self::REQUEST_PROFILE), true);\n}\n```\n\nEach extractor has access to the property `$this->service` that is an instance of the specific OAuth service from the parent library (`OAuth\\OAuth2\\Service\\Instagram`) in this case. With this instance you can easily make request to the provider API endpoint.\n\nThen I added the `getSupportedFields` method:\n\n```php\nprotected static function getSupportedFields()\n{\n\treturn array(\n\t\tself::FIELD_UNIQUE_ID,\n\t\tself::FIELD_USERNAME,\n\t\tself::FIELD_FULL_NAME,\n\t\tself::FIELD_FIRST_NAME,\n\t\tself::FIELD_LAST_NAME,\n\t\tself::FIELD_DESCRIPTION,\n\t\tself::FIELD_WEBSITES,\n\t\tself::FIELD_IMAGE_URL,\n\t\tself::FIELD_PROFILE_URL,\n\t\tself::FIELD_EXTRA\n\t);\n}\n```\n\nThe fields *first_name*, *last_name* and *profile_url* are not directly available on the json response but are easy to reconstruct by using the *full_name* and *username* fields.\n\nThan I started writing all the normalizer methods to map the raw data to the respective supported fields:\n\n```php\nprotected function uniqueIdNormalizer($data)\n{\n\treturn isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)\n{\n\treturn isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)\n{\n\treturn isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\treturn $names[0];\n\t}\n\n\treturn null;\n}\n\nprotected function lastNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\t\treturn $names[sizeof($names) - 1];\n\t}\n\n\treturn null;\n}\n\nprotected function descriptionNormalizer($data)\n{\n\treturn isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)\n{\n\t$websites = array();\n\tif (isset($data['data']['website'])) {\n\t\t$websites[] = $data['data']['website'];\n\t}\n\n\treturn $websites;\n}\n\nprotected function profileUrlNormalizer()\n{\n\t$username = $this->getField(self::FIELD_USERNAME);\n\n\tif (null !== $username) {\n\t\treturn sprintf('http://instagram.com/%s', $username);\n\t}\n\n\treturn null;\n}\n\nprotected function imageUrlNormalizer($data)\n{\n\treturn isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)\n{\n\treturn ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n\t));\n}\n```\n\nNotice that each normalizer must return `null` if the field is not defined. That's a best pratice to follow for safety.\n\nAlso notice that the `extraNormalizer` method has the purpose to keep track of all the fields that could not be mapped to the `ExtractorInterface` fields. So we use the `OAuth\\UserData\\Utils\\ArrayUtils::removeKeys` method to simply remove already mapped data.\n\nFinally we need to wire our `profileLoader` method and all our normalizers methods in the constructor:\n\n```php\npublic function __construct()\n{\n\tparent::__construct(\n\t\tself::getDefaultLoadersMap(),\n\t\tself::getDefaultNormalizersMap(),\n\t\tself::getSupportedFields()\n\t);\n}\n```\n\nThe methods `self::getDefaultLoadersMap` and `self::getDefaultNormalizersMap` are convenience methods defined in the `LazyExtractor` class that defines respectively a loaders map and a normalizers map that are good in most of the cases.\n\nThat's all. To see the complete class have a look [here](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php).\n\n**Important note**: if you are willing to submit a pull request to integrate a new extractor be sure to follow [PSR-2 code style](http://www.php-fig.org/psr/psr-2/) and to add a dedicated test case. Have a look at the [InstagramTest](https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php) class to understand how to do it.","html":"<p>In my <a href=\"http://loige.com/new-php-library-php-oauth-user-data/\">previous post</a> I introduced my latest library <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a> that allows to abstract the process of <br />\nextracting user profile data from various OAuth providers (<em>Facebook</em>, <em>Twitter</em>, <em>Linkedin</em>, etc).</p>\n\n<p>The library still need a lot of work, especially to write the logic to extract data from all the services available in the <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">parent OAuth library</a>.</p>\n\n<p>At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:</p>\n\n<p>Amazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.</p>\n\n<p>So that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.</p>\n\n<p>This article illustrates how to add support for a new service by writing a dedicate <strong>extractor</strong> class. It's really simple so stick with me and you will be able to submit your pull request in minutes!</p>\n\n<p>Extractors defines the logic to request information to a given service API and to normalize the received data according to a common <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">interface</a>. <br />\nThe most basic way to define an extractor is to write a class that implements the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a> (that is pretty self-explanatory). </p>\n\n<p>You could extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php\">Extractor</a> that implements most of the needed code to get you started. Anyway, extractors should <strong>really</strong> extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> where possible <br />\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that <strong>lazy loads</strong> data (perform requests only when needed to) and <strong>caches</strong> data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make <br />\nrequests and how to normalize data.</p>\n\n<p>To understand how to write a new extractor by adopting the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> we need to clarify some concepts:</p>\n\n<ul>\n<li><strong>Supported fields</strong>: an array of the fields that can be extracted (you should use field constants from the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a>).</li>\n<li><strong>Loaders</strong>: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix <code>Loader</code> in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: <code>profileLoader</code>).  </li>\n<li><strong>Normalizers</strong>: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix <code>Normalizer</code> (eg. <code>uniqueIdNormalizer</code> or <code>descriptionNormalizer</code>).  </li>\n<li><strong>LoadersMap</strong>: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the <code>Loader</code> suffix.\nMost of the time, if you have only the <code>profileLoader</code> loader you will have an array with all fields mapping to the string <code>profile</code>.  </li>\n<li><strong>NormalizersMap</strong>: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the <code>Normalizer</code> suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. <code>array(self::FIELD_UNIQUE_ID =&gt; self::FIELD_UNIQUE_ID)</code>) for\nevery supported field.</li>\n</ul>\n\n<p>Once you defined <em>Supported Fields</em>, <em>Loaders</em>, <em>Normalizers</em>, <em>Loaders Map</em> and <em>Normalizers Map</em> from within your new extractor class you must <br />\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as <code>getSupportedField</code>, <code>getLoadersMap</code> and <code>getNormalizersMap</code> <br />\nyou will end up with a constructor like this:</p>\n\n<pre><code class=\"php\">public function __construct()  \n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n</code></pre>\n\n<p>But let's see how I built the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">Instagram extractor</a> to have a better understanding on the whole process.</p>\n\n<h2 id=\"writingtheinstagramextractor\">Writing the Instagram extractor</h2>\n\n<p>First of all I had a look on <a href=\"http://instagram.com/developer/api-console/\">a bit of documentation</a> to find out what kind of data can be extracted from Instagram users.</p>\n\n<p>So I discovered that the request to retrieve information about the user is: <code>/users/self</code> and its response is a json object that looks like the following:</p>\n\n<pre><code class=\"json\">{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n</code></pre>\n\n<p>So I understood wich fields can be mapped and started writing the <code>Instagram</code> class under the <code>OAuth\\UserData\\Extractor</code> namespace.</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor  \n{\n    //...\n}\n</code></pre>\n\n<p>First of all I wrote the method <code>profileLoader</code> and added a class constant that defines the url of the request.</p>\n\n<pre><code class=\"php\">const REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()  \n{\n    return json_decode($this-&gt;service-&gt;request(self::REQUEST_PROFILE), true);\n}\n</code></pre>\n\n<p>Each extractor has access to the property <code>$this-&gt;service</code> that is an instance of the specific OAuth service from the parent library (<code>OAuth\\OAuth2\\Service\\Instagram</code>) in this case. With this instance you can easily make request to the provider API endpoint.</p>\n\n<p>Then I added the <code>getSupportedFields</code> method:</p>\n\n<pre><code class=\"php\">protected static function getSupportedFields()  \n{\n    return array(\n        self::FIELD_UNIQUE_ID,\n        self::FIELD_USERNAME,\n        self::FIELD_FULL_NAME,\n        self::FIELD_FIRST_NAME,\n        self::FIELD_LAST_NAME,\n        self::FIELD_DESCRIPTION,\n        self::FIELD_WEBSITES,\n        self::FIELD_IMAGE_URL,\n        self::FIELD_PROFILE_URL,\n        self::FIELD_EXTRA\n    );\n}\n</code></pre>\n\n<p>The fields <em>first_name</em>, <em>last_name</em> and <em>profile_url</em> are not directly available on the json response but are easy to reconstruct by using the <em>full_name</em> and <em>username</em> fields.</p>\n\n<p>Than I started writing all the normalizer methods to map the raw data to the respective supported fields:</p>\n\n<pre><code class=\"php\">protected function uniqueIdNormalizer($data)  \n{\n    return isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)  \n{\n    return isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)  \n{\n    return isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()  \n{\n    $fullName = $this-&gt;getField(self::FIELD_FULL_NAME);\n    if ($fullName) {\n        $names = explode(' ', $fullName);\n\n        return $names[0];\n    }\n\n    return null;\n}\n\nprotected function lastNameNormalizer()  \n{\n    $fullName = $this-&gt;getField(self::FIELD_FULL_NAME);\n    if ($fullName) {\n        $names = explode(' ', $fullName);\n\n            return $names[sizeof($names) - 1];\n    }\n\n    return null;\n}\n\nprotected function descriptionNormalizer($data)  \n{\n    return isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)  \n{\n    $websites = array();\n    if (isset($data['data']['website'])) {\n        $websites[] = $data['data']['website'];\n    }\n\n    return $websites;\n}\n\nprotected function profileUrlNormalizer()  \n{\n    $username = $this-&gt;getField(self::FIELD_USERNAME);\n\n    if (null !== $username) {\n        return sprintf('http://instagram.com/%s', $username);\n    }\n\n    return null;\n}\n\nprotected function imageUrlNormalizer($data)  \n{\n    return isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)  \n{\n    return ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n    ));\n}\n</code></pre>\n\n<p>Notice that each normalizer must return <code>null</code> if the field is not defined. That's a best pratice to follow for safety.</p>\n\n<p>Also notice that the <code>extraNormalizer</code> method has the purpose to keep track of all the fields that could not be mapped to the <code>ExtractorInterface</code> fields. So we use the <code>OAuth\\UserData\\Utils\\ArrayUtils::removeKeys</code> method to simply remove already mapped data.</p>\n\n<p>Finally we need to wire our <code>profileLoader</code> method and all our normalizers methods in the constructor:</p>\n\n<pre><code class=\"php\">public function __construct()  \n{\n    parent::__construct(\n        self::getDefaultLoadersMap(),\n        self::getDefaultNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n</code></pre>\n\n<p>The methods <code>self::getDefaultLoadersMap</code> and <code>self::getDefaultNormalizersMap</code> are convenience methods defined in the <code>LazyExtractor</code> class that defines respectively a loaders map and a normalizers map that are good in most of the cases.</p>\n\n<p>That's all. To see the complete class have a look <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">here</a>.</p>\n\n<p><strong>Important note</strong>: if you are willing to submit a pull request to integrate a new extractor be sure to follow <a href=\"http://www.php-fig.org/psr/psr-2/\">PSR-2 code style</a> and to add a dedicated test case. Have a look at the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php\">InstagramTest</a> class to understand how to do it.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-09T23:38:26.000Z","created_by":1,"updated_at":"2014-02-10T17:30:42.000Z","updated_by":1,"published_at":"2014-02-10T17:23:54.000Z","published_by":1},{"id":4,"uuid":"d79a0db9-3f46-4023-9fbe-e18c5c66d0c4","title":"New PHP library: PHPoAuthUserData","slug":"new-php-library-php-oauth-user-data","markdown":"I recently wrote a new [PHP library](https://github.com/Oryzone/PHPoAuthUserData) to simplify the extraction of user data (*name*, *email*, *id*, etc...) from various OAuth providers such as *Facebook*, *Twitter* and *Linkedin*.\n\nIs well know that OAuth 1 and 2 are great *standard* protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.\n\nSo each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.\n\nThat's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!\n\nJust to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?\n\nThe library I wrote is called [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData). It sits on top of the excellent OAuth library [Lusitanian/PHPoAuthLib](https://github.com/Lusitanian/PHPoAuthLib) and aims to resolve the user extraction data problem in the most simple and effective way.\n\nIt offers a *uniform* and (really) simple interface to extract the most interesting and common user data such as *Name*, *Username*, *Id* and so on.\n\nJust to give you a *quick* idea of what is possible with the library have a look at the following snippet:\n\n```php\n// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory->get($service); // get the extractor for the given service\necho $extractor->getUniqueId(); // prints out the unique id of the user\necho $extractor->getUsername(); // prints out the username of the user\necho $extractor->getImageUrl(); // prints out the url of the user profile image\n```\n\nThe code is available on [Github](https://github.com/Oryzone/PHPoAuthUserData) where you will find detailed information on how to install and use the library.\n\nI Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains [how to write an extractor for the library](http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/).","html":"<p>I recently wrote a new <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHP library</a> to simplify the extraction of user data (<em>name</em>, <em>email</em>, <em>id</em>, etc...) from various OAuth providers such as <em>Facebook</em>, <em>Twitter</em> and <em>Linkedin</em>.</p>\n\n<p>Is well know that OAuth 1 and 2 are great <em>standard</em> protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.</p>\n\n<p>So each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.</p>\n\n<p>That's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!</p>\n\n<p>Just to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?</p>\n\n<p>The library I wrote is called <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a>. It sits on top of the excellent OAuth library <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">Lusitanian/PHPoAuthLib</a> and aims to resolve the user extraction data problem in the most simple and effective way.</p>\n\n<p>It offers a <em>uniform</em> and (really) simple interface to extract the most interesting and common user data such as <em>Name</em>, <em>Username</em>, <em>Id</em> and so on.</p>\n\n<p>Just to give you a <em>quick</em> idea of what is possible with the library have a look at the following snippet:</p>\n\n<pre><code class=\"php\">// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory-&gt;get($service); // get the extractor for the given service\necho $extractor-&gt;getUniqueId(); // prints out the unique id of the user  \necho $extractor-&gt;getUsername(); // prints out the username of the user  \necho $extractor-&gt;getImageUrl(); // prints out the url of the user profile image  \n</code></pre>\n\n<p>The code is available on <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">Github</a> where you will find detailed information on how to install and use the library.</p>\n\n<p>I Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains <a href=\"http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/\">how to write an extractor for the library</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-10T12:12:20.000Z","created_by":1,"updated_at":"2014-02-10T23:23:21.000Z","updated_by":1,"published_at":"2014-02-10T12:13:50.000Z","published_by":1},{"id":5,"uuid":"7f08c58e-6898-490b-9b6f-a4680ab114a9","title":"Symfony security: authentication made simple (well, maybe!)","slug":"symfony-security-authentication-made-simple","markdown":"The [Symfony2 security component](http://symfony.com/doc/current/components/security/introduction.html) has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.\n\nI am in the process of writing an [OAuth bundle](https://github.com/Oryzone/OryzoneOauthBundle) and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!\n\nGoing back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. \n\nSo in this post I will try to collect few interesting resources that helped me understanding it better and a [graph](#symfony-authentication-graph) I drawn to resume what I learned.\n\n## Interesting links:\n\nI highly suggest you to read them in the proposed order.\n\n- [Symfony Security component documentation](http://symfony.com/doc/current/components/security/introduction.html): must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!\n- [Diving into security layer](http://www.screenfony.com/blog/symfony-custom-authentication-provider): a great blog post from [Francesco Tassi](http://www.ftassi.com/) of [Screenfony](http://www.screenfony.com/). It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.\n- [Love and Loss: A Symfony Security Play](http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play): slides by the great [Kris Wallsmith](http://kriswallsmith.net/) from the Symfony Live 2013 in Portland. Also a [Video](http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony) is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!\n- [Symfony2: Introduction to The Security Component Part I](http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/), [Part II](http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/) & [Part III](http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/): a series of articles by [Matthias Noback](http://php-and-symfony.matthiasnoback.nl/) that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.\n- [Security in real life](http://symfony.com/video/1/security-in-real-life/English): A video from the Symfony Live Paris 2012 by [Johannes Schmitt](http://jmsyst.com/blog/). Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.\n- [Custom authentication provider](http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html): a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!\n- [How to Authenticate Users with API Keys](http://symfony.com/doc/current/cookbook/security/api_key_authentication.html): another great cookbook article that will shed some light on the topic by providing a simple example.\n- [How to Create a Custom Form Password Authenticator](http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html): yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.\n- [Code of the RememberMe Listener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php): the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.\n\n## Symfony Authentication graph\n\nNotice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a `Request` object and you should check if it can be used to produce an `AuthenticatedToken` according to some authentication logic.\n\n[![Symfony Authentication chart](/content/images/2014/Feb/symfony_security_component_authentication_flow.png)](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing)\n\nGet the image in [full resolution on Google Drive](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing) (you can also propose edits with comments if you want) or [Download the PDF](/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf).\n\nThat's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.","html":"<p>The <a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony2 security component</a> has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.</p>\n\n<p>I am in the process of writing an <a href=\"https://github.com/Oryzone/OryzoneOauthBundle\">OAuth bundle</a> and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component. <br />\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great <a href=\"https://github.com/hwi/HWIOAuthBundle\">HWIOAuthBundle</a> to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!</p>\n\n<p>Going back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. </p>\n\n<p>So in this post I will try to collect few interesting resources that helped me understanding it better and a <a href=\"#symfony-authentication-graph\">graph</a> I drawn to resume what I learned.</p>\n\n<h2 id=\"interestinglinks\">Interesting links:</h2>\n\n<p>I highly suggest you to read them in the proposed order.</p>\n\n<ul>\n<li><a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony Security component documentation</a>: must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!</li>\n<li><a href=\"http://www.screenfony.com/blog/symfony-custom-authentication-provider\">Diving into security layer</a>: a great blog post from <a href=\"http://www.ftassi.com/\">Francesco Tassi</a> of <a href=\"http://www.screenfony.com/\">Screenfony</a>. It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.</li>\n<li><a href=\"http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play\">Love and Loss: A Symfony Security Play</a>: slides by the great <a href=\"http://kriswallsmith.net/\">Kris Wallsmith</a> from the Symfony Live 2013 in Portland. Also a <a href=\"http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony\">Video</a> is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!</li>\n<li><a href=\"http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/\">Symfony2: Introduction to The Security Component Part I</a>, <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/\">Part II</a> &amp; <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/\">Part III</a>: a series of articles by <a href=\"http://php-and-symfony.matthiasnoback.nl/\">Matthias Noback</a> that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.</li>\n<li><a href=\"http://symfony.com/video/1/security-in-real-life/English\">Security in real life</a>: A video from the Symfony Live Paris 2012 by <a href=\"http://jmsyst.com/blog/\">Johannes Schmitt</a>. Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html\">Custom authentication provider</a>: a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/api_key_authentication.html\">How to Authenticate Users with API Keys</a>: another great cookbook article that will shed some light on the topic by providing a simple example.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html\">How to Create a Custom Form Password Authenticator</a>: yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.</li>\n<li><a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php\">Code of the RememberMe Listener</a>: the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.</li>\n</ul>\n\n<h2 id=\"symfonyauthenticationgraph\">Symfony Authentication graph</h2>\n\n<p>Notice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a <code>Request</code> object and you should check if it can be used to produce an <code>AuthenticatedToken</code> according to some authentication logic.</p>\n\n<p><a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\"><img src=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.png\" alt=\"Symfony Authentication chart\" title=\"\" /></a></p>\n\n<p>Get the image in <a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\">full resolution on Google Drive</a> (you can also propose edits with comments if you want) or <a href=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf\">Download the PDF</a>.</p>\n\n<p>That's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-12T10:29:41.000Z","created_by":1,"updated_at":"2014-03-13T14:54:05.000Z","updated_by":1,"published_at":"2014-02-14T00:34:23.000Z","published_by":1},{"id":6,"uuid":"000b9c76-e0e2-4b7b-95c2-29a6a84a65e1","title":"Integrating Twig.js and BazingaJsTranslationBundle","slug":"integrating-twig-js-and-bazingajstranslationbundle","markdown":"Recently I had the need to run a twig template that uses the `trans` filter on my frontend using [twig.js](http://jmsyst.com/libs/twig.js), a pure JavaScript port of twig written by the good [Johannes Schmitt](http://jmsyst.com/).\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the `trans` filter.\n\nSo, at first, I got a JavaScript runtime exception on my page when trying to use the template.\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.\n\nIn my specific case I had a Symfony application where I was already using [BazingaJsTranslationBundle](https://github.com/willdurand/BazingaJsTranslationBundle) to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the `Translator` JavaScript object offered by the Bazinga bundle.\n\n**Note**: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.\n\nIn my first attempt I wrote something like this:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThat seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.\n\nSuppose we have the string `hello %name%`. With twig we expect to do something like:\n\n```jinja+html\n{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n```\n\nNote the `%` delimiters around the parameter name.\n\nThe `Translator.trans` method expects an hash map without parameter delimiters in it. So we would have to do something like this:\n\n```javascript\nTranslator.trans(\"hello %name%\", { 'name' ; 'Alice' });\n```\nNote that there's no `%` delimiter this time.\nThe `Translator.trans` method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: `Translator.placeHolderPrefix` and `Translator.placeHolderSuffix`.\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).\n\nSo my final solution was the following:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &&\n            key[0] == Translator.placeHolderPrefix &&\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThis way it automatically normalizes parameters for the `Translator` object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex).\nLet me know if you do it ;)\n\nObviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the `Translator` object expects it (without delimiters). In this case you can stick to my first implementation.\n\nThat's all. See ya ;)","html":"<p>Recently I had the need to run a twig template that uses the <code>trans</code> filter on my frontend using <a href=\"http://jmsyst.com/libs/twig.js\">twig.js</a>, a pure JavaScript port of twig written by the good <a href=\"http://jmsyst.com/\">Johannes Schmitt</a>. <br />\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the <code>trans</code> filter.</p>\n\n<p>So, at first, I got a JavaScript runtime exception on my page when trying to use the template. <br />\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.</p>\n\n<p>In my specific case I had a Symfony application where I was already using <a href=\"https://github.com/willdurand/BazingaJsTranslationBundle\">BazingaJsTranslationBundle</a> to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the <code>Translator</code> JavaScript object offered by the Bazinga bundle.</p>\n\n<p><strong>Note</strong>: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.</p>\n\n<p>In my first attempt I wrote something like this:</p>\n\n<pre><code class=\"javascript\">Twig.setFilter(\"trans\", function(id, params, domain, locale) {  \n    return Translator.trans(id, params, domain, locale);\n});\n</code></pre>\n\n<p>That seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values! <br />\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.</p>\n\n<p>Suppose we have the string <code>hello %name%</code>. With twig we expect to do something like:</p>\n\n<pre><code class=\"jinja+html\">{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n</code></pre>\n\n<p>Note the <code>%</code> delimiters around the parameter name.</p>\n\n<p>The <code>Translator.trans</code> method expects an hash map without parameter delimiters in it. So we would have to do something like this:</p>\n\n<pre><code class=\"javascript\">Translator.trans(\"hello %name%\", { 'name' ; 'Alice' });  \n</code></pre>\n\n<p>Note that there's no <code>%</code> delimiter this time. <br />\nThe <code>Translator.trans</code> method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: <code>Translator.placeHolderPrefix</code> and <code>Translator.placeHolderSuffix</code>. <br />\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).</p>\n\n<p>So my final solution was the following:</p>\n\n<pre><code class=\"javascript\">Twig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &amp;&amp;\n            key[0] == Translator.placeHolderPrefix &amp;&amp;\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n</code></pre>\n\n<p>This way it automatically normalizes parameters for the <code>Translator</code> object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js. <br />\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex). <br />\nLet me know if you do it ;)</p>\n\n<p>Obviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the <code>Translator</code> object expects it (without delimiters). In this case you can stick to my first implementation.</p>\n\n<p>That's all. See ya ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-21T10:32:24.000Z","created_by":1,"updated_at":"2014-02-28T12:35:38.000Z","updated_by":1,"published_at":"2014-02-28T11:40:05.000Z","published_by":1},{"id":7,"uuid":"c59c1d51-e429-4617-90d0-ff1d3ca71234","title":"Write a console application using Symfony and Pimple","slug":"write-a-console-application-using-symfony-and-pimple","markdown":"In this article I will show you how to set up a stand alone command line application by using the [Symfony Console component](https://github.com/symfony/console) and [Pimple](http://pimple.sensiolabs.org/).\n\n![Sample command line app](/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png)\n\nWriting console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).\n\nAnyway I discovered that writing stand alone command line applications using only the [Symfony/Console](https://github.com/symfony/console) component is a lot more easy and enjoyable and that a lot of famous command line applications uses it ([Composer](https://getcomposer.org/) and [Laravel/Artisan](http://laravel.com/docs/commands) just to name a few). Furthermore by using Symfony I became a great fan of the *Dependency Injection* and *Inversion of Control (IoC)* [design pattern](http://martinfowler.com/articles/injection.html) and, as my dependencies started to grow, I wanted to put some sort of *container* in my command line apps. I decided to go with [Pimple](http://pimple.sensiolabs.org/): a really simple dependency injection container written by [Fabien Potencier](http://fabien.potencier.org/), the notorious head behind the Symfony framework and Sensio.\n\n###Let's start\nI will demonstrate my approach by creating a simple \"hello *$name*\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated [GitHub repository](https://github.com/lmammino/SymfonyConsolePimple).\n\nSo we will be able to run\n\n```bash\napp/console greet Alice\n```\n\nand it will print out \n\n```bash\nHello Alice\n(First time!)\n```\n\nYes, intentionally simple! ;)\n\nLet's start by creating our *composer.json* file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).\n\n```json\n{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n```\n\nYes, let's run `composer update` to download all the libraries.\n\n### Folder structure\n\nLet's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:\n\n- app\n- src\n- vendors\n\nThe **app** folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.\n\n### The Greeter service\n\nLet's just define our core service by Writing the `Greeter` class. This class defines the business logic of our greeting application.\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter\n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this->file = $file;\n        if (file_exists($file)) {\n            $this->greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this->greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this->file, Yaml::dump($this->greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            $this->greetings[$name] = 1;\n        } else {\n            $this->greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            return 0;\n        }\n\n        return $this->greetings[$name];\n    }\n}\n```\n\nThe class is really simple. The main methods are `greet` and `countGreetings` that allows you to build the greet string for someone and to count how many times you have greet someone.\n\nNote that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.\n\n### The GreetCommand\n\nNow we have a service with the main business logic, let's just write a Symfony command to run it:\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this->greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this->setName('greet')\n            ->setDescription('Greet someone')\n            ->addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            ->addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $yell = $input->getOption('yell');\n\n        $output->writeln($this->greeter->greet($name, $yell));\n        if (1 === ($count = $this->greeter->countGreetings($name))) {\n            $output->writeln('(First time!)');\n        } else {\n            $output->writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n```\n\nThe command is totally self explainatory! It just defines the *greet* command offering a *name* argument and a *yell* option (both optional). The point here is that our command has a dependency on the `Greeter` class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).\n\n### Ladies and gents, the Pimple container!\n\nFinally it's time to write our Pimple container. Before getting to the code let's recap things a bit.\nWe have a parameter (the name of the greetings count file) and two services (the `Greeter` service and the `GreetCommand`).\nWe will create a `app/config/container.php` file to define our parameters and services with Pimple:\n\n```php\n<?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' => 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application->addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;\n```\n\nIf you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.\nLet's check our definitions one by one:\n\n- `$c['parameters']` contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)\n- `$c['greeter']` defines the construction of our `Greeter` service\n- `$c['command.greet']` defines the construction of our *greet* command\n- `$c['commands']` is an helper definition that returns an array with all the commands that we want to add in our application\n- `$c['application']` defines the creation of our command line application\n\nOk, we are almost done. We just need to write our bootstrap file and our console executable file.\n\n### The bootstrap file\n\nThe file `app/bootstrap.php` is used to load the composer autoloader class and our container:\n\n```php\n<?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n```\n\n`set_time_limit(0)` ensures that our script will not be killed after a certain amount of seconds (if your *php.ini* wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).\n\n### The executable console file\n\nThe last step needed to make our application executable is to write the `app/console` file. This is a php file that can be executed from the command line (you need to `chmod +x` it).\n\n```php\n#!/usr/bin/env php\n<?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application->run();\n```\n\nBy using a container it just need to load our \"application\" service and call `run()` on it.\n\nNote that the first \"[shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29)\" line (`#!/usr/bin/env php`) allows us to run this file by calling `app/console` (so that you can avoid to call the php interpreter explicitly).\n\n### Conclusions\n\nThis app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.\n\nJust to make a final recap I think this approach guarantees several benefits:\n\n- Write **\"container agnostic\" commands** (they does not know the container, but have only the required dependencies injected)\n- **Attach new commands from configuration**: you just need to add them to the `$container['commands']` array\n- Help you a lot to write **thin commands** (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command\n- Allow you to have **parameters and configuration** (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)\n\nThat should be all. Feel free to comment this post or to contribute to the [sample app repository](https://github.com/lmammino/SymfonyConsolePimple) if you feel that this approach can be tweaked.\n\n**UPDATE** (March 16, 2014):  \n[Javier Egiluz](https://twitter.com/javiereguiluz), great Symfony evangelist, pointed out that one of his command line applications, [easybook](http://easybook-project.org/), uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the [easybook code base](https://github.com/javiereguiluz/easybook).\n\nHave a nice weekend!","html":"<p>In this article I will show you how to set up a stand alone command line application by using the <a href=\"https://github.com/symfony/console\">Symfony Console component</a> and <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>.</p>\n\n<p><img src=\"/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png\" alt=\"Sample command line app\" /></p>\n\n<p>Writing console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).</p>\n\n<p>Anyway I discovered that writing stand alone command line applications using only the <a href=\"https://github.com/symfony/console\">Symfony/Console</a> component is a lot more easy and enjoyable and that a lot of famous command line applications uses it (<a href=\"https://getcomposer.org/\">Composer</a> and <a href=\"http://laravel.com/docs/commands\">Laravel/Artisan</a> just to name a few). Furthermore by using Symfony I became a great fan of the <em>Dependency Injection</em> and <em>Inversion of Control (IoC)</em> <a href=\"http://martinfowler.com/articles/injection.html\">design pattern</a> and, as my dependencies started to grow, I wanted to put some sort of <em>container</em> in my command line apps. I decided to go with <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>: a really simple dependency injection container written by <a href=\"http://fabien.potencier.org/\">Fabien Potencier</a>, the notorious head behind the Symfony framework and Sensio.</p>\n\n<h3 id=\"letsstart\">Let's start</h3>\n\n<p>I will demonstrate my approach by creating a simple \"hello <em>$name</em>\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">GitHub repository</a>.</p>\n\n<p>So we will be able to run</p>\n\n<pre><code class=\"bash\">app/console greet Alice  \n</code></pre>\n\n<p>and it will print out </p>\n\n<pre><code class=\"bash\">Hello Alice  \n(First time!)\n</code></pre>\n\n<p>Yes, intentionally simple! ;)</p>\n\n<p>Let's start by creating our <em>composer.json</em> file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).</p>\n\n<pre><code class=\"json\">{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n</code></pre>\n\n<p>Yes, let's run <code>composer update</code> to download all the libraries.</p>\n\n<h3 id=\"folderstructure\">Folder structure</h3>\n\n<p>Let's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:</p>\n\n<ul>\n<li>app</li>\n<li>src</li>\n<li>vendors</li>\n</ul>\n\n<p>The <strong>app</strong> folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.</p>\n\n<h3 id=\"thegreeterservice\">The Greeter service</h3>\n\n<p>Let's just define our core service by Writing the <code>Greeter</code> class. This class defines the business logic of our greeting application.</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter  \n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this-&gt;file = $file;\n        if (file_exists($file)) {\n            $this-&gt;greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this-&gt;greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this-&gt;file, Yaml::dump($this-&gt;greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this-&gt;greetings[$name])) {\n            $this-&gt;greetings[$name] = 1;\n        } else {\n            $this-&gt;greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this-&gt;greetings[$name])) {\n            return 0;\n        }\n\n        return $this-&gt;greetings[$name];\n    }\n}\n</code></pre>\n\n<p>The class is really simple. The main methods are <code>greet</code> and <code>countGreetings</code> that allows you to build the greet string for someone and to count how many times you have greet someone.</p>\n\n<p>Note that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.</p>\n\n<h3 id=\"thegreetcommand\">The GreetCommand</h3>\n\n<p>Now we have a service with the main business logic, let's just write a Symfony command to run it:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;  \nuse Symfony\\Component\\Console\\Command\\Command;  \nuse Symfony\\Component\\Console\\Input\\InputArgument;  \nuse Symfony\\Component\\Console\\Input\\InputInterface;  \nuse Symfony\\Component\\Console\\Input\\InputOption;  \nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command  \n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this-&gt;greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this-&gt;setName('greet')\n            -&gt;setDescription('Greet someone')\n            -&gt;addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            -&gt;addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input-&gt;getArgument('name');\n        $yell = $input-&gt;getOption('yell');\n\n        $output-&gt;writeln($this-&gt;greeter-&gt;greet($name, $yell));\n        if (1 === ($count = $this-&gt;greeter-&gt;countGreetings($name))) {\n            $output-&gt;writeln('(First time!)');\n        } else {\n            $output-&gt;writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n</code></pre>\n\n<p>The command is totally self explainatory! It just defines the <em>greet</em> command offering a <em>name</em> argument and a <em>yell</em> option (both optional). The point here is that our command has a dependency on the <code>Greeter</code> class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).</p>\n\n<h3 id=\"ladiesandgentsthepimplecontainer\">Ladies and gents, the Pimple container!</h3>\n\n<p>Finally it's time to write our Pimple container. Before getting to the code let's recap things a bit. <br />\nWe have a parameter (the name of the greetings count file) and two services (the <code>Greeter</code> service and the <code>GreetCommand</code>). <br />\nWe will create a <code>app/config/container.php</code> file to define our parameters and services with Pimple:</p>\n\n<pre><code class=\"php\">&lt;?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' =&gt; 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application-&gt;addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;  \n</code></pre>\n\n<p>If you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services. <br />\nLet's check our definitions one by one:</p>\n\n<ul>\n<li><code>$c['parameters']</code> contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)</li>\n<li><code>$c['greeter']</code> defines the construction of our <code>Greeter</code> service</li>\n<li><code>$c['command.greet']</code> defines the construction of our <em>greet</em> command</li>\n<li><code>$c['commands']</code> is an helper definition that returns an array with all the commands that we want to add in our application</li>\n<li><code>$c['application']</code> defines the creation of our command line application</li>\n</ul>\n\n<p>Ok, we are almost done. We just need to write our bootstrap file and our console executable file.</p>\n\n<h3 id=\"thebootstrapfile\">The bootstrap file</h3>\n\n<p>The file <code>app/bootstrap.php</code> is used to load the composer autoloader class and our container:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n</code></pre>\n\n<p><code>set_time_limit(0)</code> ensures that our script will not be killed after a certain amount of seconds (if your <em>php.ini</em> wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).</p>\n\n<h3 id=\"theexecutableconsolefile\">The executable console file</h3>\n\n<p>The last step needed to make our application executable is to write the <code>app/console</code> file. This is a php file that can be executed from the command line (you need to <code>chmod +x</code> it).</p>\n\n<pre><code class=\"php\">#!/usr/bin/env php\n&lt;?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application-&gt;run();\n</code></pre>\n\n<p>By using a container it just need to load our \"application\" service and call <code>run()</code> on it.</p>\n\n<p>Note that the first \"<a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\">shebang</a>\" line (<code>#!/usr/bin/env php</code>) allows us to run this file by calling <code>app/console</code> (so that you can avoid to call the php interpreter explicitly).</p>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n\n<p>This app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity. <br />\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.</p>\n\n<p>Just to make a final recap I think this approach guarantees several benefits:</p>\n\n<ul>\n<li>Write <strong>\"container agnostic\" commands</strong> (they does not know the container, but have only the required dependencies injected)</li>\n<li><strong>Attach new commands from configuration</strong>: you just need to add them to the <code>$container['commands']</code> array</li>\n<li>Help you a lot to write <strong>thin commands</strong> (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command</li>\n<li>Allow you to have <strong>parameters and configuration</strong> (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)</li>\n</ul>\n\n<p>That should be all. Feel free to comment this post or to contribute to the <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">sample app repository</a> if you feel that this approach can be tweaked.</p>\n\n<p><strong>UPDATE</strong> (March 16, 2014): <br />\n<a href=\"https://twitter.com/javiereguiluz\">Javier Egiluz</a>, great Symfony evangelist, pointed out that one of his command line applications, <a href=\"http://easybook-project.org/\">easybook</a>, uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the <a href=\"https://github.com/javiereguiluz/easybook\">easybook code base</a>.</p>\n\n<p>Have a nice weekend!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-03-16T16:50:57.000Z","updated_by":1,"published_at":"2014-03-15T02:16:20.000Z","published_by":1},{"id":8,"uuid":"1e2cce9d-4250-415d-b752-8755ca204bdf","title":"Reset your MySql server password","slug":"reset-your-mysql-server-password","markdown":"Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.\n\nYou just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).\n\n![Reset your MySql server password](/content/images/2014/Mar/password_reset.jpg)\n\n#### 1. Stop the mysql daemon\n\n```bash\nsudo /etc/init.d/mysql stopRun\n```\n\n#### 2. Disable the security checks\n\n```bash\nmysqld_safe --skip-grant-tables &\n```\n\nThe [mysqld_safe](http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html) command will essentially restarts your MySql server but with the option `--skip-grant-tables` it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.\n\nYeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.\n\n#### 3. Login as root\n\n```bash\nmysql -u root -p mysql\n```\n\nIt will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root!\nThe last argument (`mysql`) specifies you want to access the MySql internal database (where user credentials are stored).\n\n#### 4. Change the root password\n\nYou're using the MySql shell now. Just run:\n\n```mysql\nupdate user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";\nexit;\n```\n\nYou need to change the `\"NEW-ROOT-PASSWORD\"` with a password of your choice (obviously).\n\n#### 5. Restart MySql\n\nYou're back in your bash shell:\n\n```bash\nsudo service mysql restart\n```\n\nThis will restart the MySql server and will enable the security checks again.\n\nSo that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)","html":"<p>Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.</p>\n\n<p>You just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).</p>\n\n<p><img src=\"/content/images/2014/Mar/password_reset.jpg\" alt=\"Reset your MySql server password\" /></p>\n\n<h4 id=\"1stopthemysqldaemon\">1. Stop the mysql daemon</h4>\n\n<pre><code class=\"bash\">sudo /etc/init.d/mysql stopRun  \n</code></pre>\n\n<h4 id=\"2disablethesecuritychecks\">2. Disable the security checks</h4>\n\n<pre><code class=\"bash\">mysqld_safe --skip-grant-tables &amp;  \n</code></pre>\n\n<p>The <a href=\"http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html\">mysqld_safe</a> command will essentially restarts your MySql server but with the option <code>--skip-grant-tables</code> it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any! <br />\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.</p>\n\n<p>Yeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.</p>\n\n<h4 id=\"3loginasroot\">3. Login as root</h4>\n\n<pre><code class=\"bash\">mysql -u root -p mysql  \n</code></pre>\n\n<p>It will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root! <br />\nThe last argument (<code>mysql</code>) specifies you want to access the MySql internal database (where user credentials are stored).</p>\n\n<h4 id=\"4changetherootpassword\">4. Change the root password</h4>\n\n<p>You're using the MySql shell now. Just run:</p>\n\n<pre><code class=\"mysql\">update user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";  \nexit;  \n</code></pre>\n\n<p>You need to change the <code>\"NEW-ROOT-PASSWORD\"</code> with a password of your choice (obviously).</p>\n\n<h4 id=\"5restartmysql\">5. Restart MySql</h4>\n\n<p>You're back in your bash shell:</p>\n\n<pre><code class=\"bash\">sudo service mysql restart  \n</code></pre>\n\n<p>This will restart the MySql server and will enable the security checks again.</p>\n\n<p>So that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:20:07.000Z","updated_by":1,"published_at":"2014-03-30T09:07:56.000Z","published_by":1},{"id":9,"uuid":"f1da9e6a-ad1d-422f-91a0-25afe4aad30b","title":"3 invitations to try Atom.io","slug":"3-invitations-to-try-atom-io","markdown":"I have finally got my invitation to try the new text editor [Atom.io](https://atom.io). Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous [SublimeText](http://www.sublimetext.com/).\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.\n\n![Atom.io screenshoot](/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png)\n\nThe point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.\n\nI would be glad to **share the invitations** with the first 3 readers who would **follow me** on [GitHub](https://github.com/lmammino) or [Twitter](https://twitter.com/loige) **and write a comment** on this post.\n\nPS: You would probably need a GitHub account!\n\n**UPDATE**, April 12: \nSorry guys, my invitations has gone for now.\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.\n\nHope you will enjoy it.","html":"<p>I have finally got my invitation to try the new text editor <a href=\"https://atom.io\">Atom.io</a>. Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous <a href=\"http://www.sublimetext.com/\">SublimeText</a>. <br />\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.</p>\n\n<p><img src=\"/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png\" alt=\"Atom.io screenshoot\" /></p>\n\n<p>The point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.</p>\n\n<p>I would be glad to <strong>share the invitations</strong> with the first 3 readers who would <strong>follow me</strong> on <a href=\"https://github.com/lmammino\">GitHub</a> or <a href=\"https://twitter.com/loige\">Twitter</a> <strong>and write a comment</strong> on this post.</p>\n\n<p>PS: You would probably need a GitHub account!</p>\n\n<p><strong>UPDATE</strong>, April 12: \nSorry guys, my invitations has gone for now. <br />\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.</p>\n\n<p>Hope you will enjoy it.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-09T10:48:49.000Z","created_by":1,"updated_at":"2014-04-11T22:37:21.000Z","updated_by":1,"published_at":"2014-04-09T10:58:22.000Z","published_by":1},{"id":10,"uuid":"d057377d-8e7c-4e9e-b5c8-fd07290b7467","title":"Introducing ORM Cheatsheet","slug":"introducing-orm-cheatsheet","markdown":"This week I received an interesting email from Martin Stradej, the developer of [ORM Designer](http://www.orm-designer.com), a tool to design ORM relationships with a simple but powerful graphic user interface.\n\nMartin wrote the mail because he wanted to acknowledge me of his latest project: [ORM Cheatsheet](http://ormcheatsheet.com).\n\n[![ORM Cheatsheet homepage screenshoot](/content/images/2014/Apr/orm-cheatsheet-screenshoot.png)](http://ormcheatsheet.com)\n\nORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports *Doctrine2* and *Doctrine*, but it seems that *Propel* and *Cake PHP*  will be supported too).\n\nIn my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.\n\nIt also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a *Symfony* (both version 2 and 1.4) or a *Zend Framework 2* based one.\n\nThe project has its own [GitHub repository](https://github.com/atlantic18/ormcheatsheet) so everyone can submit a pull request and improve the project.\n\nThat's all\n\nHave a nice weekend","html":"<p>This week I received an interesting email from Martin Stradej, the developer of <a href=\"http://www.orm-designer.com\">ORM Designer</a>, a tool to design ORM relationships with a simple but powerful graphic user interface.</p>\n\n<p>Martin wrote the mail because he wanted to acknowledge me of his latest project: <a href=\"http://ormcheatsheet.com\">ORM Cheatsheet</a>.</p>\n\n<p><a href=\"http://ormcheatsheet.com\"><img src=\"/content/images/2014/Apr/orm-cheatsheet-screenshoot.png\" alt=\"ORM Cheatsheet homepage screenshoot\" title=\"\" /></a></p>\n\n<p>ORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports <em>Doctrine2</em> and <em>Doctrine</em>, but it seems that <em>Propel</em> and <em>Cake PHP</em>  will be supported too).</p>\n\n<p>In my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.</p>\n\n<p>It also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a <em>Symfony</em> (both version 2 and 1.4) or a <em>Zend Framework 2</em> based one.</p>\n\n<p>The project has its own <a href=\"https://github.com/atlantic18/ormcheatsheet\">GitHub repository</a> so everyone can submit a pull request and improve the project.</p>\n\n<p>That's all</p>\n\n<p>Have a nice weekend</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-11T08:50:48.000Z","created_by":1,"updated_at":"2014-04-11T09:24:23.000Z","updated_by":1,"published_at":"2014-04-11T08:50:53.000Z","published_by":1},{"id":11,"uuid":"f35460e0-938b-41cc-be68-3fb5143ee211","title":"Transparent pixel response with Symfony, how to track email opening","slug":"transparent-pixel-response-with-symfony-how-to-track-email-opening","markdown":"If you have ever heard about \"**transparent pixel**\", \"**1x1 blank pixel**\", \"**tracking pixel**\" or simply \"**tracking image**\" you probably know what we are going to talk about and can just [skip to the implementation](#symfonyimplementation)!\n\n\n###Introduction\n\nTransparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.\n\nOne of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.\n\n\n###Track email opening\n\nThe following image shows the typical tracking flow applied to emails:\n\n![Tracking email opening](/content/images/2014/Jun/email-tracking.png)\n\n  1. A user receives our HTML email. Within the email content there's a \"smart\" tracking image: `<img src=\"http://example.com/track.gif?id=1234\">`. Notice that it points to our server **example.com** and has a parameter `id=1234`.\n\n  2. When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.\n  \n  3. The request is handled by the **example.com** webserver. It does not handle the request as a static image but it executes some logic. It checks the `id` parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!\n  \n  4. Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.\n\n\n### Symfony implementation\n\nNow let's see how to implement this tracking flow using the Symfony framework.\n\nNotice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.\n\nFirst of all, we want to have a dedicated `Response` class to send back a transparent pixel to the client, let's call it `TransparentPixelResponse`:\n\n```php\n<?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino <lucianomammino@gmail.com>\n */\nclass TransparentPixelResponse extends Response\n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n    \n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this->headers->set('Content-Type', self::CONTENT_TYPE);\n        $this->setPrivate();\n        $this->headers->addCacheControlDirective('no-cache', true);\n        $this->headers->addCacheControlDirective('must-revalidate', true);\n    }\n}\n```\n\nThe logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.\n\nNow we can write a controller that will handle the tracking request:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\n\nHere the logic is pretty simple too. \nWe created a controller with a `trackEmail` action. The action has been assigned to the route `/track.gif` using the `Route` annotation (if you prefer you can do it also by using the yaml or the xml convention).\nWithin this action we just read the parameter `id` from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).\nThen we just have to return a new instance of our `TransparentPixelResponse` class.\n\nThat's it! Pretty simple, isn't it?\n\n####Improve performance\n\n**UPDATE 2014-06-16**: A comment from [Lumbendil](http://disqus.com/Lumbendil) pointed out that it would be possible to do the \"heavy logic\" within a `kernel.terminate` event listener. So let's refactor our code to follow this good suggestion:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n        \t$dispatcher = $this->get('event_dispatcher');\n            $dispatcher->addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\nNotice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the [`kernel.terminate`](http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate) event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.\n\nObviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.\n\nKeep in mind that the `kernel.terminate` event is optional, and should only be called if your kernel implements `TerminableInterface` (it should work if you are using the  Symfony Standard Edition).\n\n[Lumbendil](http://disqus.com/Lumbendil) also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as [RabbitMq](http://www.rabbitmq.com), [Gearman](http://gearman.org) or [Beanstalkd](http://kr.github.io/beanstalkd). These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).\n\n### Considerations\n\nYou can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript).\nAnyway, regarding tracking email opening, you should be aware that **some e-mail clients block images loading** when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.\n\n**UPDATE 2014-06-17**: [Jelte Steijaert](http://disqus.com/jeltesteijaert/) reported that using email authentication systems such as [DKIM](http://www.dkim.org/) or [SPF](http://www.openspf.org/) will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! \n\nIf you have some other consideration you are very welcome to write a comment, as always!","html":"<p>If you have ever heard about \"<strong>transparent pixel</strong>\", \"<strong>1x1 blank pixel</strong>\", \"<strong>tracking pixel</strong>\" or simply \"<strong>tracking image</strong>\" you probably know what we are going to talk about and can just <a href=\"#symfonyimplementation\">skip to the implementation</a>!</p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Transparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.</p>\n\n<p>One of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.</p>\n\n<h3 id=\"trackemailopening\">Track email opening</h3>\n\n<p>The following image shows the typical tracking flow applied to emails:</p>\n\n<p><img src=\"/content/images/2014/Jun/email-tracking.png\" alt=\"Tracking email opening\" /></p>\n\n<ol>\n<li><p>A user receives our HTML email. Within the email content there's a \"smart\" tracking image: <code>&lt;img src=\"http://example.com/track.gif?id=1234\"&gt;</code>. Notice that it points to our server <strong>example.com</strong> and has a parameter <code>id=1234</code>.</p></li>\n<li><p>When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.</p></li>\n<li><p>The request is handled by the <strong>example.com</strong> webserver. It does not handle the request as a static image but it executes some logic. It checks the <code>id</code> parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!</p></li>\n<li><p>Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.</p></li>\n</ol>\n\n<h3 id=\"symfonyimplementation\">Symfony implementation</h3>\n\n<p>Now let's see how to implement this tracking flow using the Symfony framework.</p>\n\n<p>Notice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.</p>\n\n<p>First of all, we want to have a dedicated <code>Response</code> class to send back a transparent pixel to the client, let's call it <code>TransparentPixelResponse</code>:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino &lt;lucianomammino@gmail.com&gt;\n */\nclass TransparentPixelResponse extends Response  \n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n\n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this-&gt;headers-&gt;set('Content-Type', self::CONTENT_TYPE);\n        $this-&gt;setPrivate();\n        $this-&gt;headers-&gt;addCacheControlDirective('no-cache', true);\n        $this-&gt;headers-&gt;addCacheControlDirective('must-revalidate', true);\n    }\n}\n</code></pre>\n\n<p>The logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string. <br />\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.</p>\n\n<p>Now we can write a controller that will handle the tracking request:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;  \nuse Symfony\\Component\\HttpFoundation\\Request;  \nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller  \n{\n    /**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n        $id = $request-&gt;query-&gt;get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n</code></pre>\n\n<p>Here the logic is pretty simple too. <br />\nWe created a controller with a <code>trackEmail</code> action. The action has been assigned to the route <code>/track.gif</code> using the <code>Route</code> annotation (if you prefer you can do it also by using the yaml or the xml convention). <br />\nWithin this action we just read the parameter <code>id</code> from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example). <br />\nThen we just have to return a new instance of our <code>TransparentPixelResponse</code> class.</p>\n\n<p>That's it! Pretty simple, isn't it?</p>\n\n<h4 id=\"improveperformance\">Improve performance</h4>\n\n<p><strong>UPDATE 2014-06-16</strong>: A comment from <a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> pointed out that it would be possible to do the \"heavy logic\" within a <code>kernel.terminate</code> event listener. So let's refactor our code to follow this good suggestion:</p>\n\n<pre><code class=\"php\">&lt;?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;  \nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;  \nuse Symfony\\Component\\HttpKernel\\KernelEvents;  \nuse Symfony\\Component\\HttpFoundation\\Request;  \nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller  \n{\n    /**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n        $id = $request-&gt;query-&gt;get('id');\n        if (null !== $id) {\n            $dispatcher = $this-&gt;get('event_dispatcher');\n            $dispatcher-&gt;addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n</code></pre>\n\n<p>Notice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate\"><code>kernel.terminate</code></a> event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.</p>\n\n<p>Obviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.</p>\n\n<p>Keep in mind that the <code>kernel.terminate</code> event is optional, and should only be called if your kernel implements <code>TerminableInterface</code> (it should work if you are using the  Symfony Standard Edition).</p>\n\n<p><a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as <a href=\"http://www.rabbitmq.com\">RabbitMq</a>, <a href=\"http://gearman.org\">Gearman</a> or <a href=\"http://kr.github.io/beanstalkd\">Beanstalkd</a>. These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).</p>\n\n<h3 id=\"considerations\">Considerations</h3>\n\n<p>You can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript). <br />\nAnyway, regarding tracking email opening, you should be aware that <strong>some e-mail clients block images loading</strong> when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.</p>\n\n<p><strong>UPDATE 2014-06-17</strong>: <a href=\"http://disqus.com/jeltesteijaert/\">Jelte Steijaert</a> reported that using email authentication systems such as <a href=\"http://www.dkim.org/\">DKIM</a> or <a href=\"http://www.openspf.org/\">SPF</a> will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! </p>\n\n<p>If you have some other consideration you are very welcome to write a comment, as always!</p>","image":null,"featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-04-30T17:30:14.000Z","created_by":1,"updated_at":"2014-06-17T09:00:17.000Z","updated_by":1,"published_at":"2014-06-13T10:33:04.000Z","published_by":1},{"id":12,"uuid":"f579dce5-6865-4048-8471-656d02d49066","title":"Simple echo server written in Go, dockerized!","slug":"simple-echo-server-written-in-go-dockerized","markdown":"In this post we will see how to write a (very) simple **Go server app** and how to put it into a **Docker container** and run it.\n\n![Dockerize a Go application](/content/images/2014/Jun/dockerize-go-app.png)\n\n**Disclaimer**: I'm an absolute beginner with both [Go](http://golang.org) and [Docker](https://docker.com) and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are **very** encouraged to scream at me in the comments ([Comments](#disqus_thread)), I will be extremely thankful ;)\n\n##Introduction\n\nWe are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.\n\n*\"Luciano, you are a PHP developer, why bothering with Go?\"* \n\nNice question! Well, there are at least two reasons for this choice:\n\n- **Experimenting**! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.\n- **Simplicity**! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.\n\nFor those who are not familiar with these two technologies I suggest give the official websites a shot ([Docker.com](https://docker.com) and [Golang.org](http://golang.org)) as I will not provide many specific details about them.\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at [Boot2Docker](https://github.com/boot2docker/boot2docker), it will definitely make your life easier.\n\nBeware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).\n\n##The Go echo server\n\nOk, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that *\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"*.\n\nSo let's just write some code. The following script has been widely inspired by [this one](https://coderwall.com/p/wohavg).\n\n```go\n//server.go\n\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (\n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {\n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -> %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {\n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n  \n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n```\n\nOk, the code is commented at it should be understandable enough. \nLet's try if it works.\n\nJust launch the server with the command:\n\n```bash\ngo run server.go\n```\n\nWe will have our server running and it will print out something like:\n\n```\nListening on :3333\n```\n\nLet's open another terminal window to try to speak with him. We will use [netcat](http://wikipedia.org/wiki/Netcat):\n\n```bash \necho \"Hello server\" | nc localhost 3333\n```\n\nThat's what we should see in the two terminal windows:\n\n![Go echo server terminal windows execution](/content/images/2014/Jun/go-server-output.png)\n\nThe terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a *very useful* response from the server.\n\nThat's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a `CTRL+C`.\n\n\n##Dockerizing the application\n\nOk, now we want to *\"dockerize\"* this simple application. Wait, what does *\"dockerize\"* mean? Well, by *\"dockerizing\"* an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.\n\n\n### Images, Containers and Dockerfile(s)\n\nAn extract from the Docker documentation should make things a bit clearer:\n\n> Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.\n\n\nThere are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"*Dockerfile*\".\n\nA \"*Dockerfile*\" is a file called exactly `Dockerfile` that contains several reproducible instructions to create a Docker *image* from scratch.\n\n*What the hell is an image and how it is different from a container?*\n\nIf you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a [brilliant answer from stackoverflow](http://stackoverflow.com/a/21499102/495177) that should make things a bit clearer:\n\n> An image is the set of layers that are built up and can be moved around. Images are read-only.\n> \n> http://docs.docker.io/en/latest/terms/image/\n> http://docs.docker.io/en/latest/terms/layer/\nA container is an active (or inactive if exited) stateful instantiation of an image.\n>\n> http://docs.docker.io/en/latest/terms/container/\n\nFeel free to visit these links if things are not clear yet.\n\nNow let's get back to our `Dockerfile`. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.\n\n### Let's write the Dockerfile\n\nEnough talking, let's jump to the code:\n\n```\nFROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang\nRUN apt-get update\nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]\n```\n\nLet's analyze all the instructions one by one:\n\n- `FROM ubuntu:12.04` defines the base image from which to start. In this case we will use the `ubuntu:12.04` image, a very lightweight image based on ubuntu 12.04.\n\n- `MAINTAINER Luciano Mammino` isn't it self-explanatory enough? ;)\n\n- `RUN apt-get install -y python-software-properties` installs the `python-software-properties` package to be able to execute `add-apt-repository` next.\n\n- `RUN add-apt-repository ppa:duh/golang`, `RUN apt-get update`, `RUN apt-get install -y golang` and  `RUN apt-get install -y golang`: adds a custom repository for Go and installs it.\n\n- `ADD server.go /var/server/server.go`: copies the file `server.go` into the image (storing it into the `/var/server/` folder)\n\n- `EXPOSE 3333`: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.\n\n- `CMD [\"go\", \"run\", \"/var/server/server.go\"]`: describes the command to execute our Go application when the container is launched (yes, it will execute `go run /var/server/server.go`).\n\n### Let's build!\n\nBefore building the image from our Dockerfile, if you are using `boot2docker`, you need to run it with:\n\n```bash\nboot2docker start\n```\n\nIn case it prints out something like this:\n\n```\n2014/06/29 16:09:32 Started.\n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:\n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375\n```\n\nRun the suggested `export` command. Also take note of the given IP address as we would need to use later to connect to our server.\n\nNow just `cd` into the folder that contains the `Dockerfile` and the `server.go` file and run:\n\n```bash\ndocker build -t goecho .\n```\n\nNotice the `.` that refers to the current folder (yes you got it, it says Docker to look for a `Dockerfile` whitin it).\n\nThe `-t goecho` option is not mandatory and is used to \"give a convenience name\" to the resulting image.\n\nYou will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:\n\n```\nSuccessfully built 713c09526bc1\n```\n\nYou can also execute\n\n```bash\ndocker images\n```\n\nTo list all the available images (you should see our `goecho` on the top of the list).\n\nOur image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.\n\n### Running the container\n\nRunning the image and having a live container is just a matter of running:\n\n```bash\ndocker run -i -t -p 3333:3333 goecho\n```\n\nThe options `-i` and `-t` allows us to execute the container into the interactive mode that allows us to shut it down with `CTRL+C` when needed.\n\nThe option `-p 3333:3333` maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.\n\nNow our container is live and running and our server application is active.\n\nLet's open a new terminal window and try again:\n\n```bash\necho \"Hello server\" | nc <ip> 3333\n```\n\n`<ip>` is `localhost` if you are not using `boot2docker`. If you are using it you need to provide the IP of the intermediade virtual machine provided by `boot2docker`. It is the one we recorded before, but if you can't find it you can simply run `boot2docker ip` to discover it (it's usually `192.168.59.103`).\n\n## Conclusions\n\nThat's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.\n\nThank you","html":"<p>In this post we will see how to write a (very) simple <strong>Go server app</strong> and how to put it into a <strong>Docker container</strong> and run it.</p>\n\n<p><img src=\"/content/images/2014/Jun/dockerize-go-app.png\" alt=\"Dockerize a Go application\" /></p>\n\n<p><strong>Disclaimer</strong>: I'm an absolute beginner with both <a href=\"http://golang.org\">Go</a> and <a href=\"https://docker.com\">Docker</a> and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are <strong>very</strong> encouraged to scream at me in the comments (<a href=\"#disqus_thread\">Comments</a>), I will be extremely thankful ;)</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>We are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.</p>\n\n<p><em>\"Luciano, you are a PHP developer, why bothering with Go?\"</em> </p>\n\n<p>Nice question! Well, there are at least two reasons for this choice:</p>\n\n<ul>\n<li><strong>Experimenting</strong>! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.</li>\n<li><strong>Simplicity</strong>! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.</li>\n</ul>\n\n<p>For those who are not familiar with these two technologies I suggest give the official websites a shot (<a href=\"https://docker.com\">Docker.com</a> and <a href=\"http://golang.org\">Golang.org</a>) as I will not provide many specific details about them. <br />\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at <a href=\"https://github.com/boot2docker/boot2docker\">Boot2Docker</a>, it will definitely make your life easier.</p>\n\n<p>Beware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).</p>\n\n<h2 id=\"thegoechoserver\">The Go echo server</h2>\n\n<p>Ok, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that <em>\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"</em>.</p>\n\n<p>So let's just write some code. The following script has been widely inspired by <a href=\"https://coderwall.com/p/wohavg\">this one</a>.</p>\n\n<pre><code class=\"go\">//server.go\n\npackage main\n\nimport (  \n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (  \n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {  \n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -&gt; %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {  \n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n\n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n</code></pre>\n\n<p>Ok, the code is commented at it should be understandable enough. <br />\nLet's try if it works.</p>\n\n<p>Just launch the server with the command:</p>\n\n<pre><code class=\"bash\">go run server.go  \n</code></pre>\n\n<p>We will have our server running and it will print out something like:</p>\n\n<pre><code>Listening on :3333  \n</code></pre>\n\n<p>Let's open another terminal window to try to speak with him. We will use <a href=\"http://wikipedia.org/wiki/Netcat\">netcat</a>:</p>\n\n<pre><code class=\"bash \">echo \"Hello server\" | nc localhost 3333  \n</code></pre>\n\n<p>That's what we should see in the two terminal windows:</p>\n\n<p><img src=\"/content/images/2014/Jun/go-server-output.png\" alt=\"Go echo server terminal windows execution\" /></p>\n\n<p>The terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a <em>very useful</em> response from the server.</p>\n\n<p>That's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a <code>CTRL+C</code>.</p>\n\n<h2 id=\"dockerizingtheapplication\">Dockerizing the application</h2>\n\n<p>Ok, now we want to <em>\"dockerize\"</em> this simple application. Wait, what does <em>\"dockerize\"</em> mean? Well, by <em>\"dockerizing\"</em> an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.</p>\n\n<h3 id=\"imagescontainersanddockerfiles\">Images, Containers and Dockerfile(s)</h3>\n\n<p>An extract from the Docker documentation should make things a bit clearer:</p>\n\n<blockquote>\n  <p>Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.</p>\n</blockquote>\n\n<p>There are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"<em>Dockerfile</em>\".</p>\n\n<p>A \"<em>Dockerfile</em>\" is a file called exactly <code>Dockerfile</code> that contains several reproducible instructions to create a Docker <em>image</em> from scratch.</p>\n\n<p><em>What the hell is an image and how it is different from a container?</em></p>\n\n<p>If you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a <a href=\"http://stackoverflow.com/a/21499102/495177\">brilliant answer from stackoverflow</a> that should make things a bit clearer:</p>\n\n<blockquote>\n  <p>An image is the set of layers that are built up and can be moved around. Images are read-only.</p>\n  \n  <p><a href='http://docs.docker.io/en/latest/terms/image/'>http://docs.docker.io/en/latest/terms/image/</a>\n  <a href='http://docs.docker.io/en/latest/terms/layer/'>http://docs.docker.io/en/latest/terms/layer/</a>\n  A container is an active (or inactive if exited) stateful instantiation of an image.  </p>\n  \n  <p><a href='http://docs.docker.io/en/latest/terms/container/'>http://docs.docker.io/en/latest/terms/container/</a></p>\n</blockquote>\n\n<p>Feel free to visit these links if things are not clear yet.</p>\n\n<p>Now let's get back to our <code>Dockerfile</code>. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.</p>\n\n<h3 id=\"letswritethedockerfile\">Let's write the Dockerfile</h3>\n\n<p>Enough talking, let's jump to the code:</p>\n\n<pre><code>FROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang  \nRUN apt-get update  \nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]  \n</code></pre>\n\n<p>Let's analyze all the instructions one by one:</p>\n\n<ul>\n<li><p><code>FROM ubuntu:12.04</code> defines the base image from which to start. In this case we will use the <code>ubuntu:12.04</code> image, a very lightweight image based on ubuntu 12.04.</p></li>\n<li><p><code>MAINTAINER Luciano Mammino</code> isn't it self-explanatory enough? ;)</p></li>\n<li><p><code>RUN apt-get install -y python-software-properties</code> installs the <code>python-software-properties</code> package to be able to execute <code>add-apt-repository</code> next.</p></li>\n<li><p><code>RUN add-apt-repository ppa:duh/golang</code>, <code>RUN apt-get update</code>, <code>RUN apt-get install -y golang</code> and  <code>RUN apt-get install -y golang</code>: adds a custom repository for Go and installs it.</p></li>\n<li><p><code>ADD server.go /var/server/server.go</code>: copies the file <code>server.go</code> into the image (storing it into the <code>/var/server/</code> folder)</p></li>\n<li><p><code>EXPOSE 3333</code>: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.</p></li>\n<li><p><code>CMD [\"go\", \"run\", \"/var/server/server.go\"]</code>: describes the command to execute our Go application when the container is launched (yes, it will execute <code>go run /var/server/server.go</code>).</p></li>\n</ul>\n\n<h3 id=\"letsbuild\">Let's build!</h3>\n\n<p>Before building the image from our Dockerfile, if you are using <code>boot2docker</code>, you need to run it with:</p>\n\n<pre><code class=\"bash\">boot2docker start  \n</code></pre>\n\n<p>In case it prints out something like this:</p>\n\n<pre><code>2014/06/29 16:09:32 Started.  \n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:  \n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375  \n</code></pre>\n\n<p>Run the suggested <code>export</code> command. Also take note of the given IP address as we would need to use later to connect to our server.</p>\n\n<p>Now just <code>cd</code> into the folder that contains the <code>Dockerfile</code> and the <code>server.go</code> file and run:</p>\n\n<pre><code class=\"bash\">docker build -t goecho .  \n</code></pre>\n\n<p>Notice the <code>.</code> that refers to the current folder (yes you got it, it says Docker to look for a <code>Dockerfile</code> whitin it).</p>\n\n<p>The <code>-t goecho</code> option is not mandatory and is used to \"give a convenience name\" to the resulting image.</p>\n\n<p>You will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:</p>\n\n<pre><code>Successfully built 713c09526bc1  \n</code></pre>\n\n<p>You can also execute</p>\n\n<pre><code class=\"bash\">docker images  \n</code></pre>\n\n<p>To list all the available images (you should see our <code>goecho</code> on the top of the list).</p>\n\n<p>Our image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.</p>\n\n<h3 id=\"runningthecontainer\">Running the container</h3>\n\n<p>Running the image and having a live container is just a matter of running:</p>\n\n<pre><code class=\"bash\">docker run -i -t -p 3333:3333 goecho  \n</code></pre>\n\n<p>The options <code>-i</code> and <code>-t</code> allows us to execute the container into the interactive mode that allows us to shut it down with <code>CTRL+C</code> when needed.</p>\n\n<p>The option <code>-p 3333:3333</code> maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.</p>\n\n<p>Now our container is live and running and our server application is active.</p>\n\n<p>Let's open a new terminal window and try again:</p>\n\n<pre><code class=\"bash\">echo \"Hello server\" | nc &lt;ip&gt; 3333  \n</code></pre>\n\n<p><code>&lt;ip&gt;</code> is <code>localhost</code> if you are not using <code>boot2docker</code>. If you are using it you need to provide the IP of the intermediade virtual machine provided by <code>boot2docker</code>. It is the one we recorded before, but if you can't find it you can simply run <code>boot2docker ip</code> to discover it (it's usually <code>192.168.59.103</code>).</p>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>That's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.</p>\n\n<p>Thank you</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-06-29T10:24:24.000Z","created_by":1,"updated_at":"2014-07-03T18:15:05.000Z","updated_by":1,"published_at":"2014-06-29T14:43:56.000Z","published_by":1}],"posts_tags":[{"id":2,"post_id":1,"tag_id":2},{"id":3,"post_id":2,"tag_id":3},{"id":4,"post_id":2,"tag_id":4},{"id":5,"post_id":3,"tag_id":5},{"id":6,"post_id":3,"tag_id":6},{"id":7,"post_id":3,"tag_id":7},{"id":8,"post_id":3,"tag_id":8},{"id":9,"post_id":4,"tag_id":5},{"id":10,"post_id":4,"tag_id":6},{"id":11,"post_id":4,"tag_id":7},{"id":12,"post_id":4,"tag_id":9},{"id":13,"post_id":3,"tag_id":9},{"id":19,"post_id":6,"tag_id":6},{"id":20,"post_id":6,"tag_id":10},{"id":21,"post_id":6,"tag_id":14},{"id":22,"post_id":6,"tag_id":15},{"id":23,"post_id":6,"tag_id":16},{"id":24,"post_id":7,"tag_id":6},{"id":25,"post_id":7,"tag_id":10},{"id":26,"post_id":7,"tag_id":11},{"id":27,"post_id":7,"tag_id":12},{"id":34,"post_id":5,"tag_id":6},{"id":35,"post_id":5,"tag_id":10},{"id":38,"post_id":5,"tag_id":22},{"id":39,"post_id":8,"tag_id":22},{"id":40,"post_id":8,"tag_id":23},{"id":41,"post_id":8,"tag_id":24},{"id":42,"post_id":2,"tag_id":24},{"id":43,"post_id":9,"tag_id":25},{"id":44,"post_id":10,"tag_id":6},{"id":45,"post_id":10,"tag_id":13},{"id":48,"post_id":10,"tag_id":26},{"id":49,"post_id":11,"tag_id":6},{"id":50,"post_id":11,"tag_id":10},{"id":53,"post_id":11,"tag_id":27},{"id":54,"post_id":11,"tag_id":28},{"id":55,"post_id":11,"tag_id":29},{"id":56,"post_id":12,"tag_id":24},{"id":57,"post_id":12,"tag_id":30},{"id":58,"post_id":12,"tag_id":31}],"roles":[{"id":1,"uuid":"30f165b6-9ef8-47f5-8f72-78abe423faab","name":"Administrator","description":"Administrators","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"53e56822-489d-4b0f-98f6-b124968ce767","name":"Editor","description":"Editors","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":3,"uuid":"1e349b06-e225-4914-9775-0260bfafdc66","name":"Author","description":"Authors","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"sessions":[{"id":"OlPohlEqb2VbxZD5m3R2rKxj","expires":1419254555549,"sess":"{\"cookie\":{\"originalMaxAge\":43200000,\"expires\":\"2014-12-22T13:22:35.549Z\",\"httpOnly\":true,\"path\":\"/ghost/\"},\"user\":1,\"_csrfSecret\":\"AS2if9HKPkmyEVtc86oPLPIR\"}"}],"settings":[{"id":1,"uuid":"d354d5f0-4d32-48d9-a8d5-061feab8e07a","key":"databaseVersion","value":"002","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"68ed2e82-7f0c-46a2-b9c0-578b5ac9e1dc","key":"dbHash","value":"374609ec-a545-4553-a152-4158e1f9510f","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":3,"uuid":"0bb24cca-35e7-4cb5-bf90-c3d1dc57c125","key":"nextUpdateCheck","value":"1419286432","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T22:13:51.000Z","updated_by":1},{"id":4,"uuid":"8f065c74-37a9-4330-b226-8eb51e6341b7","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T22:13:51.000Z","updated_by":1},{"id":5,"uuid":"9c36082a-f69c-4db3-8087-947ccaa7d023","key":"title","value":"Loige","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":6,"uuid":"13591e91-2441-4e7d-b862-6609e92f455f","key":"description","value":"Web developer, entrepreneur, fighter, butterfly maker!","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":7,"uuid":"34f5a211-f283-4657-812e-ef5f5f5b5480","key":"email","value":"lucianomammino@gmail.com","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":8,"uuid":"6454c6e9-6f8e-4d76-9dee-ae28cfb07aa6","key":"logo","value":"","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":9,"uuid":"4f3eae5c-3397-4e85-8d84-ab5704d9898a","key":"cover","value":"/content/images/2014/Mar/DSCN8506.jpg","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":10,"uuid":"40992056-d1f2-441b-b1ca-b1a038a8d1a0","key":"defaultLang","value":"en_US","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":11,"uuid":"914e5ac4-7564-4a9b-afa8-07a2d1560f05","key":"postsPerPage","value":"6","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":12,"uuid":"72a42079-8986-406c-ad5c-c8ade3bd1a96","key":"forceI18n","value":"true","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":13,"uuid":"46b8ac48-3ebe-4bd5-b891-e24066e3f81e","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":14,"uuid":"129e44cd-9248-4c14-8a85-97973a2755ff","key":"activeTheme","value":"casper","type":"theme","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":15,"uuid":"e5fb3a23-61cb-4922-823d-981d0bbc164a","key":"activePlugins","value":"[]","type":"plugin","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":16,"uuid":"6119aabb-8d6f-425a-98ea-4fc1222878a8","key":"installedPlugins","value":"[]","type":"plugin","created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-03-17T17:12:52.000Z","updated_by":1},{"id":17,"uuid":"5ab2c40f-fa75-40b6-aa2d-c269435f7d70","key":"activeApps","value":"[]","type":"app","created_at":"2014-04-05T15:43:10.000Z","created_by":1,"updated_at":"2014-12-21T23:56:42.000Z","updated_by":1},{"id":18,"uuid":"e1056283-7e61-4f8e-9f90-ddead873264d","key":"installedApps","value":"[]","type":"app","created_at":"2014-04-05T15:43:10.000Z","created_by":1,"updated_at":"2014-12-22T01:22:18.000Z","updated_by":1}],"tags":[{"id":1,"uuid":"1c83868a-51c1-412e-8d0b-6b61e1fedfbb","name":"Getting started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-16T23:04:36.000Z","created_by":1,"updated_at":"2014-01-16T23:04:36.000Z","updated_by":1},{"id":2,"uuid":"56f19069-64fd-433d-b40e-be1be57703be","name":"Life","slug":"life","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-16T23:32:21.000Z","created_by":1,"updated_at":"2014-01-16T23:32:21.000Z","updated_by":1},{"id":3,"uuid":"cb1d4e27-b5dd-4629-89c1-4874939c330f","name":"Backup","slug":"backup","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-17T03:04:02.000Z","created_by":1,"updated_at":"2014-01-17T03:04:02.000Z","updated_by":1},{"id":4,"uuid":"88d18e6b-bb53-4e5e-9634-3239b235f511","name":"Dropbox","slug":"dropbox","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-01-17T03:04:02.000Z","created_by":1,"updated_at":"2014-01-17T03:04:02.000Z","updated_by":1},{"id":5,"uuid":"8867cbf6-4d03-465d-ac06-9a84dca06db9","name":"Library","slug":"library","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1},{"id":6,"uuid":"4df71d9a-1587-4c21-b522-17feaf593aa2","name":"Php","slug":"php","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1},{"id":7,"uuid":"eb92cfad-585d-4f98-a3b9-2bb5c0eaffcd","name":"Oauth","slug":"oauth","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1},{"id":8,"uuid":"596e8dda-41dc-44e0-a2e2-3b942ecef591","name":"Instagram","slug":"instagram","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:52:06.000Z","created_by":1,"updated_at":"2014-02-10T16:52:06.000Z","updated_by":1},{"id":9,"uuid":"6cca632b-8f96-400e-8702-663488f2269c","name":"Github","slug":"github","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-10T16:53:29.000Z","created_by":1,"updated_at":"2014-02-10T16:53:29.000Z","updated_by":1},{"id":10,"uuid":"0eb5d3fe-5fc4-40da-b9f2-0347762cc742","name":"Symfony","slug":"symfony","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1},{"id":11,"uuid":"b4c34a74-fef0-4332-86b3-28f4ca713600","name":"Console","slug":"console","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1},{"id":12,"uuid":"55b50b08-e751-4902-a64d-ab7e19465ced","name":"Pimple","slug":"pimple","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1},{"id":13,"uuid":"d0834ddc-a9d2-42c5-a23a-ce7600df7968","name":"Doctrine","slug":"doctrine","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:18.000Z","created_by":1,"updated_at":"2014-02-28T09:55:18.000Z","updated_by":1},{"id":14,"uuid":"4803a01e-e63f-4902-ab51-c4af2f023e9e","name":"JavaScript","slug":"javascript","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2014-02-28T09:55:56.000Z","updated_by":1},{"id":15,"uuid":"0b863ec8-c36c-4ab2-9e1f-c4bd98c97ca4","name":"Translation","slug":"translation","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2014-02-28T09:55:56.000Z","updated_by":1},{"id":16,"uuid":"125117b5-4a81-4a5d-bfaf-7076e331c5db","name":"Twig","slug":"twig","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-02-28T09:55:56.000Z","created_by":1,"updated_at":"2014-02-28T09:55:56.000Z","updated_by":1},{"id":17,"uuid":"6504c6e2-6879-4e87-99e4-e3728c847474","name":"php","slug":"php-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:53:17.000Z","created_by":1,"updated_at":"2014-03-13T14:53:17.000Z","updated_by":1},{"id":18,"uuid":"06dcb203-19ac-45c3-9d4b-9a94930a35b6","name":"console","slug":"console-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:53:17.000Z","created_by":1,"updated_at":"2014-03-13T14:53:17.000Z","updated_by":1},{"id":19,"uuid":"12052a95-beda-4585-9b6b-a5d8a5323d28","name":"pimple","slug":"pimple-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:53:17.000Z","created_by":1,"updated_at":"2014-03-13T14:53:17.000Z","updated_by":1},{"id":20,"uuid":"ea78a3c3-fe14-467b-9a34-0e0e8487d80a","name":"symfony","slug":"symfony-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:53:17.000Z","created_by":1,"updated_at":"2014-03-13T14:53:17.000Z","updated_by":1},{"id":21,"uuid":"3960b157-318f-4666-8790-2dd2b99045de","name":"doctrine","slug":"doctrine-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:53:17.000Z","created_by":1,"updated_at":"2014-03-13T14:53:17.000Z","updated_by":1},{"id":22,"uuid":"1c708937-131b-4051-9c1d-0bff6f8ff685","name":"Security","slug":"security","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-13T14:54:05.000Z","created_by":1,"updated_at":"2014-03-13T14:54:05.000Z","updated_by":1},{"id":23,"uuid":"e94c3981-dcda-4fd1-8f32-60ea2f5e2b18","name":"MySql","slug":"mysql","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:07:53.000Z","updated_by":1},{"id":24,"uuid":"a8663b87-c7cc-4bf6-a302-c303c8af1af1","name":"Server","slug":"server","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-03-30T09:07:53.000Z","created_by":1,"updated_at":"2014-03-30T09:07:53.000Z","updated_by":1},{"id":25,"uuid":"93b4863a-f620-4430-88e1-0f8a234d4a01","name":"Atom.io","slug":"atom-io","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-09T10:58:04.000Z","created_by":1,"updated_at":"2014-04-09T10:58:04.000Z","updated_by":1},{"id":26,"uuid":"43753810-de69-4757-8eff-9a0bc232c7b5","name":"ORM","slug":"orm","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-11T08:50:48.000Z","created_by":1,"updated_at":"2014-04-11T08:50:48.000Z","updated_by":1},{"id":27,"uuid":"6c2c6fed-eb8e-4a09-b470-243355836e3a","name":"Http","slug":"http","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-04-30T17:31:03.000Z","created_by":1,"updated_at":"2014-04-30T17:31:03.000Z","updated_by":1},{"id":28,"uuid":"9aadd79b-afe1-48e0-8f0d-83e8d0ac2230","name":"Tracking","slug":"tracking","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-13T10:08:56.000Z","created_by":1,"updated_at":"2014-06-13T10:08:56.000Z","updated_by":1},{"id":29,"uuid":"ac2941d1-19a9-456f-a3c4-64c6899e16ea","name":"Email","slug":"email","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-17T09:00:17.000Z","created_by":1,"updated_at":"2014-06-17T09:00:17.000Z","updated_by":1},{"id":30,"uuid":"029361fc-1b6e-4baa-8521-5b1a357def69","name":"Go","slug":"go","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-29T10:56:56.000Z","created_by":1,"updated_at":"2014-06-29T10:56:56.000Z","updated_by":1},{"id":31,"uuid":"b9c9eeec-74f3-4ed5-ba67-1d2455cf6689","name":"Docker","slug":"docker","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2014-06-29T10:56:56.000Z","created_by":1,"updated_at":"2014-06-29T10:56:56.000Z","updated_by":1}],"users":[{"id":1,"uuid":"2e687d25-62b3-40be-8e6d-8c00619e22b9","name":"Luciano Mammino","slug":"luciano-mammino","password":"$2a$10$bEbYXxuGhUtMfW6kjY7UsO2KBOc313spfy1ZY/jzJxd6ON8KdVuWO","email":"lucianomammino@gmail.com","image":"//www.gravatar.com/avatar/e18d2c2510d828bc95bde6817e6e9ce2?d=404","cover":null,"bio":"Web developer, entrepreneur, fighter, butterfly maker!","website":"http://loige.com","location":"Ireland / Italy","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":"2014-01-16T23:11:28.000Z","created_by":1,"updated_at":"2014-12-21T23:58:53.000Z","updated_by":1}]}}