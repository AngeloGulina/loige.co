{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/content/images/2014/12/bill-liao.png","path":"content/images/2014/12/bill-liao.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/daniel-ramamoorthy.png","path":"content/images/2014/12/daniel-ramamoorthy.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/sean-gallagher.png","path":"content/images/2014/12/sean-gallagher.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/sean-o-sullivan.png","path":"content/images/2014/12/sean-o-sullivan.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/wayne-murphy.png","path":"content/images/2014/12/wayne-murphy.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Jun/go-server-output.png","path":"content/images/2014/Jun/go-server-output.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/04/developing-a-web-application-with-lumen.jpg","path":"content/images/2015/04/developing-a-web-application-with-lumen.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/04/tag-php.png","path":"content/images/2015/04/tag-php.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg","path":"content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites.jpg","path":"content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/slacker.png","path":"content/images/2015/09/slacker.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/nodejs-articles.png","path":"content/images/2015/09/nodejs-articles.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg","path":"content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/02/symfony-globally-edit-response-based-on-request.jpg","path":"content/images/2015/02/symfony-globally-edit-response-based-on-request.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/05/flickr-set-get-requests-diagram.png","path":"content/images/2015/05/flickr-set-get-requests-diagram.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/05/keybase-io-robot.jpg","path":"content/images/2015/05/keybase-io-robot.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/cache-joke-comic-the-cloud.png","path":"content/images/2015/07/cache-joke-comic-the-cloud.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg","path":"content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/the_flash_by_fabioyabu.jpg","path":"content/images/2015/07/the_flash_by_fabioyabu.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/10/gulp-is-the-streaming-web-build-system.png","path":"content/images/2015/10/gulp-is-the-streaming-web-build-system.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png","path":"content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","path":"content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/extracting-data-from-wikipedia-using-curl-grep-and-other-bash-commands-judo-teddy-riner.jpg","path":"content/images/2016/08/extracting-data-from-wikipedia-using-curl-grep-and-other-bash-commands-judo-teddy-riner.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/ryoko-tani-universal-javascript-nodejs-react-luciano-mammino-cover.jpg","path":"content/images/2016/08/ryoko-tani-universal-javascript-nodejs-react-luciano-mammino-cover.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png","path":"content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg","path":"content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2014/Feb/symfony_security_component_authentication_flow.png","path":"content/images/2014/Feb/symfony_security_component_authentication_flow.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf","path":"content/images/2014/Feb/symfony_security_component_authentication_flow.pdf","modified":0,"renderable":0},{"_id":"source/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png","path":"content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/04/motivation-quote-app-screenshoot.jpg","path":"content/images/2015/04/motivation-quote-app-screenshoot.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/04/tag-javascript.jpg","path":"content/images/2015/04/tag-javascript.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg","path":"content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/05/8-invitations-to-try-keybase-io.jpg","path":"content/images/2015/05/8-invitations-to-try-keybase-io.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png","path":"content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/flash-gordon-fast-code.png","path":"content/images/2015/07/flash-gordon-fast-code.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg","path":"content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon.jpg","path":"content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png","path":"content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg","path":"content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens-part2.png","path":"content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens-part2.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg","path":"content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection.jpg","path":"content/images/2016/08/universal-javascript-judo-heroes-athlete-selection.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2014/Jun/dockerize-go-app.png","path":"content/images/2014/Jun/dockerize-go-app.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Jun/Schermata-2014-06-11-alle-10-32-07.png","path":"content/images/2014/Jun/Schermata-2014-06-11-alle-10-32-07.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png","path":"content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Apr/orm-cheatsheet-screenshoot.png","path":"content/images/2014/Apr/orm-cheatsheet-screenshoot.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Mar/password_reset.jpg","path":"content/images/2014/Mar/password_reset.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/04/tag-symfony.jpg","path":"content/images/2015/04/tag-symfony.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg","path":"content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/mongo-uri-builder-article-sample-image.jpg","path":"content/images/2015/09/mongo-uri-builder-article-sample-image.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png","path":"content/images/2015/02/symfony-http-kernel-component-overview-scheme.png","modified":0,"renderable":0},{"_id":"source/content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg","path":"content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/google-golang-language-posts.jpg","path":"content/images/2015/07/google-golang-language-posts.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png","path":"content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg","path":"content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png","path":"content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small.png","path":"content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png","path":"content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png","path":"content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/11/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.jpg","path":"content/images/2016/11/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2014/Mar/DSCN8506.jpg","path":"content/images/2014/Mar/DSCN8506.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/i-just-do-things-joker-meme.gif","path":"content/images/2015/07/i-just-do-things-joker-meme.gif","modified":0,"renderable":0},{"_id":"source/content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly.png","path":"content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/07/announcing-the-book-node-js-design-patterns-second-edition.jpg","path":"content/images/2016/07/announcing-the-book-node-js-design-patterns-second-edition.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/08/scotch-featured-image-react-on-the-server.png","path":"content/images/2016/08/scotch-featured-image-react-on-the-server.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Jun/email-tracking.png","path":"content/images/2014/Jun/email-tracking.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/02/to-promise-or-to-callback-this-is-the-problem-loige-amlet-arnold-schwarzenegger-javascript.png","path":"content/images/2016/02/to-promise-or-to-callback-this-is-the-problem-loige-amlet-arnold-schwarzenegger-javascript.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png","path":"content/images/2016/01/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/Jan/1489602_10152103253343276_1827786975_o.jpg","path":"content/images/2014/Jan/1489602_10152103253343276_1827786975_o.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/07/rules-of-thumb-to-build-a-blazing-fast-web-applications.jpg","path":"content/images/2015/07/rules-of-thumb-to-build-a-blazing-fast-web-applications.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/03/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk-min.jpg","path":"content/images/2016/03/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk-min.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/10/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.jpg","path":"content/images/2016/10/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly-1.png","path":"content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly-1.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png","path":"content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/boi-1.png","path":"content/images/2014/12/boi-1.png","modified":0,"renderable":0},{"_id":"source/content/images/2014/12/boi.png","path":"content/images/2014/12/boi.png","modified":0,"renderable":0},{"_id":"source/content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author-1.jpg","path":"content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author-1.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/10/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","path":"content/images/2016/10/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2016/01/meerkat-459171_1920.jpg","path":"content/images/2016/01/meerkat-459171_1920.jpg","modified":0,"renderable":0},{"_id":"source/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif","path":"content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif","modified":0,"renderable":0},{"_id":"source/npm-debug.log","path":"npm-debug.log","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1},{"_id":"source/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg","path":"content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg","modified":1,"renderable":0},{"_id":"source/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png","path":"content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png","modified":1,"renderable":0},{"_id":"source/content/images/2016/12/loige-luciano-mammino-2016-a-year-in-review-blog-post.jpg","path":"content/images/2016/12/loige-luciano-mammino-2016-a-year-in-review-blog-post.jpg","modified":1,"renderable":0},{"_id":"source/content/images/2016/12/luciano-mammino-loige-co-2016-a-year-in-review.png","path":"content/images/2016/12/luciano-mammino-loige-co-2016-a-year-in-review.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"20fff9cdff6a80d02672af960c90ab836ffe6645","modified":1481674688000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1481671094000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1481671094000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1481671094000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1481671094000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1481671094000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1481671094000},{"_id":"source/content/.DS_Store","hash":"f834479180b73aecf8e625bfa7cfc0b48b3bca17","modified":1481674688000},{"_id":"source/_posts/3-invitations-to-try-atom-io.md","hash":"7662673b5194fe8e1f56475cf6a2b8f5ea09c5e8","modified":1481671866000},{"_id":"source/_posts/5-lessons-learned-at-the-bank-of-ireland-accelerator.md","hash":"1dca1cb2366ee4d73d3b96f0e74465b0640c0ba8","modified":1481671866000},{"_id":"source/_posts/8-invitations-to-try-keybase-io.md","hash":"8cdeddb17946e41b27256765598371a94a4e0694","modified":1481671866000},{"_id":"source/_posts/6-rules-of-thumb-to-build-blazing-fast-web-applications.md","hash":"92cf4954a3d17783f0d30e953a5501fa32cfed13","modified":1481671866000},{"_id":"source/_posts/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk.md","hash":"c10b859567a2b7b60fb31308653b925afafe14c3","modified":1481671866000},{"_id":"source/_posts/backup-your-server-with-dropbox.md","hash":"e7297836837abc20fccc9554808f6f73283fa6ed","modified":1481671866000},{"_id":"source/_posts/announcing-the-book-node-js-design-patterns-second-edition.md","hash":"c35df70b07cbfe7145f2c194831c5652fe3d2cd7","modified":1481671866000},{"_id":"source/_posts/developing-a-web-application-with-lumen-and-mysql.md","hash":"62b6ba9b50b160033ae3ecc08979c0bcf89aecde","modified":1481671866000},{"_id":"source/_posts/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands.md","hash":"66dba14e734ffdf0e90280a18b5ff47e495bcd8b","modified":1481671866000},{"_id":"source/_posts/finally-first.md","hash":"3ea91ecdeb86b6798e821434939ca4d747ac9a3c","modified":1481671866000},{"_id":"source/_posts/get-an-invitation-for-gitkraken.md","hash":"b486067fe2359832d9a96d6a9a3befa6f81319ba","modified":1481671866000},{"_id":"source/_posts/having-fun-with-nodejs-slack-and-chuck-norris.md","hash":"be9ba36a838efffe18febd3b3ab523846802a3a9","modified":1481671866000},{"_id":"source/_posts/gulp-and-ftp-update-a-website-on-the-fly.md","hash":"2b93535afd236d97d195df38e30c1646634b5f23","modified":1481671866000},{"_id":"source/_posts/integrating-twig-js-and-bazingajstranslationbundle.md","hash":"8adac470d99e2909e7ef22d6c84f7f8f55b47097","modified":1481671866000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1481671094000},{"_id":"source/_posts/introducing-flickr-set-get-a-command-line-app-to-download-photos.md","hash":"df8f4413525836cb2ff1a98c7029d5baa9753233","modified":1481671866000},{"_id":"source/_posts/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.md","hash":"312a2095740ccbf0ccf462412e6becacc1a6576a","modified":1481671866000},{"_id":"source/_posts/introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects.md","hash":"bf0282c2847b90c7fa5710c1237b089a4a0ccfeb","modified":1481671866000},{"_id":"source/_posts/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way.md","hash":"5d00b96176063edf45ecf50be384a07f7e8bac45","modified":1481671866000},{"_id":"source/_posts/introducing-orm-cheatsheet.md","hash":"aaf69f23b805819b8bb58c9bd34773938614e110","modified":1481671866000},{"_id":"source/_posts/new-php-library-php-oauth-user-data.md","hash":"7f7be0ec5775076ea3800976f8a2721efc92d526","modified":1481671866000},{"_id":"source/_posts/react-on-the-server-for-beginners-build-a-universal-react-and-node-app.md","hash":"28b13ca4a50b4874db412c9e2ac1c579a7a92ac0","modified":1481671866000},{"_id":"source/_posts/reset-your-mysql-server-password.md","hash":"28af37a26a1912136227b13b33317f31d9b55efc","modified":1481671866000},{"_id":"source/_posts/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.md","hash":"c46ec9676d29e91e6a5d35cd42865f10fb35089f","modified":1481671866000},{"_id":"source/_posts/simple-echo-server-written-in-go-dockerized.md","hash":"7cfae2b09e563a2de49c7df6f26e2b5022d24b62","modified":1481671866000},{"_id":"source/_posts/transparent-pixel-response-with-symfony-how-to-track-email-opening.md","hash":"4dcd45d286bc0167d8defe0869b0fa90ad757adb","modified":1481671866000},{"_id":"source/_posts/symfony-security-authentication-made-simple.md","hash":"a7b969cd141314f59007935635350d627b164f63","modified":1481671866000},{"_id":"source/_posts/symfony-edit-the-response-globally-using-the-kernel-response-event.md","hash":"590bc58fac496579a954befb293b4180b7cc9a88","modified":1481671866000},{"_id":"source/_posts/to-promise-or-to-callback-that-is-the-question.md","hash":"18a500b7178c3bc58beb9c08d444b757342df08f","modified":1481671866000},{"_id":"source/_posts/two-interviews-about-node-js-javascript-and-being-a-book-author.md","hash":"fd098272a04245d7de8461a347f5b572367d0935","modified":1481671866000},{"_id":"source/_posts/versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.md","hash":"f655be79ce5017fd963d0652dc0fc75dde422f74","modified":1481671866000},{"_id":"source/_posts/write-a-console-application-using-symfony-and-pimple.md","hash":"49649ff9162aff7a8a6c2a6fe35f9b1afaffa857","modified":1481671866000},{"_id":"source/_posts/writing-a-new-extractor-for-php-oauth-user-data.md","hash":"69811df39b211b26a560d3a3425237d94976f424","modified":1481671866000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1481671094000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1481671094000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1481671094000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1481671094000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1481671094000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1481671094000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481671094000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1481671094000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1481671094000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1481671094000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481671094000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1481671094000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481671094000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481671094000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481671094000},{"_id":"source/content/images/README.md","hash":"7931d6311d06d45002875c2c8624f34cf102fd8d","modified":1481672380000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1481671094000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1481671094000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1481671094000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1481671094000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1481671094000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1481671094000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1481671094000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1481671094000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1481671094000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1481671094000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1481671094000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1481671094000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1481671094000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1481671094000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1481671094000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1481671094000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1481671094000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1481671094000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1481671094000},{"_id":"source/content/images/2014/12/bill-liao.png","hash":"51b52db9edebf6f1acc94f362f7733868ca59b3b","modified":1481672371000},{"_id":"source/content/images/2014/12/daniel-ramamoorthy.png","hash":"51cb8177b0985054b3c1e59443df8465bd1f6059","modified":1481672371000},{"_id":"source/content/images/2014/12/sean-gallagher.png","hash":"fc100808f1d58f1886cc5bf83536e20c81609516","modified":1481672371000},{"_id":"source/content/images/2014/12/sean-o-sullivan.png","hash":"30f055ae7886a3ca3458aa966798e5e0b59b1271","modified":1481672372000},{"_id":"source/content/images/2014/12/wayne-murphy.png","hash":"1f044d95031ebd9dae1b115f55b5e05f7515d744","modified":1481672371000},{"_id":"source/content/images/2014/Jun/go-server-output.png","hash":"eb84ac37422b69281e880e772bbb4f1486f8bca0","modified":1481672372000},{"_id":"source/content/images/2015/04/developing-a-web-application-with-lumen.jpg","hash":"538da6183ea002e6c9f811723ef829dcfcc15666","modified":1481672374000},{"_id":"source/content/images/2015/04/tag-php.png","hash":"18ae93d28657e3afc661e229cf9355018c1b2c87","modified":1481672374000},{"_id":"source/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg","hash":"197201ef8ad61e8f10876632689bd4929e95105b","modified":1481672376000},{"_id":"source/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites.jpg","hash":"cd8f32a12b254cc4aad048a84ed27e9c95979249","modified":1481672376000},{"_id":"source/content/images/2015/09/slacker.png","hash":"fc1910eea751f2df56fe1d757fe882f32c8b7890","modified":1481672376000},{"_id":"source/content/images/2015/09/nodejs-articles.png","hash":"c0ffef8c32ddca8b005567be7872bba8b0af6611","modified":1481672375000},{"_id":"source/content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg","hash":"ee186691aca28961ca0d9a50e1e643e589eb14fb","modified":1481672375000},{"_id":"source/content/images/2015/02/symfony-globally-edit-response-based-on-request.jpg","hash":"8db0133d3e722081a6d0caad8b96cad43c065f04","modified":1481672375000},{"_id":"source/content/images/2015/05/flickr-set-get-requests-diagram.png","hash":"438cde299b937c1fe5fbc33fc6c81f4b8d9d8a1e","modified":1481672373000},{"_id":"source/content/images/2015/05/keybase-io-robot.jpg","hash":"d6afbd625462b797a75938fc4efc636a45ba5b11","modified":1481672373000},{"_id":"source/content/images/2015/07/cache-joke-comic-the-cloud.png","hash":"b6732b9683e5e1f044576bc548ad05d6a6b4cbb3","modified":1481672373000},{"_id":"source/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg","hash":"1cc26cd00a99b5e7e0743fa16ddf014e2e146cdc","modified":1481672374000},{"_id":"source/content/images/2015/07/the_flash_by_fabioyabu.jpg","hash":"76edd48d4eef65d717f9a5c16421180faf144266","modified":1481672373000},{"_id":"source/content/images/2015/10/gulp-is-the-streaming-web-build-system.png","hash":"fdfc577405b67376aaf9f1a8c7dd6423890713ea","modified":1481672376000},{"_id":"source/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png","hash":"42809cdb1387ae2a373577cd916c95ebb62ff204","modified":1481672380000},{"_id":"source/content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","hash":"bdff9069871df2f626daedce78bf423822399973","modified":1481672378000},{"_id":"source/content/images/2016/08/extracting-data-from-wikipedia-using-curl-grep-and-other-bash-commands-judo-teddy-riner.jpg","hash":"0917363028dcef66d1828c171591e36d4927bbd2","modified":1481672378000},{"_id":"source/content/images/2016/08/ryoko-tani-universal-javascript-nodejs-react-luciano-mammino-cover.jpg","hash":"8e08c3a16bd4f7eb494f6f3d2e7a250762c1a32b","modified":1481672378000},{"_id":"source/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png","hash":"ff4248175950608b82824ae697c637aab326fe86","modified":1481672378000},{"_id":"source/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg","hash":"01d66fc5aed76f4bb47e167a9be94d06cdc69fdd","modified":1481672378000},{"_id":"source/content/images/2014/Feb/symfony_security_component_authentication_flow.png","hash":"64394674c9e77028cd5449a318e2197d7f62f799","modified":1481672372000},{"_id":"source/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf","hash":"f7f54e6c3b683dbeb96ecb3e31b12aa9a61f8965","modified":1481672372000},{"_id":"source/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png","hash":"2b778b7a9aea55bb81be9126ed87ff29cabbe927","modified":1481672371000},{"_id":"source/content/images/2015/04/motivation-quote-app-screenshoot.jpg","hash":"18f1d654cdaf37c8d3cb150b73846b901e3b6f93","modified":1481672374000},{"_id":"source/content/images/2015/04/tag-javascript.jpg","hash":"9534c5d3f587cbb4190a2b6bbaf4900dc0733cd6","modified":1481672375000},{"_id":"source/content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg","hash":"a54340f0e78e6f9e5e396f8aa339aefb10bc15ba","modified":1481672375000},{"_id":"source/content/images/2015/05/8-invitations-to-try-keybase-io.jpg","hash":"7af4f5bf356e29d604464dcd74e72ae0b29fcd94","modified":1481672373000},{"_id":"source/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png","hash":"edf6beb493e3dea04fc9a97bd96edc84bbc38ba9","modified":1481672372000},{"_id":"source/content/images/2015/07/flash-gordon-fast-code.png","hash":"7c74c4099e36c9107d681f2e511c7b77f4d16d1c","modified":1481672374000},{"_id":"source/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg","hash":"7e8a55fbd53c4546c9af001d9085c3d8cef08b05","modified":1481672373000},{"_id":"source/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon.jpg","hash":"e0d44b22149ef57baa11823a71eda2e00b56ed12","modified":1481672373000},{"_id":"source/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png","hash":"e6256e607db7668f713fd5d4a90e56414e0598fe","modified":1481672374000},{"_id":"source/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg","hash":"22ff1152c6e17e2eb24c494cd2335a0c313c5c3c","modified":1481672379000},{"_id":"source/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens-part2.png","hash":"63b124d594168beb5e9c34bc77ade580c45ebea2","modified":1481672379000},{"_id":"source/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg","hash":"931d58acc9c3b0b3e4c16082978d950af86a1384","modified":1481672379000},{"_id":"source/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection.jpg","hash":"f9c2e428965930d4a2a7cf06efab0144f5987623","modified":1481672378000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1481671094000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1481671094000},{"_id":"source/content/images/2014/Jun/dockerize-go-app.png","hash":"9de42638f553382eaaa23c206ed5307fa668d63f","modified":1481672372000},{"_id":"source/content/images/2014/Jun/Schermata-2014-06-11-alle-10-32-07.png","hash":"75355e056da4e6dbd7a5e58388d2c9e22b0f342e","modified":1481672372000},{"_id":"source/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png","hash":"ad8cee92cbe691bf28ed22c702133a41a8955f3c","modified":1481672370000},{"_id":"source/content/images/2014/Apr/orm-cheatsheet-screenshoot.png","hash":"60a87b12c9c39ff17de86376d6792ee6921a67af","modified":1481672370000},{"_id":"source/content/images/2014/Mar/password_reset.jpg","hash":"793ccdd542b932815d5fb2fe4c8033b0556f7300","modified":1481672371000},{"_id":"source/content/images/2015/04/tag-symfony.jpg","hash":"91628fa16f04155336dbc95d6799d8f963e9e879","modified":1481672375000},{"_id":"source/content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg","hash":"ec8d74cd8f1d663ad19048168c505cc93f7e974e","modified":1481672375000},{"_id":"source/content/images/2015/09/mongo-uri-builder-article-sample-image.jpg","hash":"f38f390fcaef6f365eb99661ec77d2e77d880043","modified":1481672376000},{"_id":"source/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png","hash":"bb9f5103c4a0d8c52c18fd68be8cf6dafb494cec","modified":1481672375000},{"_id":"source/content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg","hash":"9eed218ed0e429fbba74f1ffde854a58e84d327f","modified":1481672373000},{"_id":"source/content/images/2015/07/google-golang-language-posts.jpg","hash":"92c513721f5476340adddd964a33e73cedbb496a","modified":1481672374000},{"_id":"source/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png","hash":"84e9ee6b3c1d9a032daace7319b12459abcf2774","modified":1481672380000},{"_id":"source/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg","hash":"e84f411f98f86bbf8f02aafd8ca9d07d5c870d99","modified":1481672377000},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png","hash":"149d5ea23d3188b03137decce114e25b5fd5d3f5","modified":1481672379000},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small.png","hash":"149d5ea23d3188b03137decce114e25b5fd5d3f5","modified":1481672380000},{"_id":"source/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png","hash":"678ffc3d654473dd9c9985dbf19fcd79293afe94","modified":1481672378000},{"_id":"source/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png","hash":"5466bc2f349bdde901f6a9bf3c6ebb9ee88dacb9","modified":1481672378000},{"_id":"source/content/images/2016/11/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.jpg","hash":"4629addfa7f839727c52f66d5e87e298b6820704","modified":1481672379000},{"_id":"source/content/images/2014/Mar/DSCN8506.jpg","hash":"cb906be8ed25c492681d8b5584715905cf2a0747","modified":1481672371000},{"_id":"source/content/images/2015/07/i-just-do-things-joker-meme.gif","hash":"40fd5c5aa74e2af309293acd1a8bb1d23ea3427a","modified":1481672374000},{"_id":"source/content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly.png","hash":"3f95a0472eb5dc6ad62018cc2605ec5829db179d","modified":1481672376000},{"_id":"source/content/images/2016/07/announcing-the-book-node-js-design-patterns-second-edition.jpg","hash":"858648ebe8f8aa5e49e1376c74ab4bae438fd0eb","modified":1481672377000},{"_id":"source/content/images/2016/08/scotch-featured-image-react-on-the-server.png","hash":"37141c37a6ff279b8f5b53060519d923f9102919","modified":1481672378000},{"_id":"source/content/images/2014/Jun/email-tracking.png","hash":"eda987a1a904a768c218557a6d1542707ba125af","modified":1481672372000},{"_id":"source/content/images/2016/02/to-promise-or-to-callback-this-is-the-problem-loige-amlet-arnold-schwarzenegger-javascript.png","hash":"2e6bea8a6b26fddf3c046ab9e2003a8f7217fef4","modified":1481672377000},{"_id":"source/content/images/2016/01/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png","hash":"75522a6766dd2f68a28a22624ee2696a2e4d20f3","modified":1481672379000},{"_id":"source/content/images/2014/Jan/1489602_10152103253343276_1827786975_o.jpg","hash":"3dafa7acccb5888f81615183defac45b21ec25e8","modified":1481672371000},{"_id":"source/content/images/2015/07/rules-of-thumb-to-build-a-blazing-fast-web-applications.jpg","hash":"68d6097923368be20002779c4b3d93e63caefade","modified":1481672374000},{"_id":"source/content/images/2016/03/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk-min.jpg","hash":"9bb92de24dbe86b5defc81e8a802812572a3fbf9","modified":1481672377000},{"_id":"source/content/images/2016/10/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.jpg","hash":"8e369d5c2d59fd2b92515b61b4c486fba3843d39","modified":1481672379000},{"_id":"source/content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly-1.png","hash":"1e5dd1d6caf011b291843ba35f9bfb82ebd82cef","modified":1481672377000},{"_id":"source/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png","hash":"7ef1d0e3e2bb5d3cb58f9f1092a8648ff2f93185","modified":1481672379000},{"_id":"source/content/images/2014/12/boi-1.png","hash":"cff7c067c930cb0a37b89d3869691f00b70434c1","modified":1481672371000},{"_id":"source/content/images/2014/12/boi.png","hash":"9a441050b8ff47c955b8037327b8af6be7089c6f","modified":1481672372000},{"_id":"source/content/images/2016/09/two-interviews-about-node-js-javascript-and-being-a-book-author-1.jpg","hash":"c98d3a5db86ef79cd44f0fc3831fb5797a03ae1a","modified":1481672378000},{"_id":"source/content/images/2016/10/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","hash":"c98d3a5db86ef79cd44f0fc3831fb5797a03ae1a","modified":1481672379000},{"_id":"source/content/images/2016/01/meerkat-459171_1920.jpg","hash":"c914a5a8ca9cae1712844a154e8de0f3d2db7ed2","modified":1481672380000},{"_id":"source/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif","hash":"f4be201109b4875e2902dd2dd1715682891c70ca","modified":1481672376000},{"_id":"source/npm-debug.log","hash":"269a84af725f73937381f22705b0603e392517cc","modified":1483021518000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1483021913000},{"_id":"themes/clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1483021913000},{"_id":"themes/clean-blog/_config.yml","hash":"6be9e191fc8b00fed25ddb4acf9a3cfb8dc11200","modified":1483021913000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483021913000},{"_id":"themes/clean-blog/.git/config","hash":"a48b0c6da8f4e158f9f6700887c12792157eaaf9","modified":1483021913000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483021907000},{"_id":"themes/clean-blog/.git/index","hash":"1e678f9149ac72ae55fd67d479bdd597915a0ea0","modified":1483021913000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"1dadbd4fdd53bbb7038fa2c7b3c71cd028c4ead4","modified":1483021913000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1483021913000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1483021913000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1483021913000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1483021913000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1483021913000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1483021913000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1483021913000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1483021913000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1483021913000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1483021913000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1483021913000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1483021913000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1483021913000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1483021913000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1483021913000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1483021913000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483021907000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483021907000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1483021907000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"30882b36cdc681b813772b91af9c1e475359cc54","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"8d63ce240bbcc850b5d438d1f45ad9441ac1c9cc","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3a7eb32f2cc540746c9e11010a4513b832743d1e","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1483021913000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1483021913000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1483021913000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"f0a6fcf58fe515e1359acde0ed34081f580ec7a3","modified":1483021913000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1483021913000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1483021913000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1483021913000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1483021913000},{"_id":"themes/clean-blog/.git/objects/pack/pack-f537c759adda5034d212eb8616856b44498093e5.idx","hash":"ce6e9db4de7e43a6aecbf5cd8148348108b7dfa7","modified":1483021913000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"cce37529c01e70f25e6266bf6fb91c4c88b2f9fb","modified":1483021913000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1483021913000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"30882b36cdc681b813772b91af9c1e475359cc54","modified":1483021913000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483021913000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1483021913000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"30882b36cdc681b813772b91af9c1e475359cc54","modified":1483021913000},{"_id":"themes/clean-blog/.git/objects/pack/pack-f537c759adda5034d212eb8616856b44498093e5.pack","hash":"0f64f41595b62a596185d72899b0043d87c7e50d","modified":1483021913000},{"_id":"source/_posts/2016-a-year-in-review.md","hash":"73aaaee4f64e9949c3361b4c188cf56d4aee5407","modified":1483022799000},{"_id":"source/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg","hash":"4aaa2c9363b8c9fb96cc3454e6ea62852b3b833c","modified":1483023243000},{"_id":"source/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png","hash":"9a14afa912898e0339a138ba415f2e57086cc995","modified":1483023243000},{"_id":"source/content/images/2016/12/loige-luciano-mammino-2016-a-year-in-review-blog-post.jpg","hash":"07b8fdedbd99ec34d9d99a597082f660df2c4a90","modified":1483023244000},{"_id":"source/content/images/2016/12/luciano-mammino-loige-co-2016-a-year-in-review.png","hash":"10f0dd97c642367d4b7023cc2bb08fdf60a35141","modified":1483023245000}],"Category":[],"Data":[],"Page":[{"_content":"# Content / Images\n\nIf using the standard file storage, Ghost will upload images to this directory.","source":"content/images/README.md","raw":"# Content / Images\n\nIf using the standard file storage, Ghost will upload images to this directory.","date":"2016-12-13T23:39:40.000Z","updated":"2016-12-13T23:39:40.000Z","path":"content/images/README.html","title":"","comments":1,"layout":"page","_id":"cixaggs29006usvvuozipy5nb","content":"<h1 id=\"Content-Images\"><a href=\"#Content-Images\" class=\"headerlink\" title=\"Content / Images\"></a>Content / Images</h1><p>If using the standard file storage, Ghost will upload images to this directory.</p>\n","excerpt":"","more":"<h1 id=\"Content-Images\"><a href=\"#Content-Images\" class=\"headerlink\" title=\"Content / Images\"></a>Content / Images</h1><p>If using the standard file storage, Ghost will upload images to this directory.</p>\n"}],"Post":[{"uuid":"f1da9e6a-ad1d-422f-91a0-25afe4aad30b","layout":"post","title":"3 invitations to try Atom.io","slug":"3-invitations-to-try-atom-io","subtitle":null,"date":"2014-04-09T10:58:22.000Z","updated":"2016-01-19T22:37:15.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nI have finally got my invitation to try the new text editor [Atom.io](https://atom.io). Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous [SublimeText](http://www.sublimetext.com/).\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.\n\n![Atom.io screenshoot](/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png)\n\nThe point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.\n\nI would be glad to **share the invitations** with the first 3 readers who would **follow me** on [GitHub](https://github.com/lmammino) or [Twitter](https://twitter.com/loige) **and write a comment** on this post.\n\nPS: You would probably need a GitHub account!\n\n**UPDATE**, April 12: \nSorry guys, my invitations have gone for now.\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.\n\nHope you will enjoy it.\n","source":"_posts/3-invitations-to-try-atom-io.md","raw":"uuid:             f1da9e6a-ad1d-422f-91a0-25afe4aad30b\nlayout:           post\ntitle:            '3 invitations to try Atom.io'\nslug:             3-invitations-to-try-atom-io\nsubtitle:         null\ndate:             '2014-04-09T10:58:22.000Z'\nupdated:          '2016-01-19T22:37:15.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Atom.io\n\n---\n\nI have finally got my invitation to try the new text editor [Atom.io](https://atom.io). Atom is built with web technologies (node.js in it's core) by the folks at GitHub and it's somewhat very similar to the famous [SublimeText](http://www.sublimetext.com/).\nIn my opinion it seems very promising (even if it's significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.\n\n![Atom.io screenshoot](/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png)\n\nThe point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.\n\nI would be glad to **share the invitations** with the first 3 readers who would **follow me** on [GitHub](https://github.com/lmammino) or [Twitter](https://twitter.com/loige) **and write a comment** on this post.\n\nPS: You would probably need a GitHub account!\n\n**UPDATE**, April 12: \nSorry guys, my invitations have gone for now.\nAnyway it seems that GitHub distributes other invitations sometime. So if you haven't been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.\n\nHope you will enjoy it.\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrxr0000svvuv82fp6z4","content":"<p>I have finally got my invitation to try the new text editor <a href=\"https://atom.io\" target=\"_blank\" rel=\"external\">Atom.io</a>. Atom is built with web technologies (node.js in it’s core) by the folks at GitHub and it’s somewhat very similar to the famous <a href=\"http://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">SublimeText</a>.<br>In my opinion it seems very promising (even if it’s significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.</p>\n<p><img src=\"/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png\" alt=\"Atom.io screenshoot\"></p>\n<p>The point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.</p>\n<p>I would be glad to <strong>share the invitations</strong> with the first 3 readers who would <strong>follow me</strong> on <a href=\"https://github.com/lmammino\" target=\"_blank\" rel=\"external\">GitHub</a> or <a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">Twitter</a> <strong>and write a comment</strong> on this post.</p>\n<p>PS: You would probably need a GitHub account!</p>\n<p><strong>UPDATE</strong>, April 12:<br>Sorry guys, my invitations have gone for now.<br>Anyway it seems that GitHub distributes other invitations sometime. So if you haven’t been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.</p>\n<p>Hope you will enjoy it.</p>\n","excerpt":"","more":"<p>I have finally got my invitation to try the new text editor <a href=\"https://atom.io\">Atom.io</a>. Atom is built with web technologies (node.js in it’s core) by the folks at GitHub and it’s somewhat very similar to the famous <a href=\"http://www.sublimetext.com/\">SublimeText</a>.<br>In my opinion it seems very promising (even if it’s significantly slower than SublimeText), anyway I have to try it a lot more before shaping a serious opinion about it.</p>\n<p><img src=\"/content/images/2014/Apr/Schermata-2014-04-09-alle-12-55-17.png\" alt=\"Atom.io screenshoot\"></p>\n<p>The point of this topic is that Atom.io is currently in closed beta and I have received 3 invitations to share with whom is willing to try it.</p>\n<p>I would be glad to <strong>share the invitations</strong> with the first 3 readers who would <strong>follow me</strong> on <a href=\"https://github.com/lmammino\">GitHub</a> or <a href=\"https://twitter.com/loige\">Twitter</a> <strong>and write a comment</strong> on this post.</p>\n<p>PS: You would probably need a GitHub account!</p>\n<p><strong>UPDATE</strong>, April 12:<br>Sorry guys, my invitations have gone for now.<br>Anyway it seems that GitHub distributes other invitations sometime. So if you haven’t been in time you can still write a comment and if I ever manage to have other invites i will follow the order of the order to share them with you.</p>\n<p>Hope you will enjoy it.</p>\n"},{"uuid":"225370dd-3f1f-4705-a24b-4931123739ed","layout":"post","title":"8 invitations to try Keybase.io","slug":"8-invitations-to-try-keybase-io","subtitle":null,"date":"2015-05-26T22:25:45.000Z","updated":"2015-05-27T11:22:09.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/05/8-invitations-to-try-keybase-io.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nHello dear developers,\ntoday I finally got my invitation to access the private beta of [Keybase.io](https://keybase.io)! 😎 🎉\nFor those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it's not just this, it's also a *\"directory of people\"*, as they like to say. It's like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it...\n\n![Keybase.io illustration](/content/images/2015/05/keybase-io-robot.jpg)\n...and furthermore the website is full of wonderful illustrations a-la-Dropbox :D\n\n## A quick demo\n\nJust to give you a practical idea of how it works, let's suppose I want to send a super-secret message to my twitter friend Daniel Li ([@d4nyll](https://twitter.com/d4nyll)).\nOnce I have the Keybase command line app installed (and configured) I can just run:\n\n```bash\n$ keybase encrypt twitter://d4nyll -m \"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"\n```\n\nand it will print out a weird message that only Daniel, with his private key will be able to decrypt:\n\n```\n-----BEGIN PGP MESSAGE-----\nComment: GPGTools - https://gpgtools.org\n\nhQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI\npc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S\nD4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ\n80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS\nZ3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2\nquAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j\nUdc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3\ntn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt\nY+yURG9sqr92QGVDLX/x\n=mmvL\n-----END PGP MESSAGE-----\n```\n\nNow I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.\n\nDaniel will be able to easily decrypt the message through the same command line app or though the Keybase website.\n\nThe clear advantage is that I don't need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.\n\nIt's still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of [APIs](https://keybase.io/docs/api/1.0) that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.\n\nThe command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.\n\n## Do you want to give it a try?\nAs you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven't already received your **I have 8 invite code that I am willing to share**. They go to the **first 8 persons who will leave a comment*** here 😉\n\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\">\n    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br/>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.\n</div>\n\nWhat are you waiting for?\n\nPS: In case you want to \"Track\" (verify+follow) me on Keybase, check out [my Keybase profile](https://keybase.io/loige).\n","source":"_posts/8-invitations-to-try-keybase-io.md","raw":"uuid:             225370dd-3f1f-4705-a24b-4931123739ed\nlayout:           post\ntitle:            '8 invitations to try Keybase.io'\nslug:             8-invitations-to-try-keybase-io\nsubtitle:         null\ndate:             '2015-05-26T22:25:45.000Z'\nupdated:          '2015-05-27T11:22:09.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/05/8-invitations-to-try-keybase-io.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Security\n  - Cryptography\n\n---\n\nHello dear developers,\ntoday I finally got my invitation to access the private beta of [Keybase.io](https://keybase.io)! 😎 🎉\nFor those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it's not just this, it's also a *\"directory of people\"*, as they like to say. It's like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it...\n\n![Keybase.io illustration](/content/images/2015/05/keybase-io-robot.jpg)\n...and furthermore the website is full of wonderful illustrations a-la-Dropbox :D\n\n## A quick demo\n\nJust to give you a practical idea of how it works, let's suppose I want to send a super-secret message to my twitter friend Daniel Li ([@d4nyll](https://twitter.com/d4nyll)).\nOnce I have the Keybase command line app installed (and configured) I can just run:\n\n```bash\n$ keybase encrypt twitter://d4nyll -m \"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"\n```\n\nand it will print out a weird message that only Daniel, with his private key will be able to decrypt:\n\n```\n-----BEGIN PGP MESSAGE-----\nComment: GPGTools - https://gpgtools.org\n\nhQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI\npc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S\nD4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ\n80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS\nZ3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2\nquAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j\nUdc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3\ntn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt\nY+yURG9sqr92QGVDLX/x\n=mmvL\n-----END PGP MESSAGE-----\n```\n\nNow I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.\n\nDaniel will be able to easily decrypt the message through the same command line app or though the Keybase website.\n\nThe clear advantage is that I don't need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.\n\nIt's still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of [APIs](https://keybase.io/docs/api/1.0) that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.\n\nThe command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.\n\n## Do you want to give it a try?\nAs you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven't already received your **I have 8 invite code that I am willing to share**. They go to the **first 8 persons who will leave a comment*** here 😉\n\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\">\n    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br/>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.\n</div>\n\nWhat are you waiting for?\n\nPS: In case you want to \"Track\" (verify+follow) me on Keybase, check out [my Keybase profile](https://keybase.io/loige).\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrxv0001svvudg44cuun","content":"<p>Hello dear developers,<br>today I finally got my invitation to access the private beta of <a href=\"https://keybase.io\" target=\"_blank\" rel=\"external\">Keybase.io</a>! 😎 🎉<br>For those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it’s not just this, it’s also a <em>“directory of people”</em>, as they like to say. It’s like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it…</p>\n<p><img src=\"/content/images/2015/05/keybase-io-robot.jpg\" alt=\"Keybase.io illustration\"><br>…and furthermore the website is full of wonderful illustrations a-la-Dropbox :D</p>\n<h2 id=\"A-quick-demo\"><a href=\"#A-quick-demo\" class=\"headerlink\" title=\"A quick demo\"></a>A quick demo</h2><p>Just to give you a practical idea of how it works, let’s suppose I want to send a super-secret message to my twitter friend Daniel Li (<a href=\"https://twitter.com/d4nyll\" target=\"_blank\" rel=\"external\">@d4nyll</a>).<br>Once I have the Keybase command line app installed (and configured) I can just run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ keybase encrypt twitter://d4nyll -m <span class=\"string\">\"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"</span></div></pre></td></tr></table></figure>\n<p>and it will print out a weird message that only Daniel, with his private key will be able to decrypt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN PGP MESSAGE-----</div><div class=\"line\">Comment: GPGTools - https://gpgtools.org</div><div class=\"line\"></div><div class=\"line\">hQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI</div><div class=\"line\">pc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S</div><div class=\"line\">D4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ</div><div class=\"line\">80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS</div><div class=\"line\">Z3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2</div><div class=\"line\">quAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j</div><div class=\"line\">Udc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3</div><div class=\"line\">tn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt</div><div class=\"line\">Y+yURG9sqr92QGVDLX/x</div><div class=\"line\">=mmvL</div><div class=\"line\">-----END PGP MESSAGE-----</div></pre></td></tr></table></figure>\n<p>Now I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.</p>\n<p>Daniel will be able to easily decrypt the message through the same command line app or though the Keybase website.</p>\n<p>The clear advantage is that I don’t need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.</p>\n<p>It’s still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of <a href=\"https://keybase.io/docs/api/1.0\" target=\"_blank\" rel=\"external\">APIs</a> that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.</p>\n<p>The command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.</p>\n<h2 id=\"Do-you-want-to-give-it-a-try\"><a href=\"#Do-you-want-to-give-it-a-try\" class=\"headerlink\" title=\"Do you want to give it a try?\"></a>Do you want to give it a try?</h2><p>As you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven’t already received your <strong>I have 8 invite code that I am willing to share</strong>. They go to the <strong>first 8 persons who will leave a comment*</strong> here 😉</p>\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\"><br>    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.<br></div>\n\n<p>What are you waiting for?</p>\n<p>PS: In case you want to “Track” (verify+follow) me on Keybase, check out <a href=\"https://keybase.io/loige\" target=\"_blank\" rel=\"external\">my Keybase profile</a>.</p>\n","excerpt":"","more":"<p>Hello dear developers,<br>today I finally got my invitation to access the private beta of <a href=\"https://keybase.io\">Keybase.io</a>! 😎 🎉<br>For those who are not aware of this new service, Keybase.io is a website and a command line application that makes easier to adopt asymmetric cryptography to encrypt and authenticate messages. But it’s not just this, it’s also a <em>“directory of people”</em>, as they like to say. It’s like a social network, where everyone can easily share its public key and attach it to its social profiles (like Twitter, Github or Reddit). You can also pair your bitcoin address with it…</p>\n<p><img src=\"/content/images/2015/05/keybase-io-robot.jpg\" alt=\"Keybase.io illustration\"><br>…and furthermore the website is full of wonderful illustrations a-la-Dropbox :D</p>\n<h2 id=\"A-quick-demo\"><a href=\"#A-quick-demo\" class=\"headerlink\" title=\"A quick demo\"></a>A quick demo</h2><p>Just to give you a practical idea of how it works, let’s suppose I want to send a super-secret message to my twitter friend Daniel Li (<a href=\"https://twitter.com/d4nyll\">@d4nyll</a>).<br>Once I have the Keybase command line app installed (and configured) I can just run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ keybase encrypt twitter://d4nyll -m <span class=\"string\">\"Hey pal, I finally crafted the perfect plan to rule this World. Give me a ring\"</span></div></pre></td></tr></table></figure>\n<p>and it will print out a weird message that only Daniel, with his private key will be able to decrypt:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN PGP MESSAGE-----</div><div class=\"line\">Comment: GPGTools - https://gpgtools.org</div><div class=\"line\"></div><div class=\"line\">hQEMA8ev5aoujuM4AQgAo5xTWEBmso9cNpAt4e9W854dq9LPR6pB3LoBTAKO8QBI</div><div class=\"line\">pc/+UWezWCX49SX4zO2omrqRCMrtNy4UAeU9WyAxGQDTIRGcmiOM0p+JuInG9P2S</div><div class=\"line\">D4YCz2HwX6p7/P3gLuRpqU8VteInXWeIAFFj7piaCZSeHG8w1/wiPhx46GjByqUJ</div><div class=\"line\">80dzrew7o0bxg3Fi5uuFlnKEIOMUgjMWbCGEBArvdeGO1XElrSMU475klUfrvFyS</div><div class=\"line\">Z3106Np2VMDdIfQEbpomCBjqj+woc36Cfbx3aPzI8Gi+dmYd3zP8PsMgjcbIuxb2</div><div class=\"line\">quAzUtQwcJIAKR35E4l0OUzC0sCNLgddUCLqCoBCttJ+AWeGsGx+PlVWpXTVOr+j</div><div class=\"line\">Udc+wIYvblTxaogQVJLSl8HF/9321gp3duPF9CKWinbQfw6Rh7UQX6JoRaXBgVo3</div><div class=\"line\">tn2k+/Iq1gDZhyoeAq7pSGzV0J3GPPiY+SVbmjjzQIftW7pvuIhDT1iKKMloUyyt</div><div class=\"line\">Y+yURG9sqr92QGVDLX/x</div><div class=\"line\">=mmvL</div><div class=\"line\">-----END PGP MESSAGE-----</div></pre></td></tr></table></figure>\n<p>Now I just need to copy and paste this message to Daniel through Skype, an email, Slack or whatever.</p>\n<p>Daniel will be able to easily decrypt the message through the same command line app or though the Keybase website.</p>\n<p>The clear advantage is that I don’t need to go around and find a person public key every time I want to send an encrypted message to someone. With Keybase I just have to remember his username from Twitter, Github or whatever.</p>\n<p>It’s still a little bit boring that I have to transfer my message manually, but the Keybase team has already developed a set of <a href=\"https://keybase.io/docs/api/1.0\">APIs</a> that, I guess, makes possible to fill the gap in terms of integration with other messaging apps.</p>\n<p>The command line application has a lot of other handy features like messages certification and verification (signature) and in case you dislike the command line (which is unlikely if you are reading this blog), you can do pretty much everything directly on the website.</p>\n<h2 id=\"Do-you-want-to-give-it-a-try\"><a href=\"#Do-you-want-to-give-it-a-try\" class=\"headerlink\" title=\"Do you want to give it a try?\"></a>Do you want to give it a try?</h2><p>As you probably have guessed from the title of this post and the first paragraph Keybase is still in private beta and you need an invite to use it. If you haven’t already received your <strong>I have 8 invite code that I am willing to share</strong>. They go to the <strong>first 8 persons who will leave a comment*</strong> here 😉</p>\n<div style=\"background:rgb(226, 114, 114); color: #fff; padding: 1em; margin: 1em\"><br>    <strong>Update (27 may 2015 12:20 GMT)</strong>: Invites are over :( <br/>I will try to request new ones. If you want you can keep commenting and I will give new eventual invites in the order of entry.<br></div>\n\n<p>What are you waiting for?</p>\n<p>PS: In case you want to “Track” (verify+follow) me on Keybase, check out <a href=\"https://keybase.io/loige\">my Keybase profile</a>.</p>\n"},{"uuid":"bde6d699-c5aa-4efb-aa3e-0fcdddfd522b","layout":"post","title":"5 lessons learned at the Bank of Ireland Accelerator","slug":"5-lessons-learned-at-the-bank-of-ireland-accelerator","subtitle":null,"date":"2014-12-22T21:23:58.000Z","updated":"2014-12-24T10:43:15.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2014/12/boi-1.png","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\n**What a hell of 3 months!** \n\nDuring the last 3 months I haven't got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup [Sbaam](http://sbaam.com). There I spent 3 incredible months with a huge amount of lessons learned about **startups** and **entrepreneurship**. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.\n\n<small>Consider this is my first \"non technical\" post with a lot of english written text. You'll probalby find it plenty of mistakes, so feel free to [send me an email](mailto:loige@hotmail.com) and help me to improve it (and improve my english too :P)</small>\n\n\n##1. Being an entrepreneur is hell\n\n<img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Welcome... to hell!\"</p>\n<p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\">@liaonet</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.\n\nYes, it may sound trivial but it's true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!\n\nEntrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!\n\nAnd, speaking about entrepreneurs' earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it's your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day **you are the \"number one\" investor of your company**.\n\n\n##2. Understand who you are, what you want to accomplish but don't forget about your customers\n\n<img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Nail it and then scale it! Find your first 100 happy customers and really understand them\"</p>\n<p> – Sean O'Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\">@sosventures</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nSean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers!\nIt's crucial to understand what you are doing and what your customers need. You shouldn't really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.\n\n**Start small**. Find a niche and try to grasp what's the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that's the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.\n\n\n##3. Passion breaks the point!\n\n<img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive\"</p>\n<p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\">@mynameisdanram</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nDaniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.\n\nGreat success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing.\nYou will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.\n\nThere will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what's the best way for you to release the stress and be ready to start again.\n\nDaniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.\n\n##4. Surround yourself with great people\n\n<img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You are the average of the five people you spend most time with\"</p>\n<p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\">@seangallagher1</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nNobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends.\nThe fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.\n\nThis obviously applies also to your business: **team, team, team**! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.\n\nJust imagine what can happen to your business if your core team is not the right one...\n\n\n##5. You should work really hard if you want to look as good as a swan!\n\n<img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum\"</p>\n<p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\">@waynemurphy77</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is really a great metaphor. I simply loved it.\nI have two different interpretation of it.\n\nThe first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can't fake it, you have to earn it!\n\nMy second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don't make the mistake to relax at the first goal reached, but immediately look at the next one and do what's needed to reach it, immediately! \n\n\n## Conclusion\n\nThese three months have been probably the best of my life in terms of learning and experience, so **I have to say a huge \"thank you\" to everyone that made this possible**.\n\nSecondly i'd like to have your opinion and interpretation of all this quotes. Feel free to **leave a comment and tell me which one of these five lessons you liked most**.\n","source":"_posts/5-lessons-learned-at-the-bank-of-ireland-accelerator.md","raw":"uuid:             bde6d699-c5aa-4efb-aa3e-0fcdddfd522b\nlayout:           post\ntitle:            '5 lessons learned at the Bank of Ireland Accelerator'\nslug:             5-lessons-learned-at-the-bank-of-ireland-accelerator\nsubtitle:         null\ndate:             '2014-12-22T21:23:58.000Z'\nupdated:          '2014-12-24T10:43:15.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2014/12/boi-1.png\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Startup\n  - Entrepreneurship\n\n---\n\n**What a hell of 3 months!** \n\nDuring the last 3 months I haven't got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup [Sbaam](http://sbaam.com). There I spent 3 incredible months with a huge amount of lessons learned about **startups** and **entrepreneurship**. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.\n\n<small>Consider this is my first \"non technical\" post with a lot of english written text. You'll probalby find it plenty of mistakes, so feel free to [send me an email](mailto:loige@hotmail.com) and help me to improve it (and improve my english too :P)</small>\n\n\n##1. Being an entrepreneur is hell\n\n<img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Welcome... to hell!\"</p>\n<p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\">@liaonet</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.\n\nYes, it may sound trivial but it's true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!\n\nEntrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!\n\nAnd, speaking about entrepreneurs' earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it's your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day **you are the \"number one\" investor of your company**.\n\n\n##2. Understand who you are, what you want to accomplish but don't forget about your customers\n\n<img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"Nail it and then scale it! Find your first 100 happy customers and really understand them\"</p>\n<p> – Sean O'Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\">@sosventures</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nSean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers!\nIt's crucial to understand what you are doing and what your customers need. You shouldn't really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.\n\n**Start small**. Find a niche and try to grasp what's the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that's the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.\n\n\n##3. Passion breaks the point!\n\n<img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive\"</p>\n<p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\">@mynameisdanram</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nDaniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.\n\nGreat success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing.\nYou will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.\n\nThere will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what's the best way for you to release the stress and be ready to start again.\n\nDaniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.\n\n##4. Surround yourself with great people\n\n<img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You are the average of the five people you spend most time with\"</p>\n<p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\">@seangallagher1</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nNobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends.\nThe fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.\n\nThis obviously applies also to your business: **team, team, team**! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.\n\nJust imagine what can happen to your business if your core team is not the right one...\n\n\n##5. You should work really hard if you want to look as good as a swan!\n\n<img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/>\n<blockquote style=\"float:left; width: 70%\">\n<p>\"You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum\"</p>\n<p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\">@waynemurphy77</a>)</p>\n</blockquote>\n<div style=\"clear:both\"></div>\n\nThis is really a great metaphor. I simply loved it.\nI have two different interpretation of it.\n\nThe first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can't fake it, you have to earn it!\n\nMy second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don't make the mistake to relax at the first goal reached, but immediately look at the next one and do what's needed to reach it, immediately! \n\n\n## Conclusion\n\nThese three months have been probably the best of my life in terms of learning and experience, so **I have to say a huge \"thank you\" to everyone that made this possible**.\n\nSecondly i'd like to have your opinion and interpretation of all this quotes. Feel free to **leave a comment and tell me which one of these five lessons you liked most**.\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggry00003svvuezfykvw1","content":"<p><strong>What a hell of 3 months!</strong> </p>\n<p>During the last 3 months I haven’t got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup <a href=\"http://sbaam.com\" target=\"_blank\" rel=\"external\">Sbaam</a>. There I spent 3 incredible months with a huge amount of lessons learned about <strong>startups</strong> and <strong>entrepreneurship</strong>. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.</p>\n<p><small>Consider this is my first “non technical” post with a lot of english written text. You’ll probalby find it plenty of mistakes, so feel free to <a href=\"mailto:loige@hotmail.com\" target=\"_blank\" rel=\"external\">send me an email</a> and help me to improve it (and improve my english too :P)</small></p>\n<p>##1. Being an entrepreneur is hell</p>\n<p><img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"></p>\n<p><blockquote style=\"float:left; width: 70%\"></blockquote></p>\n<p></p><p>“Welcome… to hell!”</p><p></p>\n<p></p><p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\" target=\"_blank\" rel=\"external\">@liaonet</a>)</p><br><p></p>\n<div style=\"clear:both\"></div>\n\n<p>This is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.</p>\n<p>Yes, it may sound trivial but it’s true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!</p>\n<p>Entrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!</p>\n<p>And, speaking about entrepreneurs’ earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it’s your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day <strong>you are the “number one” investor of your company</strong>.</p>\n<p>##2. Understand who you are, what you want to accomplish but don’t forget about your customers</p>\n<p><img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"></p>\n<p><blockquote style=\"float:left; width: 70%\"></blockquote></p>\n<p></p><p>“Nail it and then scale it! Find your first 100 happy customers and really understand them”</p><p></p>\n<p></p><p> – Sean O’Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\" target=\"_blank\" rel=\"external\">@sosventures</a>)</p><br><p></p>\n<div style=\"clear:both\"></div>\n\n<p>Sean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers!<br>It’s crucial to understand what you are doing and what your customers need. You shouldn’t really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.</p>\n<p><strong>Start small</strong>. Find a niche and try to grasp what’s the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that’s the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.</p>\n<p>##3. Passion breaks the point!</p>\n<p><img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"></p>\n<p><blockquote style=\"float:left; width: 70%\"></blockquote></p>\n<p></p><p>“You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive”</p><p></p>\n<p></p><p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\" target=\"_blank\" rel=\"external\">@mynameisdanram</a>)</p><br><p></p>\n<div style=\"clear:both\"></div>\n\n<p>Daniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.</p>\n<p>Great success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing.<br>You will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.</p>\n<p>There will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what’s the best way for you to release the stress and be ready to start again.</p>\n<p>Daniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.</p>\n<p>##4. Surround yourself with great people</p>\n<p><img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"></p>\n<p><blockquote style=\"float:left; width: 70%\"></blockquote></p>\n<p></p><p>“You are the average of the five people you spend most time with”</p><p></p>\n<p></p><p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\" target=\"_blank\" rel=\"external\">@seangallagher1</a>)</p><br><p></p>\n<div style=\"clear:both\"></div>\n\n<p>Nobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends.<br>The fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.</p>\n<p>This obviously applies also to your business: <strong>team, team, team</strong>! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.</p>\n<p>Just imagine what can happen to your business if your core team is not the right one…</p>\n<p>##5. You should work really hard if you want to look as good as a swan!</p>\n<p><img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"></p>\n<p><blockquote style=\"float:left; width: 70%\"></blockquote></p>\n<p></p><p>“You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum”</p><p></p>\n<p></p><p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\" target=\"_blank\" rel=\"external\">@waynemurphy77</a>)</p><br><p></p>\n<div style=\"clear:both\"></div>\n\n<p>This is really a great metaphor. I simply loved it.<br>I have two different interpretation of it.</p>\n<p>The first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can’t fake it, you have to earn it!</p>\n<p>My second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don’t make the mistake to relax at the first goal reached, but immediately look at the next one and do what’s needed to reach it, immediately! </p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>These three months have been probably the best of my life in terms of learning and experience, so <strong>I have to say a huge “thank you” to everyone that made this possible</strong>.</p>\n<p>Secondly i’d like to have your opinion and interpretation of all this quotes. Feel free to <strong>leave a comment and tell me which one of these five lessons you liked most</strong>.</p>\n","excerpt":"","more":"<p><strong>What a hell of 3 months!</strong> </p>\n<p>During the last 3 months I haven’t got a single minute to take care of this blog. I started a new adventure and moved to Ireland to attend the Bank of Ireland Accelerator Programme in Cork with my startup <a href=\"http://sbaam.com\">Sbaam</a>. There I spent 3 incredible months with a huge amount of lessons learned about <strong>startups</strong> and <strong>entrepreneurship</strong>. I want to share with you 5 of the best quotes I heard from the mentors and explain what I learned from them.</p>\n<p><small>Consider this is my first “non technical” post with a lot of english written text. You’ll probalby find it plenty of mistakes, so feel free to <a href=\"mailto:loige@hotmail.com\">send me an email</a> and help me to improve it (and improve my english too :P)</small></p>\n<p>##1. Being an entrepreneur is hell</p>\n<p><img src=\"/content/images/2014/12/bill-liao.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/></p>\n<p><blockquote style=\"float:left; width: 70%\"></p>\n<p><p>“Welcome… to hell!”</p></p>\n<p><p> – Bill Liao (<a href=\"https://twitter.com/liaonet\" title=\"follow Bill on Twitter\">@liaonet</a>)</p><br></blockquote></p>\n<div style=\"clear:both\"></div>\n\n<p>This is the very first phrase I remember from a mentor. It was the opening day and Bill was one of the first speakers. He wanted to warn us about the upcoming months, but also about our choice of being entrepreneurs.</p>\n<p>Yes, it may sound trivial but it’s true. Many think that being an entrepreneur means freedom, money and 0 responsibilities. The truth is that this is absolutely not the case!</p>\n<p>Entrepreneurs work a lot more than the usual workers (and this very often includes nights, weekends and holidays). They have to care about their business in every single moment and every stakeholder ends up to be their boss: customers, investors and partners require a lot of attention, their money (and time) are not supposed to be wasted!</p>\n<p>And, speaking about entrepreneurs’ earning, get ready to spend months, sometimes even years, without a single cent in your pocket especially if it’s your first time as an entrepreneur. Every penny you have should be invested in your business because at the end of the day <strong>you are the “number one” investor of your company</strong>.</p>\n<p>##2. Understand who you are, what you want to accomplish but don’t forget about your customers</p>\n<p><img src=\"/content/images/2014/12/sean-o-sullivan.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/></p>\n<p><blockquote style=\"float:left; width: 70%\"></p>\n<p><p>“Nail it and then scale it! Find your first 100 happy customers and really understand them”</p></p>\n<p><p> – Sean O’Sullivan (<a href=\"https://twitter.com/sosventures\" title=\"follow Sean on Twitter\">@sosventures</a>)</p><br></blockquote></p>\n<div style=\"clear:both\"></div>\n\n<p>Sean explained us why most of the businesses fail: they simply are not focused in trying to solve a problem for their customers!<br>It’s crucial to understand what you are doing and what your customers need. You shouldn’t really keep adding 10 thousand features to your product or trying to attack every possible market and regions from day one.</p>\n<p><strong>Start small</strong>. Find a niche and try to grasp what’s the real pain there. Then see if your solution solves the problem for real and see if people are willing to pay for it. If that’s the case you found your first customers, well done! They are your most valuable asset, so you have to be sure they are really happy with you and that your solution is the best for them before trying to move on to a broader audience.</p>\n<p>##3. Passion breaks the point!</p>\n<p><img src=\"/content/images/2014/12/daniel-ramamoorthy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/></p>\n<p><blockquote style=\"float:left; width: 70%\"></p>\n<p><p>“You need to be totally and utterly in love with your business as it keeps you alive and your business itself alive”</p></p>\n<p><p> – Daniel Ramamoorthy (<a href=\"https://twitter.com/mynameisdanram\" title=\"follow Daniel on Twitter\">@mynameisdanram</a>)</p><br></blockquote></p>\n<div style=\"clear:both\"></div>\n\n<p>Daniel has an incredible attitude of life and he is a surprisingly positive person. This quality is not something he is born with, but something that he developed in time and something that everyone can develop.</p>\n<p>Great success can be achieved only if you work hard on staying positive and if you are totally passionate about what you are doing.<br>You will spend so much time and energies on your business that you can really perform only if this motivates you and makes you feel good.</p>\n<p>There will be times when everything will go wrong and it will be almost impossible to remain positive. These are the moments in which you should find your way to keep going and recover your positivity. Going out for a walk, practicing some sport, reading a book, watching a movie, listen to your favourite music, talking with a friend are just few of the thousand possible solutions. Everyone is different and the key here is to find out what’s the best way for you to release the stress and be ready to start again.</p>\n<p>Daniel told us that he printed his favourite quote on the ceiling over his bed. Everytime he wakes up in the morning this is the first thing he see and this allows him to remember who he is and what he is passionate about, this makes him ready to do his best during the day.</p>\n<p>##4. Surround yourself with great people</p>\n<p><img src=\"/content/images/2014/12/sean-gallagher.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/></p>\n<p><blockquote style=\"float:left; width: 70%\"></p>\n<p><p>“You are the average of the five people you spend most time with”</p></p>\n<p><p> – Seàn Gallagher (<a href=\"https://twitter.com/seangallagher1\" title=\"follow Seàn on Twitter\">@seangallagher1</a>)</p><br></blockquote></p>\n<div style=\"clear:both\"></div>\n\n<p>Nobody is alone. Unless you are an hermit in the Himalayas your days will be spent with different people from work to family and friends.<br>The fact is that every one can give you something, so the trick is to surround yourself with the best people you can find. People that can teach you how to be better at something, people that can make you feel positive, people that can transmit their experience to you, people that can compensate your weaknesses. If you can do this you will surely became a better person day by day and will live happier.</p>\n<p>This obviously applies also to your business: <strong>team, team, team</strong>! If you are an entrepreneur you will spend most of your days with your team so you have to build the best team in the whole World. Not necessarily the best in terms of individual skills but the best in terms of people and the synergy with them.</p>\n<p>Just imagine what can happen to your business if your core team is not the right one…</p>\n<p>##5. You should work really hard if you want to look as good as a swan!</p>\n<p><img src=\"/content/images/2014/12/wayne-murphy.png\" width=\"80px\" style=\"border-radius:50%; float: right; width: 20%; margin: 2.8em 0; padding:0;\"/></p>\n<p><blockquote style=\"float:left; width: 70%\"></p>\n<p><p>“You need to be as smooth as a graceful swan on a lake but you must keep pedalling very hard under the surface to maintain that forward momentum”</p></p>\n<p><p> – Wayne Murphy, programme manager (<a href=\"https://twitter.com/waynemurphy77\" title=\"follow Wayne on Twitter\">@waynemurphy77</a>)</p><br></blockquote></p>\n<div style=\"clear:both\"></div>\n\n<p>This is really a great metaphor. I simply loved it.<br>I have two different interpretation of it.</p>\n<p>The first is that you have to look great to every external observer, almost pretending that everything is possible for you. But being able to do so requires a huge and continuous effort, you can’t fake it, you have to earn it!</p>\n<p>My second interpretation is that once you start having some traction and you are floating smoothly on your way you have to start working even harder to keep the momentum and reach the next great milestone. So don’t make the mistake to relax at the first goal reached, but immediately look at the next one and do what’s needed to reach it, immediately! </p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>These three months have been probably the best of my life in terms of learning and experience, so <strong>I have to say a huge “thank you” to everyone that made this possible</strong>.</p>\n<p>Secondly i’d like to have your opinion and interpretation of all this quotes. Feel free to <strong>leave a comment and tell me which one of these five lessons you liked most</strong>.</p>\n"},{"uuid":"b7e233ac-3bda-4529-88c5-1fff08b629a1","layout":"post","title":"6 Rules of thumb to build blazing fast web server applications","slug":"6-rules-of-thumb-to-build-blazing-fast-web-applications","subtitle":"In this post are described 6 extremely important rules you should take under consideration when writing your next web application","date":"2015-07-25T18:57:00.000Z","updated":"2016-01-15T19:15:54.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg","status":"published","language":"en_US","meta_title":"6 Rules of thumb to build blazing fast web applications (server side)","meta_description":"In this post are described 6 extremely important rules you should take under consideration when writing your next web application","_content":"\nIn this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.\n\nYou can read this article in other languages:\n\n  - **Japanese** on **POSTD**: [高速なWebサーバアプリケーションを構築するための6つの経験則](http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/)\n  - **Italian** on **HTML5 Today**: [Performance: 6 regole per sviluppare applicazioni web](http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/)\n\n**TLDR;** the basic rules are:\n\n- [Rule 1](#rule-1). Avoid premature optimization\n- [Rule 2](#rule-2). Do the minimum amount of work to solve the problem\n- [Rule 3](#rule-3). Defer the work you don't need to do immediately\n- [Rule 4](#rule-4). Use cache when you can\n- [Rule 5](#rule-5). Understand and avoid the N+1 query problem with relational databases\n- [Rule 6](#rule-6). Prepare your app for horizontal scalability when possible\n\n![Your code should be fast as Flash](/content/images/2015/07/flash-gordon-fast-code.png)\n\n<a id=\"rule-1\"></a>\n\n## Rule 1: Avoid premature optimization\n\nOne of the most famous [Donald Knuth](http://www-cs-faculty.stanford.edu/~uno/)'s quotes says: \n\n> \"premature optimization is the root of all evil\" \n<br/><br/><a href=\"https://twitter.com/home?status=%22Premature%20optimization%20is%20the%20root%20of%20all%20evil%22%20%E2%80%94D.Knuth%20%0A%0AWeb%20apps%20performance%20tips%20by%20%40loige%3A%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a>\n\nKnuth's noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don't really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like \"_are double quoted strings slower than single quoted ones?_\"\n\nTo avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a **profiler** to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.\n\n**Note**: I want to make it clear that Knuth's quote doesn't mean that you don't have to care about optimization at all and it's not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to \"optimize smartly\" and that's the way you should read it as well.\n\nIf you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:\n\n- **[xdebug](http://xdebug.org/)**: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it's easily integrable in most of the IDEs.\n- **[xhprof](https://github.com/phacility/xhprof)**: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.\n- **[Symfony profiler](https://symfony.com/doc/current/cookbook/profiler/index.html)**: The Symfony profiler it's a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in \"development\" mode and does not need any PHP extension to be installed.\n- **[The Stopwatch component](https://symfony.com/doc/current/components/stopwatch.html)**: It's the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.\n- **[Blackfire.io](https://blackfire.io/)**: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.\n- **[Tideways](https://tideways.io/)**: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It's meant to be run continuously (also in production).\n\nIf you want to know more on this specific topic you can have a read at the following articles and papers:\n\n- [On optimization in PHP](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html) by Anthony Ferrara\n- [The fallacy of premature optimization](http://ubiquity.acm.org/article.cfm?id=1513451) by Randall Hyde\n- [Premature optimization](http://www.c2.com/cgi/wiki?PrematureOptimization) by Cunningham & Cunningham, Inc\n\n\n<a id=\"rule-2\"></a>\n\n\n## Rule 2: Do just what you need to\n\n![Joker meme I Just Do Things](/content/images/2015/07/i-just-do-things-joker-meme.gif)\n\nVery often your code does more things than it's required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you'll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.\n\nThere are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.\n\n- **Autoloading**: it's a [PHP feature](http://php.net/manual/en/language.oop5.autoload.php) that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the [PSR-0](http://www.php-fig.org/psr/psr-0/) and [PSR-4](http://www.php-fig.org/psr/psr-4/) standards and tools like _Composer_ it is a piece of cake to use autoloading.\n- **Dependency Injection**: it's a very common [design pattern](https://en.wikipedia.org/wiki/Dependency_injection) in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.\n- **Lazy Loading**: another important [design pattern](https://en.wikipedia.org/wiki/Lazy_loading) used to defer initialization of an object until the point at which it is needed. It's mostly used with objects that deals with heavy resources like database connections or file based data sources.\n\n\n<a id=\"rule-3\"></a>\n\n## Rule 3: Mama, I'll do it tomorrow!\n\n![Tomorrow definition mystical land for human productivity](/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg)\n\nHow many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it's quite common to do these \"heavy\" operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred.\nThe most common way to do that is to use [job queues](https://en.wikipedia.org/wiki/Job_queue), which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).\n\nA simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:\n\n  - [Resque](https://github.com/chrisboulton/php-resque): A PHP queue library that uses Redis as data store. \n  - [Laravel Queues](http://laravel.com/docs/5.1/queues): the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.\n  - [Gearman](http://gearman.org/): A generic job server that supports the wide majority of languages (PHP among the others).\n  - [Beanstalkd](http://kr.github.io/beanstalkd/): Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)\n\n\n<a id=\"rule-4\"></a>\n\n\n## Rule 4: Gotta cache 'em all!\n\n![Comic strip about the cloud and the cache](/content/images/2015/07/cache-joke-comic-the-cloud.png)\n\nNowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page.\nUsing a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.\n\nBut there's a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter \"_the cache_\"!\n\n> Cache, which is pronounced \"cash\" (not \"catch\" or \"cashay\"), stores recently used information so that it can be quickly accessed at a later time.\n\nCache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.\n\nIn general with web programming we can focus on several different **levels of cache**:\n\n- **Byte Code Cache**: it's a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to interpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: [APC](http://php.net/manual/en/book.apc.php), [eAccelerator](http://eaccelerator.net/), [Xcache](http://xcache.lighttpd.net/). Since PHP 5.5 we can use the [Opcache extension](http://php.net/manual/en/book.opcache.php) which has been integrated in the core.\n- **Application Cache**: to not be confused with HTML5 Application cache, is the cache logic that regards your specific application and it's probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it's a good idea to use cache servers like [Memcached](http://memcached.org/), [Redis](http://redis.io/) or [Gibson](http://gibson-db.in/).\n- **HTTP Cache**: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn't it be useful to have ways to tell the browser to reuse content that he already downloaded?\nWell, you can do that by using **HTTP Cache headers** like `Etag` and `Cache-control`. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn't get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.\n- **Proxy Cache**: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called **Reverse proxy**). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it's generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn't change too frequently. Famous proxy servers are [Varnish](https://www.varnish-cache.org/), [Nginx](http://nginx.org/) and [Squid](http://www.squid-cache.org/). Also [Apache](http://httpd.apache.org/) can be configured to act as a reverse proxy.\n \nAnyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it's requested. This process is called \"_cache invalidation_\" and it generally makes developers insane to the point that a very famous quote exists:\n\n> There are only two hard things in Computer Science: **cache invalidation** and naming things.\n>\n> — Phil Karlton\n<br/><br/><a href=\"https://twitter.com/home?status=There%20are%20only%202%20hard%20things%20in%20CS%3A%20cache%20invalidation%20and%20naming%20things%0A%E2%80%94Karlton%0AWeb%20apps%20performance%20tips%20by%20%40loige%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a>\n\nIf you have been into software development for a while I'm quite sure that you already had chance to read it!\n\nThere's no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!\n\nHere follows some articles that might be interesting to know more about caching for web applications:\n\n- [Web application caching](http://docforge.com/wiki/Web_application/Caching) by DocForge\n- [Fine tune your Opcache configuration to avoid caching surprises](https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises) by Tideways blog\n- [Beginners guide to HTTP cache headers](http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/) by Mobify\n- [HTTP Caching, optimizing content efficiency](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching) by Google\n- [Using Http headers with Symfony](http://symfony.com/it/doc/current/book/http_cache.html) by Symfony\n- [What is a reverse proxy server](https://www.nginx.com/resources/glossary/reverse-proxy-server/) by Nginx\n- [Laravel cache](http://laravel.com/docs/5.1/cache) by Laravel\n\n\n<a id=\"rule-5\"></a>\n\n## Rule 5: Avoid the damn N+1 Query Problem\n\nThe \"_N+1 Query Problem_\" is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well... almost real) example:\n\n```php\n<?php\n\nfunction getUsers() {\n  //... retrieve the users from the database (1 query)\n  return $users;\n}\n\nfunction loadLastLoginsForUsers($users) {\n  foreach ($users as $user) {\n    $lastLogins = ... // load the last logins for the user (1 query, executed n times)\n    $user->setLastLogins($lastLogins);\n  }\n\n  return $users;\n}\n\n$users = getUsers();\nloadLastLoginsForUsers($users);\n```\n\nThe given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id = 1;\nSELECT * FROM Logins WHERE user_id = 2;\nSELECT * FROM Logins WHERE user_id = 3;\nSELECT * FROM Logins WHERE user_id = 4;\nSELECT * FROM Logins WHERE user_id = 5;\nSELECT * FROM Logins WHERE user_id = 6;\n-- ...\n```\n\nThat's obviously inefficient and it happens quite often with \"has many\" relationships in databases, especially when you are using some kind of magic ORM and you don't exactly know what it is doing out of the box (and probably you haven't configured it properly).\n\nIn general you can solve this problem by producing a query like the following:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id IN (1, 2, 3, 4, 5, 6, ...);\n```\n\nor by using the `JOIN` syntax where possible.\n\nThis problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don't fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.\n\nOn a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.\n\nDon't expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:\n\n- [Performance: N+1 Query Problem](https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/) by Phabricator\n- [Nested Loops](http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem) by Use the Index, Luke\n- [Laravel's Eloquent ORM Eager Loading](http://laravel.com/docs/5.0/eloquent#eager-loading) by Laravel\n- Book [Solving The N+1 Problem In PHP](https://leanpub.com/sn1php) by Paul M. Jones\n\n\n<a id=\"rule-6\"></a>\n\n## Rule 6: Scale... horizontally!\n\n![Horizontal scalability is hard](/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png)\n\n\"Scalability\" is not exactly the same thing of \"performance\", but the two things are tightly intertwined.\nTo give you my personal definition, \"scalability\" is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.\n\nIt's a very complex and broad topic and I don't want to get into the details here. But for the sake of performance it's worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.\n\nThe two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.\n\n- **Sessions**: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it's not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.\n- **User files consistency**: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like [Amazon S3](http://aws.amazon.com/s3/) or [Rackspace Cloudfiles](http://www.rackspace.com/cloud/files)). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use [NFS](https://en.wikipedia.org/wiki/Network_File_System) or [GlusterFS](http://www.gluster.org/) to create a shared filesystem.\n\nHere's a list of other interesting resources to know more about scalable web applications:\n\n- [Horizontally scalable web applications](http://inviqa.com/blog/horizontally-scalable-web-applications/) by Inviqa\n- [Horizontally Scaling PHP Applications: A Practical Overview](https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/) by Digital Ocean\n- [Best Practices For Horizontal Application Scaling](https://blog.openshift.com/best-practices-for-horizontal-application-scaling/) by OpenShift\n- [Scalable Web Architecture and Distributed Systems](http://www.aosabook.org/en/distsys.html) by Kate Matsudaira\n- [Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example](http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html) by HighScalability\n- Book [The art of scalability](http://theartofscalability.com/) by Martin Abbot and Michael Fisher\n- Slides [7 Stages of scaling web applications](http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications) by Rackspace\n\n\n## Conclusions\n\nI really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don't fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.\n\nIn case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.\n\nI hope some great discussion will start from the comments here.\n\nThanks for taking your time to read this post.\n\nUntil next time!\n","source":"_posts/6-rules-of-thumb-to-build-blazing-fast-web-applications.md","raw":"uuid:             b7e233ac-3bda-4529-88c5-1fff08b629a1\nlayout:           post\ntitle:            '6 Rules of thumb to build blazing fast web server applications'\nslug:             6-rules-of-thumb-to-build-blazing-fast-web-applications\nsubtitle:         'In this post are described 6 extremely important rules you should take under consideration when writing your next web application'\ndate:             '2015-07-25T18:57:00.000Z'\nupdated:          '2016-01-15T19:15:54.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/07/6-rules-of-thumb-to-build-blazing-fast-web-applications-flash-gordon-1.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       '6 Rules of thumb to build blazing fast web applications (server side)'\nmeta_description: 'In this post are described 6 extremely important rules you should take under consideration when writing your next web application'\ntags:\n  - Php\n  - Symfony\n  - Laravel\n  - Performance\n  - Scalaibility\n\n---\n\nIn this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.\n\nYou can read this article in other languages:\n\n  - **Japanese** on **POSTD**: [高速なWebサーバアプリケーションを構築するための6つの経験則](http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/)\n  - **Italian** on **HTML5 Today**: [Performance: 6 regole per sviluppare applicazioni web](http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/)\n\n**TLDR;** the basic rules are:\n\n- [Rule 1](#rule-1). Avoid premature optimization\n- [Rule 2](#rule-2). Do the minimum amount of work to solve the problem\n- [Rule 3](#rule-3). Defer the work you don't need to do immediately\n- [Rule 4](#rule-4). Use cache when you can\n- [Rule 5](#rule-5). Understand and avoid the N+1 query problem with relational databases\n- [Rule 6](#rule-6). Prepare your app for horizontal scalability when possible\n\n![Your code should be fast as Flash](/content/images/2015/07/flash-gordon-fast-code.png)\n\n<a id=\"rule-1\"></a>\n\n## Rule 1: Avoid premature optimization\n\nOne of the most famous [Donald Knuth](http://www-cs-faculty.stanford.edu/~uno/)'s quotes says: \n\n> \"premature optimization is the root of all evil\" \n<br/><br/><a href=\"https://twitter.com/home?status=%22Premature%20optimization%20is%20the%20root%20of%20all%20evil%22%20%E2%80%94D.Knuth%20%0A%0AWeb%20apps%20performance%20tips%20by%20%40loige%3A%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a>\n\nKnuth's noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don't really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like \"_are double quoted strings slower than single quoted ones?_\"\n\nTo avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a **profiler** to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.\n\n**Note**: I want to make it clear that Knuth's quote doesn't mean that you don't have to care about optimization at all and it's not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to \"optimize smartly\" and that's the way you should read it as well.\n\nIf you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:\n\n- **[xdebug](http://xdebug.org/)**: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it's easily integrable in most of the IDEs.\n- **[xhprof](https://github.com/phacility/xhprof)**: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.\n- **[Symfony profiler](https://symfony.com/doc/current/cookbook/profiler/index.html)**: The Symfony profiler it's a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in \"development\" mode and does not need any PHP extension to be installed.\n- **[The Stopwatch component](https://symfony.com/doc/current/components/stopwatch.html)**: It's the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.\n- **[Blackfire.io](https://blackfire.io/)**: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.\n- **[Tideways](https://tideways.io/)**: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It's meant to be run continuously (also in production).\n\nIf you want to know more on this specific topic you can have a read at the following articles and papers:\n\n- [On optimization in PHP](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html) by Anthony Ferrara\n- [The fallacy of premature optimization](http://ubiquity.acm.org/article.cfm?id=1513451) by Randall Hyde\n- [Premature optimization](http://www.c2.com/cgi/wiki?PrematureOptimization) by Cunningham & Cunningham, Inc\n\n\n<a id=\"rule-2\"></a>\n\n\n## Rule 2: Do just what you need to\n\n![Joker meme I Just Do Things](/content/images/2015/07/i-just-do-things-joker-meme.gif)\n\nVery often your code does more things than it's required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you'll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.\n\nThere are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.\n\n- **Autoloading**: it's a [PHP feature](http://php.net/manual/en/language.oop5.autoload.php) that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the [PSR-0](http://www.php-fig.org/psr/psr-0/) and [PSR-4](http://www.php-fig.org/psr/psr-4/) standards and tools like _Composer_ it is a piece of cake to use autoloading.\n- **Dependency Injection**: it's a very common [design pattern](https://en.wikipedia.org/wiki/Dependency_injection) in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.\n- **Lazy Loading**: another important [design pattern](https://en.wikipedia.org/wiki/Lazy_loading) used to defer initialization of an object until the point at which it is needed. It's mostly used with objects that deals with heavy resources like database connections or file based data sources.\n\n\n<a id=\"rule-3\"></a>\n\n## Rule 3: Mama, I'll do it tomorrow!\n\n![Tomorrow definition mystical land for human productivity](/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg)\n\nHow many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it's quite common to do these \"heavy\" operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred.\nThe most common way to do that is to use [job queues](https://en.wikipedia.org/wiki/Job_queue), which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).\n\nA simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:\n\n  - [Resque](https://github.com/chrisboulton/php-resque): A PHP queue library that uses Redis as data store. \n  - [Laravel Queues](http://laravel.com/docs/5.1/queues): the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.\n  - [Gearman](http://gearman.org/): A generic job server that supports the wide majority of languages (PHP among the others).\n  - [Beanstalkd](http://kr.github.io/beanstalkd/): Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)\n\n\n<a id=\"rule-4\"></a>\n\n\n## Rule 4: Gotta cache 'em all!\n\n![Comic strip about the cloud and the cache](/content/images/2015/07/cache-joke-comic-the-cloud.png)\n\nNowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page.\nUsing a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.\n\nBut there's a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter \"_the cache_\"!\n\n> Cache, which is pronounced \"cash\" (not \"catch\" or \"cashay\"), stores recently used information so that it can be quickly accessed at a later time.\n\nCache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.\n\nIn general with web programming we can focus on several different **levels of cache**:\n\n- **Byte Code Cache**: it's a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to interpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: [APC](http://php.net/manual/en/book.apc.php), [eAccelerator](http://eaccelerator.net/), [Xcache](http://xcache.lighttpd.net/). Since PHP 5.5 we can use the [Opcache extension](http://php.net/manual/en/book.opcache.php) which has been integrated in the core.\n- **Application Cache**: to not be confused with HTML5 Application cache, is the cache logic that regards your specific application and it's probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it's a good idea to use cache servers like [Memcached](http://memcached.org/), [Redis](http://redis.io/) or [Gibson](http://gibson-db.in/).\n- **HTTP Cache**: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn't it be useful to have ways to tell the browser to reuse content that he already downloaded?\nWell, you can do that by using **HTTP Cache headers** like `Etag` and `Cache-control`. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn't get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.\n- **Proxy Cache**: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called **Reverse proxy**). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it's generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn't change too frequently. Famous proxy servers are [Varnish](https://www.varnish-cache.org/), [Nginx](http://nginx.org/) and [Squid](http://www.squid-cache.org/). Also [Apache](http://httpd.apache.org/) can be configured to act as a reverse proxy.\n \nAnyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it's requested. This process is called \"_cache invalidation_\" and it generally makes developers insane to the point that a very famous quote exists:\n\n> There are only two hard things in Computer Science: **cache invalidation** and naming things.\n>\n> — Phil Karlton\n<br/><br/><a href=\"https://twitter.com/home?status=There%20are%20only%202%20hard%20things%20in%20CS%3A%20cache%20invalidation%20and%20naming%20things%0A%E2%80%94Karlton%0AWeb%20apps%20performance%20tips%20by%20%40loige%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a>\n\nIf you have been into software development for a while I'm quite sure that you already had chance to read it!\n\nThere's no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!\n\nHere follows some articles that might be interesting to know more about caching for web applications:\n\n- [Web application caching](http://docforge.com/wiki/Web_application/Caching) by DocForge\n- [Fine tune your Opcache configuration to avoid caching surprises](https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises) by Tideways blog\n- [Beginners guide to HTTP cache headers](http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/) by Mobify\n- [HTTP Caching, optimizing content efficiency](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching) by Google\n- [Using Http headers with Symfony](http://symfony.com/it/doc/current/book/http_cache.html) by Symfony\n- [What is a reverse proxy server](https://www.nginx.com/resources/glossary/reverse-proxy-server/) by Nginx\n- [Laravel cache](http://laravel.com/docs/5.1/cache) by Laravel\n\n\n<a id=\"rule-5\"></a>\n\n## Rule 5: Avoid the damn N+1 Query Problem\n\nThe \"_N+1 Query Problem_\" is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well... almost real) example:\n\n```php\n<?php\n\nfunction getUsers() {\n  //... retrieve the users from the database (1 query)\n  return $users;\n}\n\nfunction loadLastLoginsForUsers($users) {\n  foreach ($users as $user) {\n    $lastLogins = ... // load the last logins for the user (1 query, executed n times)\n    $user->setLastLogins($lastLogins);\n  }\n\n  return $users;\n}\n\n$users = getUsers();\nloadLastLoginsForUsers($users);\n```\n\nThe given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id = 1;\nSELECT * FROM Logins WHERE user_id = 2;\nSELECT * FROM Logins WHERE user_id = 3;\nSELECT * FROM Logins WHERE user_id = 4;\nSELECT * FROM Logins WHERE user_id = 5;\nSELECT * FROM Logins WHERE user_id = 6;\n-- ...\n```\n\nThat's obviously inefficient and it happens quite often with \"has many\" relationships in databases, especially when you are using some kind of magic ORM and you don't exactly know what it is doing out of the box (and probably you haven't configured it properly).\n\nIn general you can solve this problem by producing a query like the following:\n\n```sql\nSELECT id FROM Users; -- ids: 1, 2, 3, 4, 5, 6...\nSELECT * FROM Logins WHERE user_id IN (1, 2, 3, 4, 5, 6, ...);\n```\n\nor by using the `JOIN` syntax where possible.\n\nThis problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don't fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.\n\nOn a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.\n\nDon't expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:\n\n- [Performance: N+1 Query Problem](https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/) by Phabricator\n- [Nested Loops](http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem) by Use the Index, Luke\n- [Laravel's Eloquent ORM Eager Loading](http://laravel.com/docs/5.0/eloquent#eager-loading) by Laravel\n- Book [Solving The N+1 Problem In PHP](https://leanpub.com/sn1php) by Paul M. Jones\n\n\n<a id=\"rule-6\"></a>\n\n## Rule 6: Scale... horizontally!\n\n![Horizontal scalability is hard](/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png)\n\n\"Scalability\" is not exactly the same thing of \"performance\", but the two things are tightly intertwined.\nTo give you my personal definition, \"scalability\" is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.\n\nIt's a very complex and broad topic and I don't want to get into the details here. But for the sake of performance it's worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.\n\nThe two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.\n\n- **Sessions**: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it's not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.\n- **User files consistency**: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like [Amazon S3](http://aws.amazon.com/s3/) or [Rackspace Cloudfiles](http://www.rackspace.com/cloud/files)). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use [NFS](https://en.wikipedia.org/wiki/Network_File_System) or [GlusterFS](http://www.gluster.org/) to create a shared filesystem.\n\nHere's a list of other interesting resources to know more about scalable web applications:\n\n- [Horizontally scalable web applications](http://inviqa.com/blog/horizontally-scalable-web-applications/) by Inviqa\n- [Horizontally Scaling PHP Applications: A Practical Overview](https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/) by Digital Ocean\n- [Best Practices For Horizontal Application Scaling](https://blog.openshift.com/best-practices-for-horizontal-application-scaling/) by OpenShift\n- [Scalable Web Architecture and Distributed Systems](http://www.aosabook.org/en/distsys.html) by Kate Matsudaira\n- [Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example](http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html) by HighScalability\n- Book [The art of scalability](http://theartofscalability.com/) by Martin Abbot and Michael Fisher\n- Slides [7 Stages of scaling web applications](http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications) by Rackspace\n\n\n## Conclusions\n\nI really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don't fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.\n\nIn case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.\n\nI hope some great discussion will start from the comments here.\n\nThanks for taking your time to read this post.\n\nUntil next time!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggry20004svvuxgdgfbf4","content":"<p>In this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.</p>\n<p>You can read this article in other languages:</p>\n<ul>\n<li><strong>Japanese</strong> on <strong>POSTD</strong>: <a href=\"http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/\" target=\"_blank\" rel=\"external\">高速なWebサーバアプリケーションを構築するための6つの経験則</a></li>\n<li><strong>Italian</strong> on <strong>HTML5 Today</strong>: <a href=\"http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/\" target=\"_blank\" rel=\"external\">Performance: 6 regole per sviluppare applicazioni web</a></li>\n</ul>\n<p><strong>TLDR;</strong> the basic rules are:</p>\n<ul>\n<li><a href=\"#rule-1\">Rule 1</a>. Avoid premature optimization</li>\n<li><a href=\"#rule-2\">Rule 2</a>. Do the minimum amount of work to solve the problem</li>\n<li><a href=\"#rule-3\">Rule 3</a>. Defer the work you don’t need to do immediately</li>\n<li><a href=\"#rule-4\">Rule 4</a>. Use cache when you can</li>\n<li><a href=\"#rule-5\">Rule 5</a>. Understand and avoid the N+1 query problem with relational databases</li>\n<li><a href=\"#rule-6\">Rule 6</a>. Prepare your app for horizontal scalability when possible</li>\n</ul>\n<p><img src=\"/content/images/2015/07/flash-gordon-fast-code.png\" alt=\"Your code should be fast as Flash\"></p>\n<p><a id=\"rule-1\"></a></p>\n<h2 id=\"Rule-1-Avoid-premature-optimization\"><a href=\"#Rule-1-Avoid-premature-optimization\" class=\"headerlink\" title=\"Rule 1: Avoid premature optimization\"></a>Rule 1: Avoid premature optimization</h2><p>One of the most famous <a href=\"http://www-cs-faculty.stanford.edu/~uno/\" target=\"_blank\" rel=\"external\">Donald Knuth</a>‘s quotes says: </p>\n<blockquote>\n<p>“premature optimization is the root of all evil”<br><br><br><a href=\"https://twitter.com/home?status=%22Premature%20optimization%20is%20the%20root%20of%20all%20evil%22%20%E2%80%94D.Knuth%20%0A%0AWeb%20apps%20performance%20tips%20by%20%40loige%3A%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a></p>\n</blockquote>\n<p>Knuth’s noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don’t really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like “<em>are double quoted strings slower than single quoted ones?</em>“</p>\n<p>To avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a <strong>profiler</strong> to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.</p>\n<p><strong>Note</strong>: I want to make it clear that Knuth’s quote doesn’t mean that you don’t have to care about optimization at all and it’s not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to “optimize smartly” and that’s the way you should read it as well.</p>\n<p>If you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:</p>\n<ul>\n<li><strong><a href=\"http://xdebug.org/\" target=\"_blank\" rel=\"external\">xdebug</a></strong>: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it’s easily integrable in most of the IDEs.</li>\n<li><strong><a href=\"https://github.com/phacility/xhprof\" target=\"_blank\" rel=\"external\">xhprof</a></strong>: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/cookbook/profiler/index.html\" target=\"_blank\" rel=\"external\">Symfony profiler</a></strong>: The Symfony profiler it’s a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in “development” mode and does not need any PHP extension to be installed.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/components/stopwatch.html\" target=\"_blank\" rel=\"external\">The Stopwatch component</a></strong>: It’s the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.</li>\n<li><strong><a href=\"https://blackfire.io/\" target=\"_blank\" rel=\"external\">Blackfire.io</a></strong>: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.</li>\n<li><strong><a href=\"https://tideways.io/\" target=\"_blank\" rel=\"external\">Tideways</a></strong>: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It’s meant to be run continuously (also in production).</li>\n</ul>\n<p>If you want to know more on this specific topic you can have a read at the following articles and papers:</p>\n<ul>\n<li><a href=\"http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html\" target=\"_blank\" rel=\"external\">On optimization in PHP</a> by Anthony Ferrara</li>\n<li><a href=\"http://ubiquity.acm.org/article.cfm?id=1513451\" target=\"_blank\" rel=\"external\">The fallacy of premature optimization</a> by Randall Hyde</li>\n<li><a href=\"http://www.c2.com/cgi/wiki?PrematureOptimization\" target=\"_blank\" rel=\"external\">Premature optimization</a> by Cunningham &amp; Cunningham, Inc</li>\n</ul>\n<p><a id=\"rule-2\"></a></p>\n<h2 id=\"Rule-2-Do-just-what-you-need-to\"><a href=\"#Rule-2-Do-just-what-you-need-to\" class=\"headerlink\" title=\"Rule 2: Do just what you need to\"></a>Rule 2: Do just what you need to</h2><p><img src=\"/content/images/2015/07/i-just-do-things-joker-meme.gif\" alt=\"Joker meme I Just Do Things\"></p>\n<p>Very often your code does more things than it’s required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you’ll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.</p>\n<p>There are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.</p>\n<ul>\n<li><strong>Autoloading</strong>: it’s a <a href=\"http://php.net/manual/en/language.oop5.autoload.php\" target=\"_blank\" rel=\"external\">PHP feature</a> that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the <a href=\"http://www.php-fig.org/psr/psr-0/\" target=\"_blank\" rel=\"external\">PSR-0</a> and <a href=\"http://www.php-fig.org/psr/psr-4/\" target=\"_blank\" rel=\"external\">PSR-4</a> standards and tools like <em>Composer</em> it is a piece of cake to use autoloading.</li>\n<li><strong>Dependency Injection</strong>: it’s a very common <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"external\">design pattern</a> in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.</li>\n<li><strong>Lazy Loading</strong>: another important <a href=\"https://en.wikipedia.org/wiki/Lazy_loading\" target=\"_blank\" rel=\"external\">design pattern</a> used to defer initialization of an object until the point at which it is needed. It’s mostly used with objects that deals with heavy resources like database connections or file based data sources.</li>\n</ul>\n<p><a id=\"rule-3\"></a></p>\n<h2 id=\"Rule-3-Mama-I’ll-do-it-tomorrow\"><a href=\"#Rule-3-Mama-I’ll-do-it-tomorrow\" class=\"headerlink\" title=\"Rule 3: Mama, I’ll do it tomorrow!\"></a>Rule 3: Mama, I’ll do it tomorrow!</h2><p><img src=\"/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg\" alt=\"Tomorrow definition mystical land for human productivity\"></p>\n<p>How many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it’s quite common to do these “heavy” operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred.<br>The most common way to do that is to use <a href=\"https://en.wikipedia.org/wiki/Job_queue\" target=\"_blank\" rel=\"external\">job queues</a>, which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).</p>\n<p>A simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:</p>\n<ul>\n<li><a href=\"https://github.com/chrisboulton/php-resque\" target=\"_blank\" rel=\"external\">Resque</a>: A PHP queue library that uses Redis as data store. </li>\n<li><a href=\"http://laravel.com/docs/5.1/queues\" target=\"_blank\" rel=\"external\">Laravel Queues</a>: the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.</li>\n<li><a href=\"http://gearman.org/\" target=\"_blank\" rel=\"external\">Gearman</a>: A generic job server that supports the wide majority of languages (PHP among the others).</li>\n<li><a href=\"http://kr.github.io/beanstalkd/\" target=\"_blank\" rel=\"external\">Beanstalkd</a>: Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)</li>\n</ul>\n<p><a id=\"rule-4\"></a></p>\n<h2 id=\"Rule-4-Gotta-cache-‘em-all\"><a href=\"#Rule-4-Gotta-cache-‘em-all\" class=\"headerlink\" title=\"Rule 4: Gotta cache ‘em all!\"></a>Rule 4: Gotta cache ‘em all!</h2><p><img src=\"/content/images/2015/07/cache-joke-comic-the-cloud.png\" alt=\"Comic strip about the cloud and the cache\"></p>\n<p>Nowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page.<br>Using a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.</p>\n<p>But there’s a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter “<em>the cache</em>“!</p>\n<blockquote>\n<p>Cache, which is pronounced “cash” (not “catch” or “cashay”), stores recently used information so that it can be quickly accessed at a later time.</p>\n</blockquote>\n<p>Cache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.</p>\n<p>In general with web programming we can focus on several different <strong>levels of cache</strong>:</p>\n<ul>\n<li><strong>Byte Code Cache</strong>: it’s a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to interpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: <a href=\"http://php.net/manual/en/book.apc.php\" target=\"_blank\" rel=\"external\">APC</a>, <a href=\"http://eaccelerator.net/\" target=\"_blank\" rel=\"external\">eAccelerator</a>, <a href=\"http://xcache.lighttpd.net/\" target=\"_blank\" rel=\"external\">Xcache</a>. Since PHP 5.5 we can use the <a href=\"http://php.net/manual/en/book.opcache.php\" target=\"_blank\" rel=\"external\">Opcache extension</a> which has been integrated in the core.</li>\n<li><strong>Application Cache</strong>: to not be confused with HTML5 Application cache, is the cache logic that regards your specific application and it’s probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it’s a good idea to use cache servers like <a href=\"http://memcached.org/\" target=\"_blank\" rel=\"external\">Memcached</a>, <a href=\"http://redis.io/\" target=\"_blank\" rel=\"external\">Redis</a> or <a href=\"http://gibson-db.in/\" target=\"_blank\" rel=\"external\">Gibson</a>.</li>\n<li><strong>HTTP Cache</strong>: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn’t it be useful to have ways to tell the browser to reuse content that he already downloaded?<br>Well, you can do that by using <strong>HTTP Cache headers</strong> like <code>Etag</code> and <code>Cache-control</code>. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn’t get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.</li>\n<li><strong>Proxy Cache</strong>: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called <strong>Reverse proxy</strong>). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it’s generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn’t change too frequently. Famous proxy servers are <a href=\"https://www.varnish-cache.org/\" target=\"_blank\" rel=\"external\">Varnish</a>, <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"external\">Nginx</a> and <a href=\"http://www.squid-cache.org/\" target=\"_blank\" rel=\"external\">Squid</a>. Also <a href=\"http://httpd.apache.org/\" target=\"_blank\" rel=\"external\">Apache</a> can be configured to act as a reverse proxy.</li>\n</ul>\n<p>Anyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it’s requested. This process is called “<em>cache invalidation</em>“ and it generally makes developers insane to the point that a very famous quote exists:</p>\n<blockquote>\n<p>There are only two hard things in Computer Science: <strong>cache invalidation</strong> and naming things.</p>\n<p>— Phil Karlton<br><br><br><a href=\"https://twitter.com/home?status=There%20are%20only%202%20hard%20things%20in%20CS%3A%20cache%20invalidation%20and%20naming%20things%0A%E2%80%94Karlton%0AWeb%20apps%20performance%20tips%20by%20%40loige%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a></p>\n</blockquote>\n<p>If you have been into software development for a while I’m quite sure that you already had chance to read it!</p>\n<p>There’s no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!</p>\n<p>Here follows some articles that might be interesting to know more about caching for web applications:</p>\n<ul>\n<li><a href=\"http://docforge.com/wiki/Web_application/Caching\" target=\"_blank\" rel=\"external\">Web application caching</a> by DocForge</li>\n<li><a href=\"https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises\" target=\"_blank\" rel=\"external\">Fine tune your Opcache configuration to avoid caching surprises</a> by Tideways blog</li>\n<li><a href=\"http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/\" target=\"_blank\" rel=\"external\">Beginners guide to HTTP cache headers</a> by Mobify</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\" target=\"_blank\" rel=\"external\">HTTP Caching, optimizing content efficiency</a> by Google</li>\n<li><a href=\"http://symfony.com/it/doc/current/book/http_cache.html\" target=\"_blank\" rel=\"external\">Using Http headers with Symfony</a> by Symfony</li>\n<li><a href=\"https://www.nginx.com/resources/glossary/reverse-proxy-server/\" target=\"_blank\" rel=\"external\">What is a reverse proxy server</a> by Nginx</li>\n<li><a href=\"http://laravel.com/docs/5.1/cache\" target=\"_blank\" rel=\"external\">Laravel cache</a> by Laravel</li>\n</ul>\n<p><a id=\"rule-5\"></a></p>\n<h2 id=\"Rule-5-Avoid-the-damn-N-1-Query-Problem\"><a href=\"#Rule-5-Avoid-the-damn-N-1-Query-Problem\" class=\"headerlink\" title=\"Rule 5: Avoid the damn N+1 Query Problem\"></a>Rule 5: Avoid the damn N+1 Query Problem</h2><p>The “<em>N+1 Query Problem</em>“ is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well… almost real) example:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//... retrieve the users from the database (1 query)</span></div><div class=\"line\">  <span class=\"keyword\">return</span> $users;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadLastLoginsForUsers</span><span class=\"params\">($users)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">foreach</span> ($users <span class=\"keyword\">as</span> $user) &#123;</div><div class=\"line\">    $lastLogins = ... <span class=\"comment\">// load the last logins for the user (1 query, executed n times)</span></div><div class=\"line\">    $user-&gt;setLastLogins($lastLogins);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> $users;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$users = getUsers();</div><div class=\"line\">loadLastLoginsForUsers($users);</div></pre></td></tr></table></figure>\n<p>The given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">Users</span>; <span class=\"comment\">-- ids: 1, 2, 3, 4, 5, 6...</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"comment\">-- ...</span></div></pre></td></tr></table></figure>\n<p>That’s obviously inefficient and it happens quite often with “has many” relationships in databases, especially when you are using some kind of magic ORM and you don’t exactly know what it is doing out of the box (and probably you haven’t configured it properly).</p>\n<p>In general you can solve this problem by producing a query like the following:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">Users</span>; <span class=\"comment\">-- ids: 1, 2, 3, 4, 5, 6...</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, ...);</div></pre></td></tr></table></figure>\n<p>or by using the <code>JOIN</code> syntax where possible.</p>\n<p>This problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don’t fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.</p>\n<p>On a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.</p>\n<p>Don’t expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:</p>\n<ul>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/\" target=\"_blank\" rel=\"external\">Performance: N+1 Query Problem</a> by Phabricator</li>\n<li><a href=\"http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem\" target=\"_blank\" rel=\"external\">Nested Loops</a> by Use the Index, Luke</li>\n<li><a href=\"http://laravel.com/docs/5.0/eloquent#eager-loading\" target=\"_blank\" rel=\"external\">Laravel’s Eloquent ORM Eager Loading</a> by Laravel</li>\n<li>Book <a href=\"https://leanpub.com/sn1php\" target=\"_blank\" rel=\"external\">Solving The N+1 Problem In PHP</a> by Paul M. Jones</li>\n</ul>\n<p><a id=\"rule-6\"></a></p>\n<h2 id=\"Rule-6-Scale…-horizontally\"><a href=\"#Rule-6-Scale…-horizontally\" class=\"headerlink\" title=\"Rule 6: Scale… horizontally!\"></a>Rule 6: Scale… horizontally!</h2><p><img src=\"/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png\" alt=\"Horizontal scalability is hard\"></p>\n<p>“Scalability” is not exactly the same thing of “performance”, but the two things are tightly intertwined.<br>To give you my personal definition, “scalability” is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.</p>\n<p>It’s a very complex and broad topic and I don’t want to get into the details here. But for the sake of performance it’s worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.</p>\n<p>The two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.</p>\n<ul>\n<li><strong>Sessions</strong>: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it’s not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.</li>\n<li><strong>User files consistency</strong>: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like <a href=\"http://aws.amazon.com/s3/\" target=\"_blank\" rel=\"external\">Amazon S3</a> or <a href=\"http://www.rackspace.com/cloud/files\" target=\"_blank\" rel=\"external\">Rackspace Cloudfiles</a>). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use <a href=\"https://en.wikipedia.org/wiki/Network_File_System\" target=\"_blank\" rel=\"external\">NFS</a> or <a href=\"http://www.gluster.org/\" target=\"_blank\" rel=\"external\">GlusterFS</a> to create a shared filesystem.</li>\n</ul>\n<p>Here’s a list of other interesting resources to know more about scalable web applications:</p>\n<ul>\n<li><a href=\"http://inviqa.com/blog/horizontally-scalable-web-applications/\" target=\"_blank\" rel=\"external\">Horizontally scalable web applications</a> by Inviqa</li>\n<li><a href=\"https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/\" target=\"_blank\" rel=\"external\">Horizontally Scaling PHP Applications: A Practical Overview</a> by Digital Ocean</li>\n<li><a href=\"https://blog.openshift.com/best-practices-for-horizontal-application-scaling/\" target=\"_blank\" rel=\"external\">Best Practices For Horizontal Application Scaling</a> by OpenShift</li>\n<li><a href=\"http://www.aosabook.org/en/distsys.html\" target=\"_blank\" rel=\"external\">Scalable Web Architecture and Distributed Systems</a> by Kate Matsudaira</li>\n<li><a href=\"http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html\" target=\"_blank\" rel=\"external\">Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example</a> by HighScalability</li>\n<li>Book <a href=\"http://theartofscalability.com/\" target=\"_blank\" rel=\"external\">The art of scalability</a> by Martin Abbot and Michael Fisher</li>\n<li>Slides <a href=\"http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications\" target=\"_blank\" rel=\"external\">7 Stages of scaling web applications</a> by Rackspace</li>\n</ul>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>I really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don’t fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.</p>\n<p>In case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.</p>\n<p>I hope some great discussion will start from the comments here.</p>\n<p>Thanks for taking your time to read this post.</p>\n<p>Until next time!</p>\n","excerpt":"","more":"<p>In this post I will try to highlight some of the most common principles that you have to take under consideration when you want to achieve a great level of performance while building a web application (specifically on the backend part). I believe the concepts discussed here can be applied to any language and framework even if, due to my specific experience, I will mention some examples, design patterns, conventions and tools that are mostly used in the PHP world.</p>\n<p>You can read this article in other languages:</p>\n<ul>\n<li><strong>Japanese</strong> on <strong>POSTD</strong>: <a href=\"http://postd.cc/6-rules-of-thumb-to-build-blazing-fast-web-server-applications/\">高速なWebサーバアプリケーションを構築するための6つの経験則</a></li>\n<li><strong>Italian</strong> on <strong>HTML5 Today</strong>: <a href=\"http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/\">Performance: 6 regole per sviluppare applicazioni web</a></li>\n</ul>\n<p><strong>TLDR;</strong> the basic rules are:</p>\n<ul>\n<li><a href=\"#rule-1\">Rule 1</a>. Avoid premature optimization</li>\n<li><a href=\"#rule-2\">Rule 2</a>. Do the minimum amount of work to solve the problem</li>\n<li><a href=\"#rule-3\">Rule 3</a>. Defer the work you don’t need to do immediately</li>\n<li><a href=\"#rule-4\">Rule 4</a>. Use cache when you can</li>\n<li><a href=\"#rule-5\">Rule 5</a>. Understand and avoid the N+1 query problem with relational databases</li>\n<li><a href=\"#rule-6\">Rule 6</a>. Prepare your app for horizontal scalability when possible</li>\n</ul>\n<p><img src=\"/content/images/2015/07/flash-gordon-fast-code.png\" alt=\"Your code should be fast as Flash\"></p>\n<p><a id=\"rule-1\"></a></p>\n<h2 id=\"Rule-1-Avoid-premature-optimization\"><a href=\"#Rule-1-Avoid-premature-optimization\" class=\"headerlink\" title=\"Rule 1: Avoid premature optimization\"></a>Rule 1: Avoid premature optimization</h2><p>One of the most famous <a href=\"http://www-cs-faculty.stanford.edu/~uno/\">Donald Knuth</a>‘s quotes says: </p>\n<blockquote>\n<p>“premature optimization is the root of all evil”<br><br/><br/><a href=\"https://twitter.com/home?status=%22Premature%20optimization%20is%20the%20root%20of%20all%20evil%22%20%E2%80%94D.Knuth%20%0A%0AWeb%20apps%20performance%20tips%20by%20%40loige%3A%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a></p>\n</blockquote>\n<p>Knuth’s noticed that a lot of software developers generally waste a huge amount of time thinking about performance of non-critical parts of the code they are writing. This very often happens because such developers don’t really know what are the critical parts of their code or the ones that need to be optimized more, so they start to worry about futile things like “<em>are double quoted strings slower than single quoted ones?</em>“</p>\n<p>To avoid to fall into the premature optimization trap you should write the first version of your code without worrying much about performance. Then you can use a <strong>profiler</strong> to instrument your code and see where the bottlenecks are. This way you can focus on improving only the parts that really need your attention.</p>\n<p><strong>Note</strong>: I want to make it clear that Knuth’s quote doesn’t mean that you don’t have to care about optimization at all and it’s not an excuse to write shitty code and then abandon it. I just intended it as an encouragement to learn how to “optimize smartly” and that’s the way you should read it as well.</p>\n<p>If you are working on the PHP land there are a loot of tools that you can easily adopt to profile your code:</p>\n<ul>\n<li><strong><a href=\"http://xdebug.org/\">xdebug</a></strong>: probably the most famous PHP debugger and profiler, it must be installed as a PHP extension and it’s easily integrable in most of the IDEs.</li>\n<li><strong><a href=\"https://github.com/phacility/xhprof\">xhprof</a></strong>: a function-level hierarchical profiler for PHP. It comes with a simple HTML based navigational interface and offers some cool diff capabilities to compare the performance of different versions of your code.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/cookbook/profiler/index.html\">Symfony profiler</a></strong>: The Symfony profiler it’s a one of the best features of the Symfony framework. It allows you to inspect the execution time of every request, showcasing a nice timeline that allows you to easily understand which part of your code is the most time-consuming. It is automatically enabled in “development” mode and does not need any PHP extension to be installed.</li>\n<li><strong><a href=\"https://symfony.com/doc/current/components/stopwatch.html\">The Stopwatch component</a></strong>: It’s the low level library used in the Symfony profiler to measure the execution time of a piece of PHP code. It can be easily integrated in any PHP project and does not require any extension.</li>\n<li><strong><a href=\"https://blackfire.io/\">Blackfire.io</a></strong>: a profiler optimized for PHP that offers a very nice web interface that allows you to understand visually what your code does and where the CPU spends most of its time.</li>\n<li><strong><a href=\"https://tideways.io/\">Tideways</a></strong>: a promising alternative to Blackfire, offers a lot of graphical tools (timeline, call graphs, etc.) to make it really easy to find bottlenecks. It’s meant to be run continuously (also in production).</li>\n</ul>\n<p>If you want to know more on this specific topic you can have a read at the following articles and papers:</p>\n<ul>\n<li><a href=\"http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html\">On optimization in PHP</a> by Anthony Ferrara</li>\n<li><a href=\"http://ubiquity.acm.org/article.cfm?id=1513451\">The fallacy of premature optimization</a> by Randall Hyde</li>\n<li><a href=\"http://www.c2.com/cgi/wiki?PrematureOptimization\">Premature optimization</a> by Cunningham &amp; Cunningham, Inc</li>\n</ul>\n<p><a id=\"rule-2\"></a></p>\n<h2 id=\"Rule-2-Do-just-what-you-need-to\"><a href=\"#Rule-2-Do-just-what-you-need-to\" class=\"headerlink\" title=\"Rule 2: Do just what you need to\"></a>Rule 2: Do just what you need to</h2><p><img src=\"/content/images/2015/07/i-just-do-things-joker-meme.gif\" alt=\"Joker meme I Just Do Things\"></p>\n<p>Very often your code does more things than it’s required to do to produce the expected output. This is especially true if you are using complex libraries and frameworks in your code. Just to give you some examples you might load classes that you’ll never use, you might open a database connection or read a file for every request even when these resources are not needed to generate the output for a specific request.</p>\n<p>There are a number of design patterns and techniques that can help you to avoid these situations and achieve better performances.</p>\n<ul>\n<li><strong>Autoloading</strong>: it’s a <a href=\"http://php.net/manual/en/language.oop5.autoload.php\">PHP feature</a> that allows you to require the file containing the definition of a class only when you are about to use that class (instantiation, static method call, access to a constant, etc.). This way you should not worry about which files to include in your script, but just to use that classes that you need. Autoloading will do the rest for you. Configuring autoloading has been a little bit complex in the past, especially because every library used its own conventions, but today thanks to the <a href=\"http://www.php-fig.org/psr/psr-0/\">PSR-0</a> and <a href=\"http://www.php-fig.org/psr/psr-4/\">PSR-4</a> standards and tools like <em>Composer</em> it is a piece of cake to use autoloading.</li>\n<li><strong>Dependency Injection</strong>: it’s a very common <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\">design pattern</a> in the Java world that in the last years has got a lot of traction even in the PHP world thanks also to the effort of frameworks like Symfony, Zend and Laravel that use and advocate it widely. Basically it allows to inject components through the constructor or a setter method. This has the effect of forcing the developer to think in terms of dependencies and to create small isolated components focused on doing just one thing and do it well.</li>\n<li><strong>Lazy Loading</strong>: another important <a href=\"https://en.wikipedia.org/wiki/Lazy_loading\">design pattern</a> used to defer initialization of an object until the point at which it is needed. It’s mostly used with objects that deals with heavy resources like database connections or file based data sources.</li>\n</ul>\n<p><a id=\"rule-3\"></a></p>\n<h2 id=\"Rule-3-Mama-I’ll-do-it-tomorrow\"><a href=\"#Rule-3-Mama-I’ll-do-it-tomorrow\" class=\"headerlink\" title=\"Rule 3: Mama, I’ll do it tomorrow!\"></a>Rule 3: Mama, I’ll do it tomorrow!</h2><p><img src=\"/content/images/2015/07/i-ll-do-it-tomorrow-meme.jpg\" alt=\"Tomorrow definition mystical land for human productivity\"></p>\n<p>How many times do you needed to send an email to a user after he/she triggered a specific event in your web app (e.g. password changed or order completed)? How many times you needed to resize an image after the user uploaded it? Well it’s quite common to do these “heavy” operations before sending a success message to the user. To put it another way, our users expects to see some message in their browsers as soon as possible and we need to ensure that any additional task (not directly related with creating that message) should be deferred.<br>The most common way to do that is to use <a href=\"https://en.wikipedia.org/wiki/Job_queue\">job queues</a>, which means that you have to store the minimum amount of data needed to perform the deferred task into a queue of some kind (e.g. a database, a message broker) and forget about it. You have to get back immediately to your main task: generating the output for the user! There will be some kind of worker in place with the goal to read from the queue periodically and perform the deferred job (e.g. sending the e-mail or generating the image thumbnails).</p>\n<p>A simple queue system can be easily done with any kind of data store (very often Redis or MongoDB are used) or a message broker like RabbitMQ or ActiveMQ. There are also a lot of implementation already done for the PHP world:</p>\n<ul>\n<li><a href=\"https://github.com/chrisboulton/php-resque\">Resque</a>: A PHP queue library that uses Redis as data store. </li>\n<li><a href=\"http://laravel.com/docs/5.1/queues\">Laravel Queues</a>: the Laravel/Lumen out-of-the-box solution to defer jobs using queues and workers. It can be configured to use different data stores.</li>\n<li><a href=\"http://gearman.org/\">Gearman</a>: A generic job server that supports the wide majority of languages (PHP among the others).</li>\n<li><a href=\"http://kr.github.io/beanstalkd/\">Beanstalkd</a>: Another fast work queue with client libraries for the most common languages (Ruby, PHP, etc.)</li>\n</ul>\n<p><a id=\"rule-4\"></a></p>\n<h2 id=\"Rule-4-Gotta-cache-‘em-all\"><a href=\"#Rule-4-Gotta-cache-‘em-all\" class=\"headerlink\" title=\"Rule 4: Gotta cache ‘em all!\"></a>Rule 4: Gotta cache ‘em all!</h2><p><img src=\"/content/images/2015/07/cache-joke-comic-the-cloud.png\" alt=\"Comic strip about the cloud and the cache\"></p>\n<p>Nowadays web apps are really complex pieces of code. In order to generate a response to every request we generally do a lot of things: connect to one or more database, call external APIs, read configuration files, compute and aggregate data, serialize the results into some parseable format (Xml, Json, etc.) or render it with a template engine into a wonderful HTML page.<br>Using a naive approach we can do that for every request that we get, our servers will never get bored to do repetitive tasks.</p>\n<p>But there’s a smarter (and faster) way to do repetitive tasks, avoiding to calculate the same results again and again: enter “<em>the cache</em>“!</p>\n<blockquote>\n<p>Cache, which is pronounced “cash” (not “catch” or “cashay”), stores recently used information so that it can be quickly accessed at a later time.</p>\n</blockquote>\n<p>Cache is used widely in computer science and you can find it pretty much everywhere. For example the RAM itself can be considered as a way to cache the code of running programs to avoid the CPU to read the (slow) hard disk sparsely millions  and millions of times.</p>\n<p>In general with web programming we can focus on several different <strong>levels of cache</strong>:</p>\n<ul>\n<li><strong>Byte Code Cache</strong>: it’s a common feature of many interpreted languages (PHP, Python, Ruby, etc.) and it allows to avoid to interpretate source code files again and again if they are not changed since the last time. Some languages have this feature integrated in the core (Python), others like PHP needs to have it as an extension and several extensions exists for this sake: <a href=\"http://php.net/manual/en/book.apc.php\">APC</a>, <a href=\"http://eaccelerator.net/\">eAccelerator</a>, <a href=\"http://xcache.lighttpd.net/\">Xcache</a>. Since PHP 5.5 we can use the <a href=\"http://php.net/manual/en/book.opcache.php\">Opcache extension</a> which has been integrated in the core.</li>\n<li><strong>Application Cache</strong>: to not be confused with HTML5 Application cache, is the cache logic that regards your specific application and it’s probably the most important in terms of performance. Are you computing the 1264575th number in the Fibonacci sequence over and over again in your app? Well put the result in a cache and avoid to recompute it every time. Or, to give a more realistic example, are you always making the same expensive queries to the database over and over again to render the front page of you app? Well cache the results of the queries (or even the output of the whole page when possible) and avoid to hit the database for every user request. In these cases it’s a good idea to use cache servers like <a href=\"http://memcached.org/\">Memcached</a>, <a href=\"http://redis.io/\">Redis</a> or <a href=\"http://gibson-db.in/\">Gibson</a>.</li>\n<li><strong>HTTP Cache</strong>: Fetching data over the network is slow: a lot of round trips between the client and server are required and a lot of time is wasted before the browser is able to display the content. Wouldn’t it be useful to have ways to tell the browser to reuse content that he already downloaded?<br>Well, you can do that by using <strong>HTTP Cache headers</strong> like <code>Etag</code> and <code>Cache-control</code>. This turns to be the cheapest way in terms of server resources to leverage cache (because everything is already in the browser and the server doesn’t get requests at all), you should only be sure to use it properly to avoid returning visitors to see stale content.</li>\n<li><strong>Proxy Cache</strong>: this technique refers to the usage of a dedicated server that receives all the HTTP traffic and it may have copies of the web pages requested by the users (often called <strong>Reverse proxy</strong>). In these cases it returns the copy of the page directly without requiring the app server to re-elaborate the request. It generally keeps the copy of the data in memory and avoids many network round trips so it’s generally an out-of-the-box approach to speed up very trafficked web sites where the content doesn’t change too frequently. Famous proxy servers are <a href=\"https://www.varnish-cache.org/\">Varnish</a>, <a href=\"http://nginx.org/\">Nginx</a> and <a href=\"http://www.squid-cache.org/\">Squid</a>. Also <a href=\"http://httpd.apache.org/\">Apache</a> can be configured to act as a reverse proxy.</li>\n</ul>\n<p>Anyway, once you got the concept of caching, it is really easy to adopt it. The issues arise when you need to understand whether something changed and the cached version of your data might not be relevant anymore. In such cases you need to delete the data on the cache to be sure it gets correctly recomputed the next it’s requested. This process is called “<em>cache invalidation</em>“ and it generally makes developers insane to the point that a very famous quote exists:</p>\n<blockquote>\n<p>There are only two hard things in Computer Science: <strong>cache invalidation</strong> and naming things.</p>\n<p>— Phil Karlton<br><br/><br/><a href=\"https://twitter.com/home?status=There%20are%20only%202%20hard%20things%20in%20CS%3A%20cache%20invalidation%20and%20naming%20things%0A%E2%80%94Karlton%0AWeb%20apps%20performance%20tips%20by%20%40loige%20http%3A//bit.ly/1SaHIJY\" target=\"_blank\"><i class=\"fa fa-twitter\"></i> Tweet this</a></p>\n</blockquote>\n<p>If you have been into software development for a while I’m quite sure that you already had chance to read it!</p>\n<p>There’s no silver bullet to make cache invalidation easy, it really depends from the architecture of your code and the requirements of your application. In general the less caching layers you have the better: always avoid to add complexity!</p>\n<p>Here follows some articles that might be interesting to know more about caching for web applications:</p>\n<ul>\n<li><a href=\"http://docforge.com/wiki/Web_application/Caching\">Web application caching</a> by DocForge</li>\n<li><a href=\"https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises\">Fine tune your Opcache configuration to avoid caching surprises</a> by Tideways blog</li>\n<li><a href=\"http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/\">Beginners guide to HTTP cache headers</a> by Mobify</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\">HTTP Caching, optimizing content efficiency</a> by Google</li>\n<li><a href=\"http://symfony.com/it/doc/current/book/http_cache.html\">Using Http headers with Symfony</a> by Symfony</li>\n<li><a href=\"https://www.nginx.com/resources/glossary/reverse-proxy-server/\">What is a reverse proxy server</a> by Nginx</li>\n<li><a href=\"http://laravel.com/docs/5.1/cache\">Laravel cache</a> by Laravel</li>\n</ul>\n<p><a id=\"rule-5\"></a></p>\n<h2 id=\"Rule-5-Avoid-the-damn-N-1-Query-Problem\"><a href=\"#Rule-5-Avoid-the-damn-N-1-Query-Problem\" class=\"headerlink\" title=\"Rule 5: Avoid the damn N+1 Query Problem\"></a>Rule 5: Avoid the damn N+1 Query Problem</h2><p>The “<em>N+1 Query Problem</em>“ is a very common anti-pattern unintentionally used especially when dealing with relational databases. Basically it reads N record from the database by generating N+1 queries (one to read the n IDs and 1 for every record). Take a look at the following piece of code to have a real case (well… almost real) example:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//... retrieve the users from the database (1 query)</span></div><div class=\"line\">  <span class=\"keyword\">return</span> $users;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadLastLoginsForUsers</span><span class=\"params\">($users)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">foreach</span> ($users <span class=\"keyword\">as</span> $user) &#123;</div><div class=\"line\">    $lastLogins = ... <span class=\"comment\">// load the last logins for the user (1 query, executed n times)</span></div><div class=\"line\">    $user-&gt;setLastLogins($lastLogins);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> $users;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$users = getUsers();</div><div class=\"line\">loadLastLoginsForUsers($users);</div></pre></td></tr></table></figure>\n<p>The given piece of code loads a list of users at first and then, for every user, it loads his last login times from the database. This code produces the following N+1 queries:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">Users</span>; <span class=\"comment\">-- ids: 1, 2, 3, 4, 5, 6...</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"comment\">-- ...</span></div></pre></td></tr></table></figure>\n<p>That’s obviously inefficient and it happens quite often with “has many” relationships in databases, especially when you are using some kind of magic ORM and you don’t exactly know what it is doing out of the box (and probably you haven’t configured it properly).</p>\n<p>In general you can solve this problem by producing a query like the following:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">Users</span>; <span class=\"comment\">-- ids: 1, 2, 3, 4, 5, 6...</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Logins <span class=\"keyword\">WHERE</span> user_id <span class=\"keyword\">IN</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, ...);</div></pre></td></tr></table></figure>\n<p>or by using the <code>JOIN</code> syntax where possible.</p>\n<p>This problem can be only addressed when you are in control of your SQL queries or if you have a clear understanding of the ORM library you are using (if you are using one). Anyway keep it in mind and be sure you don’t fall in the N+1 queries trap, especially when you deal with large datasets. Many PHP profilers allows you to inspect the generated queries for every page request, they can be very useful companion to understand if you are doing things properly in terms of avoiding the N+1 queries problem.</p>\n<p>On a side note, speaking of databases, be sure to keep a single connection open to your data source and to not reconnect for every query.</p>\n<p>Don’t expect this to be exhaustive. This problem is very broad and it has a lot of other important case to analyze, so if you want to know more about it have a look at the following articles and books:</p>\n<ul>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/\">Performance: N+1 Query Problem</a> by Phabricator</li>\n<li><a href=\"http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem\">Nested Loops</a> by Use the Index, Luke</li>\n<li><a href=\"http://laravel.com/docs/5.0/eloquent#eager-loading\">Laravel’s Eloquent ORM Eager Loading</a> by Laravel</li>\n<li>Book <a href=\"https://leanpub.com/sn1php\">Solving The N+1 Problem In PHP</a> by Paul M. Jones</li>\n</ul>\n<p><a id=\"rule-6\"></a></p>\n<h2 id=\"Rule-6-Scale…-horizontally\"><a href=\"#Rule-6-Scale…-horizontally\" class=\"headerlink\" title=\"Rule 6: Scale… horizontally!\"></a>Rule 6: Scale… horizontally!</h2><p><img src=\"/content/images/2015/07/web-apps-explodes-like-a-baloon-scalability-comic.png\" alt=\"Horizontal scalability is hard\"></p>\n<p>“Scalability” is not exactly the same thing of “performance”, but the two things are tightly intertwined.<br>To give you my personal definition, “scalability” is the ability of a system to adapt and remain functional without noticeable performance issues when the number of users (and requests) grows.</p>\n<p>It’s a very complex and broad topic and I don’t want to get into the details here. But for the sake of performance it’s worth to understand and keep in mind some simple things that you can do to be sure your app can be easily scaled horizontally. Horizontal scaling is a particular scaling strategy in which you add more machines to the cluster where your app is deployed. This way the load is split among all the machines and thus the whole system can remain performant even when there are a lot of simultaneous requests.</p>\n<p>The two major problems to take in consideration when preparing for horizontal scaling are user sessions and user files consistency.</p>\n<ul>\n<li><strong>Sessions</strong>: quite often (especially in PHP applications) user session data is stored on the local filesystem where the app is deployed. Using this strategy is not only slower but it will not work if you have two machines to handle the requests (the session data stored in one machine will be different than the one stored in the other). A better solution is to use some kind of database to store the user session data. Most of the frameworks easily allows you to do that with just few lines of configuration. At the beginning, when your app is small and it’s not so popular, you can install your favourite session storage platform in the same machine of your web sever. Than when you will need to scale your architecture you can easily move the session storage into a separate machine and connect all your web machines to it.</li>\n<li><strong>User files consistency</strong>: Same problem of sessions happens when users can store files within your app. In these cases you need to be sure that whatever is the web server they end up with they are able to see their files. So you need to keep the files into a dedicated storage (like <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a> or <a href=\"http://www.rackspace.com/cloud/files\">Rackspace Cloudfiles</a>). Otherwise you can keep the files locally on the machines but you need to find a way to keep them synchronized within all the machines of the cluster. In this case you can use <a href=\"https://en.wikipedia.org/wiki/Network_File_System\">NFS</a> or <a href=\"http://www.gluster.org/\">GlusterFS</a> to create a shared filesystem.</li>\n</ul>\n<p>Here’s a list of other interesting resources to know more about scalable web applications:</p>\n<ul>\n<li><a href=\"http://inviqa.com/blog/horizontally-scalable-web-applications/\">Horizontally scalable web applications</a> by Inviqa</li>\n<li><a href=\"https://www.digitalocean.com/company/blog/horizontally-scaling-php-applications/\">Horizontally Scaling PHP Applications: A Practical Overview</a> by Digital Ocean</li>\n<li><a href=\"https://blog.openshift.com/best-practices-for-horizontal-application-scaling/\">Best Practices For Horizontal Application Scaling</a> by OpenShift</li>\n<li><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a> by Kate Matsudaira</li>\n<li><a href=\"http://highscalability.com/blog/2014/3/17/intuitively-showing-how-to-scale-a-web-application-using-a-c.html\">Intuitively Showing How To Scale A Web Application Using A Coffee Shop As An Example</a> by HighScalability</li>\n<li>Book <a href=\"http://theartofscalability.com/\">The art of scalability</a> by Martin Abbot and Michael Fisher</li>\n<li>Slides <a href=\"http://www.slideshare.net/davemitz/7-stages-of-scaling-web-applications\">7 Stages of scaling web applications</a> by Rackspace</li>\n</ul>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>I really hope this long post has been useful for you. I just wanted to give you an idea of what are the general concerns to take in mind when you start to write an app that should take performance under consideration. As I said in the first rule, don’t fall into the trap of premature optimization and just focus on writing the right code for the right job. Anyway if you have this points clear in your mind you will almost automatically think about good solutions to achieve a good level of performance and scalability from the very first versions of your app and you can also make some smart architectural decisions from the very beginning.</p>\n<p>In case you are an experienced web developer let me know if I forgot to mention any important rule and, if you commonly follow these rules, what you think about them.</p>\n<p>I hope some great discussion will start from the comments here.</p>\n<p>Thanks for taking your time to read this post.</p>\n<p>Until next time!</p>\n"},{"uuid":"51daa8e4-db62-4b16-86ee-490fdf6255da","layout":"post","title":"6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)","slug":"6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk","subtitle":"A talk about server performance in web applications, with some degree of focus on Php. For the Dublin Php Meetup March 2016","date":"2016-03-23T09:16:00.000Z","updated":"2016-03-23T09:51:55.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/03/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk-min.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":"A talk about server performance in web applications, with some degree of focus on Php. For the Dublin Php Meetup March 2016","_content":"\nFollowing one of my previous posts about [performance in web applications](http://loige.co/6-rules-of-thumb-to-build-blazing-fast-web-applications/), yesterday night I had the chance to give a related talk at the [Php Dublin user group](https://phpdublin.com/).\n\nMy talk was preceded by a great talk (and demo) by **Ricardo Melo** ([@rjsmelo](https://twitter.com/rjsmelo)) called [Docker and Php, a practical use case](http://www.slideshare.net/rjsmelo/docker-php-practical-use-case). If you are interested in the topic, be sure to check it out!\n\nIt was a great night, I learned a lot and I had a lot of fun, so thank you to everyone involved.\n\nIf you are interested in having a look at the slides, here they are:\n\n<iframe src=\"//slides.com/lucianomammino/6tips-web-perf/embed\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n[http://slides.com/lucianomammino/6tips-web-perf](//slides.com/lucianomammino/6tips-web-perf)\n\nFeel free to leave your opinion in the comments.\n\nCheers!\n","source":"_posts/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk.md","raw":"uuid:             51daa8e4-db62-4b16-86ee-490fdf6255da\nlayout:           post\ntitle:            '6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)'\nslug:             6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk\nsubtitle:         'A talk about server performance in web applications, with some degree of focus on Php. For the Dublin Php Meetup March 2016'\ndate:             '2016-03-23T09:16:00.000Z'\nupdated:          '2016-03-23T09:51:55.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/03/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk-min.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: 'A talk about server performance in web applications, with some degree of focus on Php. For the Dublin Php Meetup March 2016'\ntags:\n  - Php\n  - Slides\n  - Talk\n  - Performance\n\n---\n\nFollowing one of my previous posts about [performance in web applications](http://loige.co/6-rules-of-thumb-to-build-blazing-fast-web-applications/), yesterday night I had the chance to give a related talk at the [Php Dublin user group](https://phpdublin.com/).\n\nMy talk was preceded by a great talk (and demo) by **Ricardo Melo** ([@rjsmelo](https://twitter.com/rjsmelo)) called [Docker and Php, a practical use case](http://www.slideshare.net/rjsmelo/docker-php-practical-use-case). If you are interested in the topic, be sure to check it out!\n\nIt was a great night, I learned a lot and I had a lot of fun, so thank you to everyone involved.\n\nIf you are interested in having a look at the slides, here they are:\n\n<iframe src=\"//slides.com/lucianomammino/6tips-web-perf/embed\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n[http://slides.com/lucianomammino/6tips-web-perf](//slides.com/lucianomammino/6tips-web-perf)\n\nFeel free to leave your opinion in the comments.\n\nCheers!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggry40005svvu9g8db8dg","content":"<p>Following one of my previous posts about <a href=\"http://loige.co/6-rules-of-thumb-to-build-blazing-fast-web-applications/\" target=\"_blank\" rel=\"external\">performance in web applications</a>, yesterday night I had the chance to give a related talk at the <a href=\"https://phpdublin.com/\" target=\"_blank\" rel=\"external\">Php Dublin user group</a>.</p>\n<p>My talk was preceded by a great talk (and demo) by <strong>Ricardo Melo</strong> (<a href=\"https://twitter.com/rjsmelo\" target=\"_blank\" rel=\"external\">@rjsmelo</a>) called <a href=\"http://www.slideshare.net/rjsmelo/docker-php-practical-use-case\" target=\"_blank\" rel=\"external\">Docker and Php, a practical use case</a>. If you are interested in the topic, be sure to check it out!</p>\n<p>It was a great night, I learned a lot and I had a lot of fun, so thank you to everyone involved.</p>\n<p>If you are interested in having a look at the slides, here they are:</p>\n<iframe src=\"//slides.com/lucianomammino/6tips-web-perf/embed\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe>\n\n<p><a href=\"//slides.com/lucianomammino/6tips-web-perf\">http://slides.com/lucianomammino/6tips-web-perf</a></p>\n<p>Feel free to leave your opinion in the comments.</p>\n<p>Cheers!</p>\n","excerpt":"","more":"<p>Following one of my previous posts about <a href=\"http://loige.co/6-rules-of-thumb-to-build-blazing-fast-web-applications/\">performance in web applications</a>, yesterday night I had the chance to give a related talk at the <a href=\"https://phpdublin.com/\">Php Dublin user group</a>.</p>\n<p>My talk was preceded by a great talk (and demo) by <strong>Ricardo Melo</strong> (<a href=\"https://twitter.com/rjsmelo\">@rjsmelo</a>) called <a href=\"http://www.slideshare.net/rjsmelo/docker-php-practical-use-case\">Docker and Php, a practical use case</a>. If you are interested in the topic, be sure to check it out!</p>\n<p>It was a great night, I learned a lot and I had a lot of fun, so thank you to everyone involved.</p>\n<p>If you are interested in having a look at the slides, here they are:</p>\n<iframe src=\"//slides.com/lucianomammino/6tips-web-perf/embed\" width=\"576\" height=\"420\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<p><a href=\"//slides.com/lucianomammino/6tips-web-perf\">http://slides.com/lucianomammino/6tips-web-perf</a></p>\n<p>Feel free to leave your opinion in the comments.</p>\n<p>Cheers!</p>\n"},{"uuid":"5ad52a4d-18d6-4add-b97b-841aa66187aa","layout":"post","title":"Backup your server with Dropbox","slug":"backup-your-server-with-dropbox","subtitle":null,"date":"2014-01-17T03:44:19.000Z","updated":"2014-04-05T16:21:17.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn my early days as *CTO* at [Sbaam](http://sbaam.com) I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an *almost-0-budget*, so it left no space to sophysticated solutions for recurring tasks such as **backup**. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.\n\nSo, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a [Dropbox](https://db.tt/ref37L7) folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.\n\nUltimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.\n\nThis solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an *ubuntu* machine so I suppose the following steps should work on debian machines.\n\n### 1. Prepare the dropbox user\nI preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:\n\n    sudo useradd -d /dropbox -m dropbox\n\nIt will have the directory `/dropbox` as home and the name `dropbox`. You can change these values if you like.\n\nThen you have to set the password for the new user:\n\n    sudo passwd dropbox\n    \nChoose whatever password you like.\n\n**Security concern:** If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file `/etc/ssh/sshd_config` and add the rule `DenyUsers dropbox`, the restart ssh with `sudo service ssh restart`.\n\n### 2. Install the dropbox client\n\nFirst of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have `/dropbox/Dropbox` as the synced folder:\n\n    su dropbox\n    \n(enter the password for the user dropbox)\n\nNow you're the *dropbox* user. Be sure to switch to your user folder with `cd ~` and let's download and install the daemon.\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n    \nfor 32bit or\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n\nfor 64bit.\n\nExtract it:\n\n    tar -xvzf dropbox.tar.gz\n    \nIt will extract to the `~/.dropbox-dist.` folder. Now run the client:\n\n    ~/.dropbox-dist/dropbox\n    \nYou will see an output like the following:\n\n> This client is not linked to any account...\n> Please visit {SOME_URL} to link this machine. [...]\n\nCopy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press `CTRL+C` and get back to your user with the `exit` command.\n\n### 3. Dropbox as a service\n\nAt this point we need to define dropbox as a service. So let's create an *etc init script*. Download [my gist](https://gist.github.com/lmammino/8467336)\n\n    wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n    \nand move it in the init folder:\n\n    sudo mv dropbox_init_script /etc/init.d/dropbox\n   \nMake it executable:\n\n    sudo chmod +x /etc/init.d/dropbox\n   \nAnd set it to load at startup:\n\n    sudo update-rc.d dropbox defaults\n    \nNow it's a service! Run:\n\n    sudo /etc/init.d/dropbox start\n    \nto start it and feel free to use common service command such as `stop`, `restart` and `status`.\n\n### 4. Enjoy\n\nAt this point you have all your dropbox data in the `/dropbox/Dropbox` folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.\n\n**Security concerns**: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.\n\n### 5. Bonus\n\nDropbox released the [Dropbox CLI](https://www.dropbox.com/download?dl=packages/dropbox.py), a python command line application that you can use to perform some useful task such as *Selective Sync*, disable the *LAN sync* or retrive public links of your files. I suggest to download it by using the dropbox user and place it under `/dropbox/bin`. So you can simply switch to the dropbox user (again with `su dropbox`), download it and make it executable:\n\n    mkdir ~/bin\n    wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n    chmod +x ~/bin/dropbox.py\n    \nAt this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:\n\n    /dropbox/bin/dropbox.py lansync n\n\n---\n\nThat's all.\nIt was a long read but I hope it has been useful ;)\n\n\n","source":"_posts/backup-your-server-with-dropbox.md","raw":"uuid:             5ad52a4d-18d6-4add-b97b-841aa66187aa\nlayout:           post\ntitle:            'Backup your server with Dropbox'\nslug:             backup-your-server-with-dropbox\nsubtitle:         null\ndate:             '2014-01-17T03:44:19.000Z'\nupdated:          '2014-04-05T16:21:17.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Backup\n  - Dropbox\n  - Server\n\n---\n\nIn my early days as *CTO* at [Sbaam](http://sbaam.com) I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an *almost-0-budget*, so it left no space to sophysticated solutions for recurring tasks such as **backup**. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.\n\nSo, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a [Dropbox](https://db.tt/ref37L7) folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.\n\nUltimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.\n\nThis solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an *ubuntu* machine so I suppose the following steps should work on debian machines.\n\n### 1. Prepare the dropbox user\nI preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:\n\n    sudo useradd -d /dropbox -m dropbox\n\nIt will have the directory `/dropbox` as home and the name `dropbox`. You can change these values if you like.\n\nThen you have to set the password for the new user:\n\n    sudo passwd dropbox\n    \nChoose whatever password you like.\n\n**Security concern:** If you have ssh access enabled (obviously it is) it's better to disable the ssh access for the new user. So edit the file `/etc/ssh/sshd_config` and add the rule `DenyUsers dropbox`, the restart ssh with `sudo service ssh restart`.\n\n### 2. Install the dropbox client\n\nFirst of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have `/dropbox/Dropbox` as the synced folder:\n\n    su dropbox\n    \n(enter the password for the user dropbox)\n\nNow you're the *dropbox* user. Be sure to switch to your user folder with `cd ~` and let's download and install the daemon.\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86\"\n    \nfor 32bit or\n\n    wget -O dropbox.tar.gz \"http://www.dropbox.com/download/?plat=lnx.x86_64\"\n\nfor 64bit.\n\nExtract it:\n\n    tar -xvzf dropbox.tar.gz\n    \nIt will extract to the `~/.dropbox-dist.` folder. Now run the client:\n\n    ~/.dropbox-dist/dropbox\n    \nYou will see an output like the following:\n\n> This client is not linked to any account...\n> Please visit {SOME_URL} to link this machine. [...]\n\nCopy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press `CTRL+C` and get back to your user with the `exit` command.\n\n### 3. Dropbox as a service\n\nAt this point we need to define dropbox as a service. So let's create an *etc init script*. Download [my gist](https://gist.github.com/lmammino/8467336)\n\n    wget -O dropbox_init_script \"https://gist.github.com/lmammino/8467336/raw/dropbox\"\n    \nand move it in the init folder:\n\n    sudo mv dropbox_init_script /etc/init.d/dropbox\n   \nMake it executable:\n\n    sudo chmod +x /etc/init.d/dropbox\n   \nAnd set it to load at startup:\n\n    sudo update-rc.d dropbox defaults\n    \nNow it's a service! Run:\n\n    sudo /etc/init.d/dropbox start\n    \nto start it and feel free to use common service command such as `stop`, `restart` and `status`.\n\n### 4. Enjoy\n\nAt this point you have all your dropbox data in the `/dropbox/Dropbox` folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.\n\n**Security concerns**: consider that your dropbox folder acts as a normal dropbox folder so it's synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.\n\n### 5. Bonus\n\nDropbox released the [Dropbox CLI](https://www.dropbox.com/download?dl=packages/dropbox.py), a python command line application that you can use to perform some useful task such as *Selective Sync*, disable the *LAN sync* or retrive public links of your files. I suggest to download it by using the dropbox user and place it under `/dropbox/bin`. So you can simply switch to the dropbox user (again with `su dropbox`), download it and make it executable:\n\n    mkdir ~/bin\n    wget -O ~/bin/dropbox.py \"https://www.dropbox.com/download?dl=packages/dropbox.py\"\n    chmod +x ~/bin/dropbox.py\n    \nAt this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:\n\n    /dropbox/bin/dropbox.py lansync n\n\n---\n\nThat's all.\nIt was a long read but I hope it has been useful ;)\n\n\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggry60008svvu2fdtiw9c","content":"<p>In my early days as <em>CTO</em> at <a href=\"http://sbaam.com\" target=\"_blank\" rel=\"external\">Sbaam</a> I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an <em>almost-0-budget</em>, so it left no space to sophysticated solutions for recurring tasks such as <strong>backup</strong>. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.</p>\n<p>So, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a <a href=\"https://db.tt/ref37L7\" target=\"_blank\" rel=\"external\">Dropbox</a> folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.</p>\n<p>Ultimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.</p>\n<p>This solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an <em>ubuntu</em> machine so I suppose the following steps should work on debian machines.</p>\n<h3 id=\"1-Prepare-the-dropbox-user\"><a href=\"#1-Prepare-the-dropbox-user\" class=\"headerlink\" title=\"1. Prepare the dropbox user\"></a>1. Prepare the dropbox user</h3><p>I preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:</p>\n<pre><code>sudo useradd -d /dropbox -m dropbox\n</code></pre><p>It will have the directory <code>/dropbox</code> as home and the name <code>dropbox</code>. You can change these values if you like.</p>\n<p>Then you have to set the password for the new user:</p>\n<pre><code>sudo passwd dropbox\n</code></pre><p>Choose whatever password you like.</p>\n<p><strong>Security concern:</strong> If you have ssh access enabled (obviously it is) it’s better to disable the ssh access for the new user. So edit the file <code>/etc/ssh/sshd_config</code> and add the rule <code>DenyUsers dropbox</code>, the restart ssh with <code>sudo service ssh restart</code>.</p>\n<h3 id=\"2-Install-the-dropbox-client\"><a href=\"#2-Install-the-dropbox-client\" class=\"headerlink\" title=\"2. Install the dropbox client\"></a>2. Install the dropbox client</h3><p>First of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have <code>/dropbox/Dropbox</code> as the synced folder:</p>\n<pre><code>su dropbox\n</code></pre><p>(enter the password for the user dropbox)</p>\n<p>Now you’re the <em>dropbox</em> user. Be sure to switch to your user folder with <code>cd ~</code> and let’s download and install the daemon.</p>\n<pre><code>wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86&quot;\n</code></pre><p>for 32bit or</p>\n<pre><code>wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86_64&quot;\n</code></pre><p>for 64bit.</p>\n<p>Extract it:</p>\n<pre><code>tar -xvzf dropbox.tar.gz\n</code></pre><p>It will extract to the <code>~/.dropbox-dist.</code> folder. Now run the client:</p>\n<pre><code>~/.dropbox-dist/dropbox\n</code></pre><p>You will see an output like the following:</p>\n<blockquote>\n<p>This client is not linked to any account…<br>Please visit {SOME_URL} to link this machine. […]</p>\n</blockquote>\n<p>Copy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press <code>CTRL+C</code> and get back to your user with the <code>exit</code> command.</p>\n<h3 id=\"3-Dropbox-as-a-service\"><a href=\"#3-Dropbox-as-a-service\" class=\"headerlink\" title=\"3. Dropbox as a service\"></a>3. Dropbox as a service</h3><p>At this point we need to define dropbox as a service. So let’s create an <em>etc init script</em>. Download <a href=\"https://gist.github.com/lmammino/8467336\" target=\"_blank\" rel=\"external\">my gist</a></p>\n<pre><code>wget -O dropbox_init_script &quot;https://gist.github.com/lmammino/8467336/raw/dropbox&quot;\n</code></pre><p>and move it in the init folder:</p>\n<pre><code>sudo mv dropbox_init_script /etc/init.d/dropbox\n</code></pre><p>Make it executable:</p>\n<pre><code>sudo chmod +x /etc/init.d/dropbox\n</code></pre><p>And set it to load at startup:</p>\n<pre><code>sudo update-rc.d dropbox defaults\n</code></pre><p>Now it’s a service! Run:</p>\n<pre><code>sudo /etc/init.d/dropbox start\n</code></pre><p>to start it and feel free to use common service command such as <code>stop</code>, <code>restart</code> and <code>status</code>.</p>\n<h3 id=\"4-Enjoy\"><a href=\"#4-Enjoy\" class=\"headerlink\" title=\"4. Enjoy\"></a>4. Enjoy</h3><p>At this point you have all your dropbox data in the <code>/dropbox/Dropbox</code> folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.</p>\n<p><strong>Security concerns</strong>: consider that your dropbox folder acts as a normal dropbox folder so it’s synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.</p>\n<h3 id=\"5-Bonus\"><a href=\"#5-Bonus\" class=\"headerlink\" title=\"5. Bonus\"></a>5. Bonus</h3><p>Dropbox released the <a href=\"https://www.dropbox.com/download?dl=packages/dropbox.py\" target=\"_blank\" rel=\"external\">Dropbox CLI</a>, a python command line application that you can use to perform some useful task such as <em>Selective Sync</em>, disable the <em>LAN sync</em> or retrive public links of your files. I suggest to download it by using the dropbox user and place it under <code>/dropbox/bin</code>. So you can simply switch to the dropbox user (again with <code>su dropbox</code>), download it and make it executable:</p>\n<pre><code>mkdir ~/bin\nwget -O ~/bin/dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;\nchmod +x ~/bin/dropbox.py\n</code></pre><p>At this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:</p>\n<pre><code>/dropbox/bin/dropbox.py lansync n\n</code></pre><hr>\n<p>That’s all.<br>It was a long read but I hope it has been useful ;)</p>\n","excerpt":"","more":"<p>In my early days as <em>CTO</em> at <a href=\"http://sbaam.com\">Sbaam</a> I had to setup a web server from the ground up. As it happens in many startups the work had to be done quickly and with an <em>almost-0-budget</em>, so it left no space to sophysticated solutions for recurring tasks such as <strong>backup</strong>. I always have been a web developer and focused on coding so, I admit I had really a poor knowledge about how  to setup a remote unix virtual machine.</p>\n<p>So, speaking about backups, I needed a solution that would be cost-effective, easy to install and easy to mantain at the same time. I would have loved it if it can be as simple as sharing a <a href=\"https://db.tt/ref37L7\">Dropbox</a> folder. As this thought crossed my mind I wondered if there was some way to interact with dropbox from a script to create files and folders and started googling about it. Luckily Dropbox offers a good command line client that allows to bring your synced files and folders also on graphic-less machines.</p>\n<p>Ultimately my solution was to install the Dropbox command line on the server using a dedicated Dropbox account and backup files by simply copying/linking them on the Dropbox folder. This way I prepared and scheduled a script that simply had to copy the files I wanted to backup on the dropbox folder. Then I have the files backupped in the cloud and automatically synced on my local machine. Furthermore i had chance to share the backup folder with all my collaborators.</p>\n<p>This solution works very well for small projects so I will resume  all the steps I followed to install and use dropbox this way. I used an <em>ubuntu</em> machine so I suppose the following steps should work on debian machines.</p>\n<h3 id=\"1-Prepare-the-dropbox-user\"><a href=\"#1-Prepare-the-dropbox-user\" class=\"headerlink\" title=\"1. Prepare the dropbox user\"></a>1. Prepare the dropbox user</h3><p>I preferred to have a dedicated user to handle the whole Dropbox daemon and folder so just create it now:</p>\n<pre><code>sudo useradd -d /dropbox -m dropbox\n</code></pre><p>It will have the directory <code>/dropbox</code> as home and the name <code>dropbox</code>. You can change these values if you like.</p>\n<p>Then you have to set the password for the new user:</p>\n<pre><code>sudo passwd dropbox\n</code></pre><p>Choose whatever password you like.</p>\n<p><strong>Security concern:</strong> If you have ssh access enabled (obviously it is) it’s better to disable the ssh access for the new user. So edit the file <code>/etc/ssh/sshd_config</code> and add the rule <code>DenyUsers dropbox</code>, the restart ssh with <code>sudo service ssh restart</code>.</p>\n<h3 id=\"2-Install-the-dropbox-client\"><a href=\"#2-Install-the-dropbox-client\" class=\"headerlink\" title=\"2. Install the dropbox client\"></a>2. Install the dropbox client</h3><p>First of all you need to switch to the user created in the previous step, so the Dropbox installer will create the Dropbox folder under its home. At the end you will have <code>/dropbox/Dropbox</code> as the synced folder:</p>\n<pre><code>su dropbox\n</code></pre><p>(enter the password for the user dropbox)</p>\n<p>Now you’re the <em>dropbox</em> user. Be sure to switch to your user folder with <code>cd ~</code> and let’s download and install the daemon.</p>\n<pre><code>wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86&quot;\n</code></pre><p>for 32bit or</p>\n<pre><code>wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86_64&quot;\n</code></pre><p>for 64bit.</p>\n<p>Extract it:</p>\n<pre><code>tar -xvzf dropbox.tar.gz\n</code></pre><p>It will extract to the <code>~/.dropbox-dist.</code> folder. Now run the client:</p>\n<pre><code>~/.dropbox-dist/dropbox\n</code></pre><p>You will see an output like the following:</p>\n<blockquote>\n<p>This client is not linked to any account…<br>Please visit {SOME_URL} to link this machine. […]</p>\n</blockquote>\n<p>Copy and paste the provided URL in the browser bar of your local machine and it will ask you to enter the password of your dropbox account. This way it is able to authenticate your command line client and start syncing your files. At this point it should have been started its work but our shell is still locked by the client. We need to kill and daemonize it to being able to manage it as a service. Press <code>CTRL+C</code> and get back to your user with the <code>exit</code> command.</p>\n<h3 id=\"3-Dropbox-as-a-service\"><a href=\"#3-Dropbox-as-a-service\" class=\"headerlink\" title=\"3. Dropbox as a service\"></a>3. Dropbox as a service</h3><p>At this point we need to define dropbox as a service. So let’s create an <em>etc init script</em>. Download <a href=\"https://gist.github.com/lmammino/8467336\">my gist</a></p>\n<pre><code>wget -O dropbox_init_script &quot;https://gist.github.com/lmammino/8467336/raw/dropbox&quot;\n</code></pre><p>and move it in the init folder:</p>\n<pre><code>sudo mv dropbox_init_script /etc/init.d/dropbox\n</code></pre><p>Make it executable:</p>\n<pre><code>sudo chmod +x /etc/init.d/dropbox\n</code></pre><p>And set it to load at startup:</p>\n<pre><code>sudo update-rc.d dropbox defaults\n</code></pre><p>Now it’s a service! Run:</p>\n<pre><code>sudo /etc/init.d/dropbox start\n</code></pre><p>to start it and feel free to use common service command such as <code>stop</code>, <code>restart</code> and <code>status</code>.</p>\n<h3 id=\"4-Enjoy\"><a href=\"#4-Enjoy\" class=\"headerlink\" title=\"4. Enjoy\"></a>4. Enjoy</h3><p>At this point you have all your dropbox data in the <code>/dropbox/Dropbox</code> folder. Feel free to copy all the files you want in there or to schedule jobs that does all the dirty work for you. You can also create symlinks into the dropbox folder to keep files and folders placed in other locations synced.</p>\n<p><strong>Security concerns</strong>: consider that your dropbox folder acts as a normal dropbox folder so it’s synced both ways. If someone breaks into your dropbox account (or the account of some collaborator who shares the folder with you) he can use dropbox as an hole to inject malicious files into your server or steal sensible data. So, for example, avoid to have scheduled scripts and unencrypted sensible data in that folder.</p>\n<h3 id=\"5-Bonus\"><a href=\"#5-Bonus\" class=\"headerlink\" title=\"5. Bonus\"></a>5. Bonus</h3><p>Dropbox released the <a href=\"https://www.dropbox.com/download?dl=packages/dropbox.py\">Dropbox CLI</a>, a python command line application that you can use to perform some useful task such as <em>Selective Sync</em>, disable the <em>LAN sync</em> or retrive public links of your files. I suggest to download it by using the dropbox user and place it under <code>/dropbox/bin</code>. So you can simply switch to the dropbox user (again with <code>su dropbox</code>), download it and make it executable:</p>\n<pre><code>mkdir ~/bin\nwget -O ~/bin/dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;\nchmod +x ~/bin/dropbox.py\n</code></pre><p>At this point you can run the Dropbox CLI. For example if you want to disable the LAN sync (heavily suggested in this case) you can simply do:</p>\n<pre><code>/dropbox/bin/dropbox.py lansync n\n</code></pre><hr>\n<p>That’s all.<br>It was a long read but I hope it has been useful ;)</p>\n"},{"uuid":"8fcb1c0f-a438-4273-89c1-908b7e4fa218","layout":"post","title":"Announcing the book \"Node.js design patterns - second edition\"","slug":"announcing-the-book-node-js-design-patterns-second-edition","subtitle":null,"date":"2016-07-31T18:25:00.000Z","updated":"2016-08-01T18:45:47.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/07/announcing-the-book-node-js-design-patterns-second-edition.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn this post I am going to introduce my last side-project: \"Node.js design patterns — second edition\", a technical book about Node.js and design patterns published by Packt.\n\nThis blog has been a very quite place in the last 8-9 months, this is because almost all my free time has been absorbed by one of my most ambitious side projects: co-writing a book about [Node.js](/tag/node-js) and [design patterns](/tag/design-patterns)!\n\nI am finally happy to announce that \"Node.js design patterns — second edition\" has been published.\n\nYou can keep reading this post to find out more or have a look at the [official website](https://www.nodejsdesignpatterns.com). If all of this is convincing enough you can even decide to buy the paperback or the e-book on [Packt](https://www.packtpub.com/web-development/nodejs-design-patterns-second-edition), [Amazon](http://amzn.to/2a418Q2) or [O'Reilly](http://shop.oreilly.com/product/9781785885587.do) :P\n\n[![Node.js design patterns second edition book cover](/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg)](https://www.nodejsdesignpatterns.com)\n\n## The making of\n\nAs you might have noticed, this book is the second edition of an [existing book on the topic](http://amzn.to/2a9FgDP) — I dare to say *one of the best* books on the topic — that [Mario Casciaro](http://www.mariocasciaro.me) put together a couple of years ago.\n\nI was contacted by Mario in November last year because he was looking for somebody willing to help him in creating a new edition of the book. I don't know yet why he thought I might have been the right person (and I am still flattered about this) but, being his book one of my favourites, I almost immediately decided to accept the challenge and work with him and Packt on this new edition.\n\nIt took almost 9 months from the first idea to having the printed book on my desk. I have to admit it was an incredibly interesting experience for me. I learned a lot and I definitely feel I strengthened my knowledge of Node.js and design patterns, I worked with super skilled technical reviewers like [Joel Purra](http://joelpurra.com) and [Tane Piper](https://twitter.com/tanepiper) and with the amazing team at Packt. I also had chance to experiment with some new cool technologies like [React](/tag/react-js) and new ways of building websites like [Universal JavaScript](/tag/universal-javascript).\n\n## Content of the book\n\nThe book has been heavily updated: more than the 50% of the original content from the first edition was changed. These changes were mostly about updating all the code examples to **Node v6** and **EcmaScript 2015**, upgrading all the obsolete content, introducing some new interesting examples and design patterns and a new entire chapter dedicated to **Universal Javascript**.\n\nThe final result counts **11 chapters**, more than **500 pages** and more than **100 code examples**.\n\nThe first two chapters provide basic informations about the Node.js platform and the new features introduced with EcmaScript 2015.\n\nChapter 3 and 4 go deep into the topic of asynchronous programming exploring different approaches (callbacks, promises, events, async/await) and design patterns to exploit all the most common scenarios.\n\nChapter 5 discusses one of the most important patterns in Node.js: streams. It shows you how to process data with transform streams and how to combine them into different layouts.\n\nChapter 6 is probably the core of this book diving deep into the most popular conventional design patterns and showing how unconventional they might look in Node.js. It also introduces the reader to some emerging design patterns that are used only with JavaScript and Node.js.\n\nChapter 7 analyses the different solutions for linking the modules of an application together investigating design patterns such as Dependency Injection and the service locator pattern.\n\nChapter 8 is an entire new chapter that explores one of the most interesting capabilities of modern JavaScript web applications: being able to share application code between the frontend and the backend. Across this chapter we learn the basic principles of Universal (a.k.a. Isomorphic) JavaScript by building a simple web application with React, Webpack, and Babel.\n\nChapters 9, 10 and 11 go into more advanced and enterprise topics like \"Advanced Asynchronous Recipes\", \"Scalability and Architectural Patterns\" and finally \"Messaging and Integration Patterns\".\n\nYou can read [a sample of the book](https://www.nodejsdesignpatterns.com/files/nodejs_design_patterns_preview_chapter1.pdf) containing the full table of contents and the first chapter for FREE on the [official website](https://www.nodejsdesignpatterns.com), don't miss it!\n\n## Acknowledgements\n\nApart from Mario, Joel and Tane, which I already mentioned previously, I have to spend a special word of thank you for my dear friends [Anton Whalley](https://twitter.com/dhigit9), [Alessandro Cinelli](https://twitter.com/cirpo), [Andrea Giuliano](https://twitter.com/bit_shark) and [Andrea Mangano](https://twitter.com/andreaman87). They are amazing guys and they have been precious supporters during the creation of this new book with words of encouragement and incredibly meaningful technical advices.\n\nThank you once again guys :)\n\n## What's next\n\nWell, I don't plan to start writing a new book anytime soon in case you are wondering... :D But I surely will keep improving my knowledge and experience with Node.js and maybe I will also start to explore some new field in the amazing world of programming. I guess I will also be able to keep posting articles here more often :)\n\nSo stay tuned for the next post :)\n\nI will go now to take a pint to celebrate the release... Cheers 🍻\n","source":"_posts/announcing-the-book-node-js-design-patterns-second-edition.md","raw":"uuid:             8fcb1c0f-a438-4273-89c1-908b7e4fa218\nlayout:           post\ntitle:            'Announcing the book \"Node.js design patterns - second edition\"'\nslug:             announcing-the-book-node-js-design-patterns-second-edition\nsubtitle:         null\ndate:             '2016-07-31T18:25:00.000Z'\nupdated:          '2016-08-01T18:45:47.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/07/announcing-the-book-node-js-design-patterns-second-edition.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Node.js\n  - Books\n  - 'Design Patterns'\n\n---\n\nIn this post I am going to introduce my last side-project: \"Node.js design patterns — second edition\", a technical book about Node.js and design patterns published by Packt.\n\nThis blog has been a very quite place in the last 8-9 months, this is because almost all my free time has been absorbed by one of my most ambitious side projects: co-writing a book about [Node.js](/tag/node-js) and [design patterns](/tag/design-patterns)!\n\nI am finally happy to announce that \"Node.js design patterns — second edition\" has been published.\n\nYou can keep reading this post to find out more or have a look at the [official website](https://www.nodejsdesignpatterns.com). If all of this is convincing enough you can even decide to buy the paperback or the e-book on [Packt](https://www.packtpub.com/web-development/nodejs-design-patterns-second-edition), [Amazon](http://amzn.to/2a418Q2) or [O'Reilly](http://shop.oreilly.com/product/9781785885587.do) :P\n\n[![Node.js design patterns second edition book cover](/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg)](https://www.nodejsdesignpatterns.com)\n\n## The making of\n\nAs you might have noticed, this book is the second edition of an [existing book on the topic](http://amzn.to/2a9FgDP) — I dare to say *one of the best* books on the topic — that [Mario Casciaro](http://www.mariocasciaro.me) put together a couple of years ago.\n\nI was contacted by Mario in November last year because he was looking for somebody willing to help him in creating a new edition of the book. I don't know yet why he thought I might have been the right person (and I am still flattered about this) but, being his book one of my favourites, I almost immediately decided to accept the challenge and work with him and Packt on this new edition.\n\nIt took almost 9 months from the first idea to having the printed book on my desk. I have to admit it was an incredibly interesting experience for me. I learned a lot and I definitely feel I strengthened my knowledge of Node.js and design patterns, I worked with super skilled technical reviewers like [Joel Purra](http://joelpurra.com) and [Tane Piper](https://twitter.com/tanepiper) and with the amazing team at Packt. I also had chance to experiment with some new cool technologies like [React](/tag/react-js) and new ways of building websites like [Universal JavaScript](/tag/universal-javascript).\n\n## Content of the book\n\nThe book has been heavily updated: more than the 50% of the original content from the first edition was changed. These changes were mostly about updating all the code examples to **Node v6** and **EcmaScript 2015**, upgrading all the obsolete content, introducing some new interesting examples and design patterns and a new entire chapter dedicated to **Universal Javascript**.\n\nThe final result counts **11 chapters**, more than **500 pages** and more than **100 code examples**.\n\nThe first two chapters provide basic informations about the Node.js platform and the new features introduced with EcmaScript 2015.\n\nChapter 3 and 4 go deep into the topic of asynchronous programming exploring different approaches (callbacks, promises, events, async/await) and design patterns to exploit all the most common scenarios.\n\nChapter 5 discusses one of the most important patterns in Node.js: streams. It shows you how to process data with transform streams and how to combine them into different layouts.\n\nChapter 6 is probably the core of this book diving deep into the most popular conventional design patterns and showing how unconventional they might look in Node.js. It also introduces the reader to some emerging design patterns that are used only with JavaScript and Node.js.\n\nChapter 7 analyses the different solutions for linking the modules of an application together investigating design patterns such as Dependency Injection and the service locator pattern.\n\nChapter 8 is an entire new chapter that explores one of the most interesting capabilities of modern JavaScript web applications: being able to share application code between the frontend and the backend. Across this chapter we learn the basic principles of Universal (a.k.a. Isomorphic) JavaScript by building a simple web application with React, Webpack, and Babel.\n\nChapters 9, 10 and 11 go into more advanced and enterprise topics like \"Advanced Asynchronous Recipes\", \"Scalability and Architectural Patterns\" and finally \"Messaging and Integration Patterns\".\n\nYou can read [a sample of the book](https://www.nodejsdesignpatterns.com/files/nodejs_design_patterns_preview_chapter1.pdf) containing the full table of contents and the first chapter for FREE on the [official website](https://www.nodejsdesignpatterns.com), don't miss it!\n\n## Acknowledgements\n\nApart from Mario, Joel and Tane, which I already mentioned previously, I have to spend a special word of thank you for my dear friends [Anton Whalley](https://twitter.com/dhigit9), [Alessandro Cinelli](https://twitter.com/cirpo), [Andrea Giuliano](https://twitter.com/bit_shark) and [Andrea Mangano](https://twitter.com/andreaman87). They are amazing guys and they have been precious supporters during the creation of this new book with words of encouragement and incredibly meaningful technical advices.\n\nThank you once again guys :)\n\n## What's next\n\nWell, I don't plan to start writing a new book anytime soon in case you are wondering... :D But I surely will keep improving my knowledge and experience with Node.js and maybe I will also start to explore some new field in the amazing world of programming. I guess I will also be able to keep posting articles here more often :)\n\nSo stay tuned for the next post :)\n\nI will go now to take a pint to celebrate the release... Cheers 🍻\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggry80009svvuq7fcrjba","content":"<p>In this post I am going to introduce my last side-project: “Node.js design patterns — second edition”, a technical book about Node.js and design patterns published by Packt.</p>\n<p>This blog has been a very quite place in the last 8-9 months, this is because almost all my free time has been absorbed by one of my most ambitious side projects: co-writing a book about <a href=\"/tag/node-js\">Node.js</a> and <a href=\"/tag/design-patterns\">design patterns</a>!</p>\n<p>I am finally happy to announce that “Node.js design patterns — second edition” has been published.</p>\n<p>You can keep reading this post to find out more or have a look at the <a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">official website</a>. If all of this is convincing enough you can even decide to buy the paperback or the e-book on <a href=\"https://www.packtpub.com/web-development/nodejs-design-patterns-second-edition\" target=\"_blank\" rel=\"external\">Packt</a>, <a href=\"http://amzn.to/2a418Q2\" target=\"_blank\" rel=\"external\">Amazon</a> or <a href=\"http://shop.oreilly.com/product/9781785885587.do\" target=\"_blank\" rel=\"external\">O’Reilly</a> :P</p>\n<p><a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg\" alt=\"Node.js design patterns second edition book cover\"></a></p>\n<h2 id=\"The-making-of\"><a href=\"#The-making-of\" class=\"headerlink\" title=\"The making of\"></a>The making of</h2><p>As you might have noticed, this book is the second edition of an <a href=\"http://amzn.to/2a9FgDP\" target=\"_blank\" rel=\"external\">existing book on the topic</a> — I dare to say <em>one of the best</em> books on the topic — that <a href=\"http://www.mariocasciaro.me\" target=\"_blank\" rel=\"external\">Mario Casciaro</a> put together a couple of years ago.</p>\n<p>I was contacted by Mario in November last year because he was looking for somebody willing to help him in creating a new edition of the book. I don’t know yet why he thought I might have been the right person (and I am still flattered about this) but, being his book one of my favourites, I almost immediately decided to accept the challenge and work with him and Packt on this new edition.</p>\n<p>It took almost 9 months from the first idea to having the printed book on my desk. I have to admit it was an incredibly interesting experience for me. I learned a lot and I definitely feel I strengthened my knowledge of Node.js and design patterns, I worked with super skilled technical reviewers like <a href=\"http://joelpurra.com\" target=\"_blank\" rel=\"external\">Joel Purra</a> and <a href=\"https://twitter.com/tanepiper\" target=\"_blank\" rel=\"external\">Tane Piper</a> and with the amazing team at Packt. I also had chance to experiment with some new cool technologies like <a href=\"/tag/react-js\">React</a> and new ways of building websites like <a href=\"/tag/universal-javascript\">Universal JavaScript</a>.</p>\n<h2 id=\"Content-of-the-book\"><a href=\"#Content-of-the-book\" class=\"headerlink\" title=\"Content of the book\"></a>Content of the book</h2><p>The book has been heavily updated: more than the 50% of the original content from the first edition was changed. These changes were mostly about updating all the code examples to <strong>Node v6</strong> and <strong>EcmaScript 2015</strong>, upgrading all the obsolete content, introducing some new interesting examples and design patterns and a new entire chapter dedicated to <strong>Universal Javascript</strong>.</p>\n<p>The final result counts <strong>11 chapters</strong>, more than <strong>500 pages</strong> and more than <strong>100 code examples</strong>.</p>\n<p>The first two chapters provide basic informations about the Node.js platform and the new features introduced with EcmaScript 2015.</p>\n<p>Chapter 3 and 4 go deep into the topic of asynchronous programming exploring different approaches (callbacks, promises, events, async/await) and design patterns to exploit all the most common scenarios.</p>\n<p>Chapter 5 discusses one of the most important patterns in Node.js: streams. It shows you how to process data with transform streams and how to combine them into different layouts.</p>\n<p>Chapter 6 is probably the core of this book diving deep into the most popular conventional design patterns and showing how unconventional they might look in Node.js. It also introduces the reader to some emerging design patterns that are used only with JavaScript and Node.js.</p>\n<p>Chapter 7 analyses the different solutions for linking the modules of an application together investigating design patterns such as Dependency Injection and the service locator pattern.</p>\n<p>Chapter 8 is an entire new chapter that explores one of the most interesting capabilities of modern JavaScript web applications: being able to share application code between the frontend and the backend. Across this chapter we learn the basic principles of Universal (a.k.a. Isomorphic) JavaScript by building a simple web application with React, Webpack, and Babel.</p>\n<p>Chapters 9, 10 and 11 go into more advanced and enterprise topics like “Advanced Asynchronous Recipes”, “Scalability and Architectural Patterns” and finally “Messaging and Integration Patterns”.</p>\n<p>You can read <a href=\"https://www.nodejsdesignpatterns.com/files/nodejs_design_patterns_preview_chapter1.pdf\" target=\"_blank\" rel=\"external\">a sample of the book</a> containing the full table of contents and the first chapter for FREE on the <a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">official website</a>, don’t miss it!</p>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>Apart from Mario, Joel and Tane, which I already mentioned previously, I have to spend a special word of thank you for my dear friends <a href=\"https://twitter.com/dhigit9\" target=\"_blank\" rel=\"external\">Anton Whalley</a>, <a href=\"https://twitter.com/cirpo\" target=\"_blank\" rel=\"external\">Alessandro Cinelli</a>, <a href=\"https://twitter.com/bit_shark\" target=\"_blank\" rel=\"external\">Andrea Giuliano</a> and <a href=\"https://twitter.com/andreaman87\" target=\"_blank\" rel=\"external\">Andrea Mangano</a>. They are amazing guys and they have been precious supporters during the creation of this new book with words of encouragement and incredibly meaningful technical advices.</p>\n<p>Thank you once again guys :)</p>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next\"></a>What’s next</h2><p>Well, I don’t plan to start writing a new book anytime soon in case you are wondering… :D But I surely will keep improving my knowledge and experience with Node.js and maybe I will also start to explore some new field in the amazing world of programming. I guess I will also be able to keep posting articles here more often :)</p>\n<p>So stay tuned for the next post :)</p>\n<p>I will go now to take a pint to celebrate the release… Cheers 🍻</p>\n","excerpt":"","more":"<p>In this post I am going to introduce my last side-project: “Node.js design patterns — second edition”, a technical book about Node.js and design patterns published by Packt.</p>\n<p>This blog has been a very quite place in the last 8-9 months, this is because almost all my free time has been absorbed by one of my most ambitious side projects: co-writing a book about <a href=\"/tag/node-js\">Node.js</a> and <a href=\"/tag/design-patterns\">design patterns</a>!</p>\n<p>I am finally happy to announce that “Node.js design patterns — second edition” has been published.</p>\n<p>You can keep reading this post to find out more or have a look at the <a href=\"https://www.nodejsdesignpatterns.com\">official website</a>. If all of this is convincing enough you can even decide to buy the paperback or the e-book on <a href=\"https://www.packtpub.com/web-development/nodejs-design-patterns-second-edition\">Packt</a>, <a href=\"http://amzn.to/2a418Q2\">Amazon</a> or <a href=\"http://shop.oreilly.com/product/9781785885587.do\">O’Reilly</a> :P</p>\n<p><a href=\"https://www.nodejsdesignpatterns.com\"><img src=\"/content/images/2016/07/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino.jpg\" alt=\"Node.js design patterns second edition book cover\"></a></p>\n<h2 id=\"The-making-of\"><a href=\"#The-making-of\" class=\"headerlink\" title=\"The making of\"></a>The making of</h2><p>As you might have noticed, this book is the second edition of an <a href=\"http://amzn.to/2a9FgDP\">existing book on the topic</a> — I dare to say <em>one of the best</em> books on the topic — that <a href=\"http://www.mariocasciaro.me\">Mario Casciaro</a> put together a couple of years ago.</p>\n<p>I was contacted by Mario in November last year because he was looking for somebody willing to help him in creating a new edition of the book. I don’t know yet why he thought I might have been the right person (and I am still flattered about this) but, being his book one of my favourites, I almost immediately decided to accept the challenge and work with him and Packt on this new edition.</p>\n<p>It took almost 9 months from the first idea to having the printed book on my desk. I have to admit it was an incredibly interesting experience for me. I learned a lot and I definitely feel I strengthened my knowledge of Node.js and design patterns, I worked with super skilled technical reviewers like <a href=\"http://joelpurra.com\">Joel Purra</a> and <a href=\"https://twitter.com/tanepiper\">Tane Piper</a> and with the amazing team at Packt. I also had chance to experiment with some new cool technologies like <a href=\"/tag/react-js\">React</a> and new ways of building websites like <a href=\"/tag/universal-javascript\">Universal JavaScript</a>.</p>\n<h2 id=\"Content-of-the-book\"><a href=\"#Content-of-the-book\" class=\"headerlink\" title=\"Content of the book\"></a>Content of the book</h2><p>The book has been heavily updated: more than the 50% of the original content from the first edition was changed. These changes were mostly about updating all the code examples to <strong>Node v6</strong> and <strong>EcmaScript 2015</strong>, upgrading all the obsolete content, introducing some new interesting examples and design patterns and a new entire chapter dedicated to <strong>Universal Javascript</strong>.</p>\n<p>The final result counts <strong>11 chapters</strong>, more than <strong>500 pages</strong> and more than <strong>100 code examples</strong>.</p>\n<p>The first two chapters provide basic informations about the Node.js platform and the new features introduced with EcmaScript 2015.</p>\n<p>Chapter 3 and 4 go deep into the topic of asynchronous programming exploring different approaches (callbacks, promises, events, async/await) and design patterns to exploit all the most common scenarios.</p>\n<p>Chapter 5 discusses one of the most important patterns in Node.js: streams. It shows you how to process data with transform streams and how to combine them into different layouts.</p>\n<p>Chapter 6 is probably the core of this book diving deep into the most popular conventional design patterns and showing how unconventional they might look in Node.js. It also introduces the reader to some emerging design patterns that are used only with JavaScript and Node.js.</p>\n<p>Chapter 7 analyses the different solutions for linking the modules of an application together investigating design patterns such as Dependency Injection and the service locator pattern.</p>\n<p>Chapter 8 is an entire new chapter that explores one of the most interesting capabilities of modern JavaScript web applications: being able to share application code between the frontend and the backend. Across this chapter we learn the basic principles of Universal (a.k.a. Isomorphic) JavaScript by building a simple web application with React, Webpack, and Babel.</p>\n<p>Chapters 9, 10 and 11 go into more advanced and enterprise topics like “Advanced Asynchronous Recipes”, “Scalability and Architectural Patterns” and finally “Messaging and Integration Patterns”.</p>\n<p>You can read <a href=\"https://www.nodejsdesignpatterns.com/files/nodejs_design_patterns_preview_chapter1.pdf\">a sample of the book</a> containing the full table of contents and the first chapter for FREE on the <a href=\"https://www.nodejsdesignpatterns.com\">official website</a>, don’t miss it!</p>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>Apart from Mario, Joel and Tane, which I already mentioned previously, I have to spend a special word of thank you for my dear friends <a href=\"https://twitter.com/dhigit9\">Anton Whalley</a>, <a href=\"https://twitter.com/cirpo\">Alessandro Cinelli</a>, <a href=\"https://twitter.com/bit_shark\">Andrea Giuliano</a> and <a href=\"https://twitter.com/andreaman87\">Andrea Mangano</a>. They are amazing guys and they have been precious supporters during the creation of this new book with words of encouragement and incredibly meaningful technical advices.</p>\n<p>Thank you once again guys :)</p>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next\"></a>What’s next</h2><p>Well, I don’t plan to start writing a new book anytime soon in case you are wondering… :D But I surely will keep improving my knowledge and experience with Node.js and maybe I will also start to explore some new field in the amazing world of programming. I guess I will also be able to keep posting articles here more often :)</p>\n<p>So stay tuned for the next post :)</p>\n<p>I will go now to take a pint to celebrate the release… Cheers 🍻</p>\n"},{"uuid":"02beb6d0-5a44-40bf-b3b8-eac6ae6b2ec0","layout":"post","title":"Developing a web application with Lumen and MySql","slug":"developing-a-web-application-with-lumen-and-mysql","subtitle":"How to develop a simple but useful web application with the Php micro-framework Lumen and MySql in less than 30 minutes.","date":"2015-04-18T16:10:35.000Z","updated":"2015-05-12T14:33:37.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/04/developing-a-web-application-with-lumen.jpg","status":"published","language":"en_US","meta_title":"","meta_description":"How to develop a simple but useful web application with the Php micro-framework Lumen and MySql in less than 30 minutes.","_content":"\n[Lumen](http://lumen.laravel.com/) is a new [Php](/tag/php) micro-framework developed by [Taylor Otwell](https://twitter.com/taylorotwell), the same author of the famous [Laravel](http://laravel.com/) framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.\nSo to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?\n\n## A motivational quote everyday\n\nOur app should be quite simple but I'd like also to make something useful. I am a big fan of motivational quotes, and if you [follow me on Twitter](https://twitter.com/loige) (**you should!**) you probably [already know it](https://twitter.com/loige/status/588075619377885186)!\n\nSo, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best!\nTo work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That's an importante detail!\n\n![Motivational quotes Lumen Php app screenshot](/content/images/2015/04/motivation-quote-app-screenshoot.jpg)\n\n## A new Lumen project\n\nLet's start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:\n\n```bash\ncomposer global require \"laravel/lumen-installer=~1.0\"\n```\n\n**Note**: you might need to use `sudo`, depending on the way you installed Composer.\n\nOnce we have done this we have a new toy in our shell: the `lumen` command. We can now create a new project by running:\n\n```bash\nlumen new motivational\n```\n\n**motivational** is the name of our new app. The command creates a new folder for it and downloads all the dependencies.\n\nTo see our application live we need to `cd` into our `motivational` folder and run\n\n```bash\nphp artisan serve\n```\n\nOur project will be immediately up and running on `http://localhost:8000`.\n\n\n## Define the data model\n\nWe said we want to showcase quotes and in our case a quote is made up by:\n\n  - a **text** (The quoted text itself)\n  - an **author** (The name of the author of the quote)\n  - a **background** image (Yes, to make everything fancier)\n\nIn order to manage data from the database, we need to enable [Eloquent](http://laravel.com/docs/5.0/eloquent) (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let's do it step by step.\n\n\n## Enable Eloquent\n\nTo enable Eloquent we need to edit the file `bootstrap/app.php` and remove the comment on the following lines:\n\n```php\n$app->withFacades();\n$app->withEloquent();\n```\n\nNotice that the first line enables the support for [Facades](http://laravel.com/docs/5.0/facades) (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.\n\n\n## Configure the database connection\n\nFirst of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let's create our `.env` (Dotenv) configuration file. Copy the `.env.example` file into a new `.env` file and open it in your favourite editor.\n\nHere we need to edit the following lines and provide the details needed to connect to our local mysql instance:\n\n```ini\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n```\n\nBe sure to create the database (`homestead` in this case, but you can obviously customise it).\n\nIt's also a good idea in general to change the `APP_KEY` value into some random string in case you are building a \"serious\" application.\n\nTo make Lumen load this configuration file we need, again, to edit the `bootstrap/app.php` file and uncomment the following line:\n\n```php\nDotenv::load(__DIR__.'/../');\n```\n\n\n## Create a migration\n\n[Migrations](http://laravel.com/docs/5.0/migrations) allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:\n\n```bash\nphp artisan migrate:install\n```\n\nThis command creates a special table in our database called `migrations` that will be used internally from the framework to keep track of all the available migrations and the current one used.\n\nEvery migrations is identified by a file that generally lives in the `database/migrations` folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc...). In our case we need to create a new table, the \"quotes\" table to be precise. Let's run this:\n\n```bash\nphp artisan make:migration --create=quotes create_quotes_table\n```\n\nIt creates a new file under the `database/migrations` folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the `up()` function a bit:\n\n```php\npublic function up()\n{\n    Schema::create('quotes', function(Blueprint $table)\n    {\n         $table->increments('id');\n    \t\t\t     $table->timestamps();\t\t\t\n\n         // our new fields\n    \t\t\t     $table->string('text');\n    \t\t\t     $table->string('author');\n    \t\t\t     $table->string('background');\n    });\n}\n```\n\nTo execute the migration (and effectively create the table on the database) we have to run:\n\n```bash\nphp artisan migrate\n```\n\n\n## Create the Quote model\n\nIn general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.\n\nIn our case we need to define the `Quote` model in `app/Models/Quote.php`:\n\n```php\n<?php\n\n# app/Models/Quote.php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfinal class Quote extends Model\n{\n\n}\n```\n\nYes, that's it... we don't really need to write anything else! We are extending the Eloquent `Model` class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class `Quote` to the `quotes` table that we created before.\n\n\n## Seed the database\n\nThe seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It's quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).\n\nSeeds files are stored in `database/seeds` and we need to create a new file there. We will call it `QuoteTableSeeder.php`:\n\n```php\n<?php\n\n# database/seeds/QuoteTableSeeder.php\n\nuse App\\Models\\Quote;\nuse Illuminate\\Database\\Seeder;\n\nclass QuoteTableSeeder extends Seeder\n{\n    public function run()\n    {\n        Quote::create([\n            'text' => 'Success is going from failure to failure without losing your enthusiasm',\n            'author' => 'Winston Churchill',\n            'background' => '1.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'Dream big and dare to fail',\n            'author' => 'Norman Vaughan',\n            'background' => '2.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'It does not matter how slowly you go as long as you do not stop',\n            'author' => 'Confucius',\n            'background' => '3.jpg'\n        ]);\n\n        //... add more quotes if you want!\n    }\n}\n```\n\nThe code is quite self explanatory: every call to `Quote::create` inserts a new record into the `quotes` table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the `background` field. You need to have these files into your `public/img/` folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the [Unsplash project](http://unsplash.com).\n\nTo enable this seed script we need to link it to the main `DatabaseSeeder` script by adding the following line within the `run()` method:\n\n```php\n$this->call('QuoteTableSeeder');\n```\n\nNow we just need to launch the following command to execute the seed script and populate the database:\n\n```bash\nphp artisan db:seed\n```\n\nDamn, we got a `Class QuoteTableSeeder does not exist`! That's why by default Lumen Composer file maps the `database` path with the `classmap` strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:\n\n```bash\ncomposer dump-autoload\n```\n\nNow let's run again `php artisan db:seed` and this time everything should be fine.\nIf you explore your database you will see some records within the `quotes` table.\n\n\n## The routing\n\nUntil now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.\n\nWe will have two routes:\n\n  - GET `/` - the main route, providing a new quote everyday\n  - GET `/{id}` - the route of a specific quote, mapped by id\n\nTo define the business logic associate to a route we have to edit the `app/Http/routes.php` file:\n\n```php\n<?php\n\n# app/Http/routes.php\n\nuse App\\Models\\Quote;\n\n/**\n * Display the today quote\n */\n$app->get('/', function() use ($app) {\n\n    /*\n     * Picks a different quote every day \n     * (for a maximum of 366 quotes)\n     *\n     *   - $count: the total number of available quotes\n     *   - $day: the current day of the year (from 0 to 365)\n     *   - $page: the page to look for to retrieve the \n     *            correct record\n     */\n    $count = Quote::query()->get()->count();\n    $day = (int) date('z');\n    $page = $day % $count + 1;\n\n    $quotes = Quote::query()->get()->forPage($page, 1)->all();\n\n    if (empty($quotes)) {\n        throw new \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();\n    }\n\n    return view('quote', ['quote' => $quotes[0]]);\n});\n\n/**\n * Display a specific quote\n */\n$app->get('/{id}', function($id) use ($app) {\n    $quote = Quote::query()->findOrFail($id);\n    return view('quote', ['quote' => $quote]);\n});\n```\n\nThe two `$app->get` defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.\n\nThe `view()` function allow to render a template. In this case we are rendering the  `quote` template passing the model as `quote` variable. In the next paragraph we will see how to define our template.\n\n**Note**: if you don't want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel's controllers. I will not go into the detail of this, but you can check the [Documentation](http://lumen.laravel.com/docs/controllers) that shows how to do it. It's quite simple anyway.\n\n\n## The template\n\nLumen uses the Laravel default template language, [Blade](http://lumen.laravel.com/docs/templates). Blade allows us to render complex HTML code in a easy way. All the templates live in the `resources/views` folder. Let's create the `quote.blade.php` file:\n\n```html\n<!-- resources/views/quote.blade.php -->\n\n<html>\n<head>\n    <title>Motivaitonal — Your daily source of motivation!</title>\n    <link href=\"/css/style.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href='http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed' rel='stylesheet' type='text/css'>\n</head>\n<body style=\"background-image: url('/img/{{$quote->background}}')\">\n<div class=\"container\">\n    <div class=\"quote-container\">\n        <p class=\"text\">{{$quote->text}}</p>\n        <p class=\"author\">— {{$quote->author}}</p>\n    </div>\n</div>\n</body>\n</html>\n```\n\nAs you can see we can use the double curly braces syntax to reference variable values.\n\nTo finish we just need to create our `public/css/style.css` stylesheet file:\n\n```css\nhtml, body {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    background-size: cover;\n}\n\n.container {\n    height: 100%;\n    background: rgba(0,0,0,.3);\n}\n\n.quote-container {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    padding: 2em 4em;\n}\n\n.quote-container p {\n    text-align: center;\n    color: #fff;\n    text-shadow: 1px 1px 1px rgba(150, 150, 150, 0.8);\n}\n\n.quote-container p.text {\n    font-family: 'Alegreya', serif;\n    font-size: 4em;\n}\n\n.quote-container p.author {\n    font-family: 'Roboto Condensed', sans-serif;\n    font-size: 1.2em;\n}\n```\n\nThat's it, now your app is up and running. Isn't it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)\n\n\n## Conclusions\n\nLumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the [cache layer](http://lumen.laravel.com/docs/cache) and the [job queue library](http://lumen.laravel.com/docs/queues).\nHave you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of [Php](/tag/php) framework available out there? I'm really curious to know what you think about it, let me know it in the comments!\n\nBest regards and have a very motivated day ;)\n","source":"_posts/developing-a-web-application-with-lumen-and-mysql.md","raw":"uuid:             02beb6d0-5a44-40bf-b3b8-eac6ae6b2ec0\nlayout:           post\ntitle:            'Developing a web application with Lumen and MySql'\nslug:             developing-a-web-application-with-lumen-and-mysql\nsubtitle:         'How to develop a simple but useful web application with the Php micro-framework Lumen and MySql in less than 30 minutes.'\ndate:             '2015-04-18T16:10:35.000Z'\nupdated:          '2015-05-12T14:33:37.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/04/developing-a-web-application-with-lumen.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       \"\"\nmeta_description: 'How to develop a simple but useful web application with the Php micro-framework Lumen and MySql in less than 30 minutes.'\ntags:\n  - Php\n  - MySql\n  - Lumen\n  - Laravel\n\n---\n\n[Lumen](http://lumen.laravel.com/) is a new [Php](/tag/php) micro-framework developed by [Taylor Otwell](https://twitter.com/taylorotwell), the same author of the famous [Laravel](http://laravel.com/) framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.\nSo to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?\n\n## A motivational quote everyday\n\nOur app should be quite simple but I'd like also to make something useful. I am a big fan of motivational quotes, and if you [follow me on Twitter](https://twitter.com/loige) (**you should!**) you probably [already know it](https://twitter.com/loige/status/588075619377885186)!\n\nSo, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best!\nTo work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That's an importante detail!\n\n![Motivational quotes Lumen Php app screenshot](/content/images/2015/04/motivation-quote-app-screenshoot.jpg)\n\n## A new Lumen project\n\nLet's start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:\n\n```bash\ncomposer global require \"laravel/lumen-installer=~1.0\"\n```\n\n**Note**: you might need to use `sudo`, depending on the way you installed Composer.\n\nOnce we have done this we have a new toy in our shell: the `lumen` command. We can now create a new project by running:\n\n```bash\nlumen new motivational\n```\n\n**motivational** is the name of our new app. The command creates a new folder for it and downloads all the dependencies.\n\nTo see our application live we need to `cd` into our `motivational` folder and run\n\n```bash\nphp artisan serve\n```\n\nOur project will be immediately up and running on `http://localhost:8000`.\n\n\n## Define the data model\n\nWe said we want to showcase quotes and in our case a quote is made up by:\n\n  - a **text** (The quoted text itself)\n  - an **author** (The name of the author of the quote)\n  - a **background** image (Yes, to make everything fancier)\n\nIn order to manage data from the database, we need to enable [Eloquent](http://laravel.com/docs/5.0/eloquent) (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let's do it step by step.\n\n\n## Enable Eloquent\n\nTo enable Eloquent we need to edit the file `bootstrap/app.php` and remove the comment on the following lines:\n\n```php\n$app->withFacades();\n$app->withEloquent();\n```\n\nNotice that the first line enables the support for [Facades](http://laravel.com/docs/5.0/facades) (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.\n\n\n## Configure the database connection\n\nFirst of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let's create our `.env` (Dotenv) configuration file. Copy the `.env.example` file into a new `.env` file and open it in your favourite editor.\n\nHere we need to edit the following lines and provide the details needed to connect to our local mysql instance:\n\n```ini\nDB_CONNECTION=mysql\nDB_HOST=localhost\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n```\n\nBe sure to create the database (`homestead` in this case, but you can obviously customise it).\n\nIt's also a good idea in general to change the `APP_KEY` value into some random string in case you are building a \"serious\" application.\n\nTo make Lumen load this configuration file we need, again, to edit the `bootstrap/app.php` file and uncomment the following line:\n\n```php\nDotenv::load(__DIR__.'/../');\n```\n\n\n## Create a migration\n\n[Migrations](http://laravel.com/docs/5.0/migrations) allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:\n\n```bash\nphp artisan migrate:install\n```\n\nThis command creates a special table in our database called `migrations` that will be used internally from the framework to keep track of all the available migrations and the current one used.\n\nEvery migrations is identified by a file that generally lives in the `database/migrations` folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc...). In our case we need to create a new table, the \"quotes\" table to be precise. Let's run this:\n\n```bash\nphp artisan make:migration --create=quotes create_quotes_table\n```\n\nIt creates a new file under the `database/migrations` folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the `up()` function a bit:\n\n```php\npublic function up()\n{\n    Schema::create('quotes', function(Blueprint $table)\n    {\n         $table->increments('id');\n    \t\t\t     $table->timestamps();\t\t\t\n\n         // our new fields\n    \t\t\t     $table->string('text');\n    \t\t\t     $table->string('author');\n    \t\t\t     $table->string('background');\n    });\n}\n```\n\nTo execute the migration (and effectively create the table on the database) we have to run:\n\n```bash\nphp artisan migrate\n```\n\n\n## Create the Quote model\n\nIn general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.\n\nIn our case we need to define the `Quote` model in `app/Models/Quote.php`:\n\n```php\n<?php\n\n# app/Models/Quote.php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfinal class Quote extends Model\n{\n\n}\n```\n\nYes, that's it... we don't really need to write anything else! We are extending the Eloquent `Model` class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class `Quote` to the `quotes` table that we created before.\n\n\n## Seed the database\n\nThe seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It's quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).\n\nSeeds files are stored in `database/seeds` and we need to create a new file there. We will call it `QuoteTableSeeder.php`:\n\n```php\n<?php\n\n# database/seeds/QuoteTableSeeder.php\n\nuse App\\Models\\Quote;\nuse Illuminate\\Database\\Seeder;\n\nclass QuoteTableSeeder extends Seeder\n{\n    public function run()\n    {\n        Quote::create([\n            'text' => 'Success is going from failure to failure without losing your enthusiasm',\n            'author' => 'Winston Churchill',\n            'background' => '1.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'Dream big and dare to fail',\n            'author' => 'Norman Vaughan',\n            'background' => '2.jpg'\n        ]);\n\n        Quote::create([\n            'text' => 'It does not matter how slowly you go as long as you do not stop',\n            'author' => 'Confucius',\n            'background' => '3.jpg'\n        ]);\n\n        //... add more quotes if you want!\n    }\n}\n```\n\nThe code is quite self explanatory: every call to `Quote::create` inserts a new record into the `quotes` table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the `background` field. You need to have these files into your `public/img/` folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the [Unsplash project](http://unsplash.com).\n\nTo enable this seed script we need to link it to the main `DatabaseSeeder` script by adding the following line within the `run()` method:\n\n```php\n$this->call('QuoteTableSeeder');\n```\n\nNow we just need to launch the following command to execute the seed script and populate the database:\n\n```bash\nphp artisan db:seed\n```\n\nDamn, we got a `Class QuoteTableSeeder does not exist`! That's why by default Lumen Composer file maps the `database` path with the `classmap` strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:\n\n```bash\ncomposer dump-autoload\n```\n\nNow let's run again `php artisan db:seed` and this time everything should be fine.\nIf you explore your database you will see some records within the `quotes` table.\n\n\n## The routing\n\nUntil now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.\n\nWe will have two routes:\n\n  - GET `/` - the main route, providing a new quote everyday\n  - GET `/{id}` - the route of a specific quote, mapped by id\n\nTo define the business logic associate to a route we have to edit the `app/Http/routes.php` file:\n\n```php\n<?php\n\n# app/Http/routes.php\n\nuse App\\Models\\Quote;\n\n/**\n * Display the today quote\n */\n$app->get('/', function() use ($app) {\n\n    /*\n     * Picks a different quote every day \n     * (for a maximum of 366 quotes)\n     *\n     *   - $count: the total number of available quotes\n     *   - $day: the current day of the year (from 0 to 365)\n     *   - $page: the page to look for to retrieve the \n     *            correct record\n     */\n    $count = Quote::query()->get()->count();\n    $day = (int) date('z');\n    $page = $day % $count + 1;\n\n    $quotes = Quote::query()->get()->forPage($page, 1)->all();\n\n    if (empty($quotes)) {\n        throw new \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();\n    }\n\n    return view('quote', ['quote' => $quotes[0]]);\n});\n\n/**\n * Display a specific quote\n */\n$app->get('/{id}', function($id) use ($app) {\n    $quote = Quote::query()->findOrFail($id);\n    return view('quote', ['quote' => $quote]);\n});\n```\n\nThe two `$app->get` defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.\n\nThe `view()` function allow to render a template. In this case we are rendering the  `quote` template passing the model as `quote` variable. In the next paragraph we will see how to define our template.\n\n**Note**: if you don't want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel's controllers. I will not go into the detail of this, but you can check the [Documentation](http://lumen.laravel.com/docs/controllers) that shows how to do it. It's quite simple anyway.\n\n\n## The template\n\nLumen uses the Laravel default template language, [Blade](http://lumen.laravel.com/docs/templates). Blade allows us to render complex HTML code in a easy way. All the templates live in the `resources/views` folder. Let's create the `quote.blade.php` file:\n\n```html\n<!-- resources/views/quote.blade.php -->\n\n<html>\n<head>\n    <title>Motivaitonal — Your daily source of motivation!</title>\n    <link href=\"/css/style.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href='http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed' rel='stylesheet' type='text/css'>\n</head>\n<body style=\"background-image: url('/img/{{$quote->background}}')\">\n<div class=\"container\">\n    <div class=\"quote-container\">\n        <p class=\"text\">{{$quote->text}}</p>\n        <p class=\"author\">— {{$quote->author}}</p>\n    </div>\n</div>\n</body>\n</html>\n```\n\nAs you can see we can use the double curly braces syntax to reference variable values.\n\nTo finish we just need to create our `public/css/style.css` stylesheet file:\n\n```css\nhtml, body {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    background-size: cover;\n}\n\n.container {\n    height: 100%;\n    background: rgba(0,0,0,.3);\n}\n\n.quote-container {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    padding: 2em 4em;\n}\n\n.quote-container p {\n    text-align: center;\n    color: #fff;\n    text-shadow: 1px 1px 1px rgba(150, 150, 150, 0.8);\n}\n\n.quote-container p.text {\n    font-family: 'Alegreya', serif;\n    font-size: 4em;\n}\n\n.quote-container p.author {\n    font-family: 'Roboto Condensed', sans-serif;\n    font-size: 1.2em;\n}\n```\n\nThat's it, now your app is up and running. Isn't it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)\n\n\n## Conclusions\n\nLumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the [cache layer](http://lumen.laravel.com/docs/cache) and the [job queue library](http://lumen.laravel.com/docs/queues).\nHave you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of [Php](/tag/php) framework available out there? I'm really curious to know what you think about it, let me know it in the comments!\n\nBest regards and have a very motivated day ;)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryc000bsvvu8vbs0dly","content":"<p><a href=\"http://lumen.laravel.com/\" target=\"_blank\" rel=\"external\">Lumen</a> is a new <a href=\"/tag/php\">Php</a> micro-framework developed by <a href=\"https://twitter.com/taylorotwell\" target=\"_blank\" rel=\"external\">Taylor Otwell</a>, the same author of the famous <a href=\"http://laravel.com/\" target=\"_blank\" rel=\"external\">Laravel</a> framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.<br>So to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?</p>\n<h2 id=\"A-motivational-quote-everyday\"><a href=\"#A-motivational-quote-everyday\" class=\"headerlink\" title=\"A motivational quote everyday\"></a>A motivational quote everyday</h2><p>Our app should be quite simple but I’d like also to make something useful. I am a big fan of motivational quotes, and if you <a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">follow me on Twitter</a> (<strong>you should!</strong>) you probably <a href=\"https://twitter.com/loige/status/588075619377885186\" target=\"_blank\" rel=\"external\">already know it</a>!</p>\n<p>So, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best!<br>To work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That’s an importante detail!</p>\n<p><img src=\"/content/images/2015/04/motivation-quote-app-screenshoot.jpg\" alt=\"Motivational quotes Lumen Php app screenshot\"></p>\n<h2 id=\"A-new-Lumen-project\"><a href=\"#A-new-Lumen-project\" class=\"headerlink\" title=\"A new Lumen project\"></a>A new Lumen project</h2><p>Let’s start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require <span class=\"string\">\"laravel/lumen-installer=~1.0\"</span></div></pre></td></tr></table></figure>\n<p><strong>Note</strong>: you might need to use <code>sudo</code>, depending on the way you installed Composer.</p>\n<p>Once we have done this we have a new toy in our shell: the <code>lumen</code> command. We can now create a new project by running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lumen new motivational</div></pre></td></tr></table></figure>\n<p><strong>motivational</strong> is the name of our new app. The command creates a new folder for it and downloads all the dependencies.</p>\n<p>To see our application live we need to <code>cd</code> into our <code>motivational</code> folder and run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan serve</div></pre></td></tr></table></figure>\n<p>Our project will be immediately up and running on <code>http://localhost:8000</code>.</p>\n<h2 id=\"Define-the-data-model\"><a href=\"#Define-the-data-model\" class=\"headerlink\" title=\"Define the data model\"></a>Define the data model</h2><p>We said we want to showcase quotes and in our case a quote is made up by:</p>\n<ul>\n<li>a <strong>text</strong> (The quoted text itself)</li>\n<li>an <strong>author</strong> (The name of the author of the quote)</li>\n<li>a <strong>background</strong> image (Yes, to make everything fancier)</li>\n</ul>\n<p>In order to manage data from the database, we need to enable <a href=\"http://laravel.com/docs/5.0/eloquent\" target=\"_blank\" rel=\"external\">Eloquent</a> (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let’s do it step by step.</p>\n<h2 id=\"Enable-Eloquent\"><a href=\"#Enable-Eloquent\" class=\"headerlink\" title=\"Enable Eloquent\"></a>Enable Eloquent</h2><p>To enable Eloquent we need to edit the file <code>bootstrap/app.php</code> and remove the comment on the following lines:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$app-&gt;withFacades();</div><div class=\"line\">$app-&gt;withEloquent();</div></pre></td></tr></table></figure>\n<p>Notice that the first line enables the support for <a href=\"http://laravel.com/docs/5.0/facades\" target=\"_blank\" rel=\"external\">Facades</a> (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.</p>\n<h2 id=\"Configure-the-database-connection\"><a href=\"#Configure-the-database-connection\" class=\"headerlink\" title=\"Configure the database connection\"></a>Configure the database connection</h2><p>First of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let’s create our <code>.env</code> (Dotenv) configuration file. Copy the <code>.env.example</code> file into a new <code>.env</code> file and open it in your favourite editor.</p>\n<p>Here we need to edit the following lines and provide the details needed to connect to our local mysql instance:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">DB_CONNECTION</span>=mysql</div><div class=\"line\"><span class=\"attr\">DB_HOST</span>=localhost</div><div class=\"line\"><span class=\"attr\">DB_DATABASE</span>=homestead</div><div class=\"line\"><span class=\"attr\">DB_USERNAME</span>=homestead</div><div class=\"line\"><span class=\"attr\">DB_PASSWORD</span>=secret</div></pre></td></tr></table></figure>\n<p>Be sure to create the database (<code>homestead</code> in this case, but you can obviously customise it).</p>\n<p>It’s also a good idea in general to change the <code>APP_KEY</code> value into some random string in case you are building a “serious” application.</p>\n<p>To make Lumen load this configuration file we need, again, to edit the <code>bootstrap/app.php</code> file and uncomment the following line:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dotenv::load(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Create-a-migration\"><a href=\"#Create-a-migration\" class=\"headerlink\" title=\"Create a migration\"></a>Create a migration</h2><p><a href=\"http://laravel.com/docs/5.0/migrations\" target=\"_blank\" rel=\"external\">Migrations</a> allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate:install</div></pre></td></tr></table></figure>\n<p>This command creates a special table in our database called <code>migrations</code> that will be used internally from the framework to keep track of all the available migrations and the current one used.</p>\n<p>Every migrations is identified by a file that generally lives in the <code>database/migrations</code> folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc…). In our case we need to create a new table, the “quotes” table to be precise. Let’s run this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:migration --create=quotes create_quotes_table</div></pre></td></tr></table></figure>\n<p>It creates a new file under the <code>database/migrations</code> folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the <code>up()</code> function a bit:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">up</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    Schema::create(<span class=\"string\">'quotes'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(Blueprint $table)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">         $table-&gt;increments(<span class=\"string\">'id'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;timestamps();\t\t\t</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// our new fields</span></div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'text'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'author'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'background'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To execute the migration (and effectively create the table on the database) we have to run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<h2 id=\"Create-the-Quote-model\"><a href=\"#Create-the-Quote-model\" class=\"headerlink\" title=\"Create the Quote model\"></a>Create the Quote model</h2><p>In general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.</p>\n<p>In our case we need to define the <code>Quote</code> model in <code>app/Models/Quote.php</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># app/Models/Quote.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quote</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Yes, that’s it… we don’t really need to write anything else! We are extending the Eloquent <code>Model</code> class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class <code>Quote</code> to the <code>quotes</code> table that we created before.</p>\n<h2 id=\"Seed-the-database\"><a href=\"#Seed-the-database\" class=\"headerlink\" title=\"Seed the database\"></a>Seed the database</h2><p>The seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It’s quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).</p>\n<p>Seeds files are stored in <code>database/seeds</code> and we need to create a new file there. We will call it <code>QuoteTableSeeder.php</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># database/seeds/QuoteTableSeeder.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>\\<span class=\"title\">Quote</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Seeder</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuoteTableSeeder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Seeder</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'Success is going from failure to failure without losing your enthusiasm'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Winston Churchill'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'1.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'Dream big and dare to fail'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Norman Vaughan'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'2.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'It does not matter how slowly you go as long as you do not stop'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Confucius'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'3.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//... add more quotes if you want!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code is quite self explanatory: every call to <code>Quote::create</code> inserts a new record into the <code>quotes</code> table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the <code>background</code> field. You need to have these files into your <code>public/img/</code> folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the <a href=\"http://unsplash.com\" target=\"_blank\" rel=\"external\">Unsplash project</a>.</p>\n<p>To enable this seed script we need to link it to the main <code>DatabaseSeeder</code> script by adding the following line within the <code>run()</code> method:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;call(<span class=\"string\">'QuoteTableSeeder'</span>);</div></pre></td></tr></table></figure>\n<p>Now we just need to launch the following command to execute the seed script and populate the database:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan db:seed</div></pre></td></tr></table></figure>\n<p>Damn, we got a <code>Class QuoteTableSeeder does not exist</code>! That’s why by default Lumen Composer file maps the <code>database</code> path with the <code>classmap</code> strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer dump-autoload</div></pre></td></tr></table></figure>\n<p>Now let’s run again <code>php artisan db:seed</code> and this time everything should be fine.<br>If you explore your database you will see some records within the <code>quotes</code> table.</p>\n<h2 id=\"The-routing\"><a href=\"#The-routing\" class=\"headerlink\" title=\"The routing\"></a>The routing</h2><p>Until now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.</p>\n<p>We will have two routes:</p>\n<ul>\n<li>GET <code>/</code> - the main route, providing a new quote everyday</li>\n<li>GET <code>/{id}</code> - the route of a specific quote, mapped by id</li>\n</ul>\n<p>To define the business logic associate to a route we have to edit the <code>app/Http/routes.php</code> file:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># app/Http/routes.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>\\<span class=\"title\">Quote</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Display the today quote</div><div class=\"line\"> */</div><div class=\"line\">$app-&gt;get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($app)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Picks a different quote every day </div><div class=\"line\">     * (for a maximum of 366 quotes)</div><div class=\"line\">     *</div><div class=\"line\">     *   - $count: the total number of available quotes</div><div class=\"line\">     *   - $day: the current day of the year (from 0 to 365)</div><div class=\"line\">     *   - $page: the page to look for to retrieve the </div><div class=\"line\">     *            correct record</div><div class=\"line\">     */</div><div class=\"line\">    $count = Quote::query()-&gt;get()-&gt;count();</div><div class=\"line\">    $day = (int) date(<span class=\"string\">'z'</span>);</div><div class=\"line\">    $page = $day % $count + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    $quotes = Quote::query()-&gt;get()-&gt;forPage($page, <span class=\"number\">1</span>)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($quotes)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'quote'</span>, [<span class=\"string\">'quote'</span> =&gt; $quotes[<span class=\"number\">0</span>]]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Display a specific quote</div><div class=\"line\"> */</div><div class=\"line\">$app-&gt;get(<span class=\"string\">'/&#123;id&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($id)</span> <span class=\"title\">use</span> <span class=\"params\">($app)</span> </span>&#123;</div><div class=\"line\">    $quote = Quote::query()-&gt;findOrFail($id);</div><div class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'quote'</span>, [<span class=\"string\">'quote'</span> =&gt; $quote]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The two <code>$app-&gt;get</code> defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.</p>\n<p>The <code>view()</code> function allow to render a template. In this case we are rendering the  <code>quote</code> template passing the model as <code>quote</code> variable. In the next paragraph we will see how to define our template.</p>\n<p><strong>Note</strong>: if you don’t want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel’s controllers. I will not go into the detail of this, but you can check the <a href=\"http://lumen.laravel.com/docs/controllers\" target=\"_blank\" rel=\"external\">Documentation</a> that shows how to do it. It’s quite simple anyway.</p>\n<h2 id=\"The-template\"><a href=\"#The-template\" class=\"headerlink\" title=\"The template\"></a>The template</h2><p>Lumen uses the Laravel default template language, <a href=\"http://lumen.laravel.com/docs/templates\" target=\"_blank\" rel=\"external\">Blade</a>. Blade allows us to render complex HTML code in a easy way. All the templates live in the <code>resources/views</code> folder. Let’s create the <code>quote.blade.php</code> file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- resources/views/quote.blade.php --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Motivaitonal — Your daily source of motivation!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed'</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/css'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-image: url('/img/&#123;&#123;$quote-&gt;background&#125;&#125;')\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"quote-container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123;$quote-&gt;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span>— &#123;&#123;$quote-&gt;author&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can see we can use the double curly braces syntax to reference variable values.</p>\n<p>To finish we just need to create our <code>public/css/style.css</code> stylesheet file:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.3);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2em</span> <span class=\"number\">4em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(150, 150, 150, 0.8);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.text</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Alegreya'</span>, serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">4em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.author</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Roboto Condensed'</span>, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it, now your app is up and running. Isn’t it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>Lumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the <a href=\"http://lumen.laravel.com/docs/cache\" target=\"_blank\" rel=\"external\">cache layer</a> and the <a href=\"http://lumen.laravel.com/docs/queues\" target=\"_blank\" rel=\"external\">job queue library</a>.<br>Have you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of <a href=\"/tag/php\">Php</a> framework available out there? I’m really curious to know what you think about it, let me know it in the comments!</p>\n<p>Best regards and have a very motivated day ;)</p>\n","excerpt":"","more":"<p><a href=\"http://lumen.laravel.com/\">Lumen</a> is a new <a href=\"/tag/php\">Php</a> micro-framework developed by <a href=\"https://twitter.com/taylorotwell\">Taylor Otwell</a>, the same author of the famous <a href=\"http://laravel.com/\">Laravel</a> framework. I wanted to give it a try and I am here to share my experimentations. I am not an expert of Lumen (yet), but I think one of the best characteristics of this framework is that it makes really really easy to bootstrap a new project.<br>So to prove this, we will now build a fully functional app backed by a MySql database in less than 30 minutes. Are you ready to start?</p>\n<h2 id=\"A-motivational-quote-everyday\"><a href=\"#A-motivational-quote-everyday\" class=\"headerlink\" title=\"A motivational quote everyday\"></a>A motivational quote everyday</h2><p>Our app should be quite simple but I’d like also to make something useful. I am a big fan of motivational quotes, and if you <a href=\"https://twitter.com/loige\">follow me on Twitter</a> (<strong>you should!</strong>) you probably <a href=\"https://twitter.com/loige/status/588075619377885186\">already know it</a>!</p>\n<p>So, the idea is to build a web app that showcases a new quote everyday. This way, everyday when you wake up you can run your application and be inspired and motivated by a wise and energising quote to do your best!<br>To work best our app should obviously be fancy, with über cool background images, like in the screenshot above. That’s an importante detail!</p>\n<p><img src=\"/content/images/2015/04/motivation-quote-app-screenshoot.jpg\" alt=\"Motivational quotes Lumen Php app screenshot\"></p>\n<h2 id=\"A-new-Lumen-project\"><a href=\"#A-new-Lumen-project\" class=\"headerlink\" title=\"A new Lumen project\"></a>A new Lumen project</h2><p>Let’s start. First of all, to create a new Lumen project, we need to have the Lumen command line installer. A very simple tool, which in turn uses Composer, that allow us to bootstrap a new Lumen project in few seconds. To get it ensure to have installed Composer globally and run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require <span class=\"string\">\"laravel/lumen-installer=~1.0\"</span></div></pre></td></tr></table></figure>\n<p><strong>Note</strong>: you might need to use <code>sudo</code>, depending on the way you installed Composer.</p>\n<p>Once we have done this we have a new toy in our shell: the <code>lumen</code> command. We can now create a new project by running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lumen new motivational</div></pre></td></tr></table></figure>\n<p><strong>motivational</strong> is the name of our new app. The command creates a new folder for it and downloads all the dependencies.</p>\n<p>To see our application live we need to <code>cd</code> into our <code>motivational</code> folder and run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan serve</div></pre></td></tr></table></figure>\n<p>Our project will be immediately up and running on <code>http://localhost:8000</code>.</p>\n<h2 id=\"Define-the-data-model\"><a href=\"#Define-the-data-model\" class=\"headerlink\" title=\"Define the data model\"></a>Define the data model</h2><p>We said we want to showcase quotes and in our case a quote is made up by:</p>\n<ul>\n<li>a <strong>text</strong> (The quoted text itself)</li>\n<li>an <strong>author</strong> (The name of the author of the quote)</li>\n<li>a <strong>background</strong> image (Yes, to make everything fancier)</li>\n</ul>\n<p>In order to manage data from the database, we need to enable <a href=\"http://laravel.com/docs/5.0/eloquent\">Eloquent</a> (the Lumen/Laravel ORM library), configure our database connection, create a migration and a model and finally seed our database. Let’s do it step by step.</p>\n<h2 id=\"Enable-Eloquent\"><a href=\"#Enable-Eloquent\" class=\"headerlink\" title=\"Enable Eloquent\"></a>Enable Eloquent</h2><p>To enable Eloquent we need to edit the file <code>bootstrap/app.php</code> and remove the comment on the following lines:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$app-&gt;withFacades();</div><div class=\"line\">$app-&gt;withEloquent();</div></pre></td></tr></table></figure>\n<p>Notice that the first line enables the support for <a href=\"http://laravel.com/docs/5.0/facades\">Facades</a> (a very common feature used in Laravel and inherited by Lumen) that simplifies the usage of some of the core classes of the framework.</p>\n<h2 id=\"Configure-the-database-connection\"><a href=\"#Configure-the-database-connection\" class=\"headerlink\" title=\"Configure the database connection\"></a>Configure the database connection</h2><p>First of all, be sure to have an instance of MySql running on your machine and to have the credentials to connect to it. Now let’s create our <code>.env</code> (Dotenv) configuration file. Copy the <code>.env.example</code> file into a new <code>.env</code> file and open it in your favourite editor.</p>\n<p>Here we need to edit the following lines and provide the details needed to connect to our local mysql instance:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">DB_CONNECTION</span>=mysql</div><div class=\"line\"><span class=\"attr\">DB_HOST</span>=localhost</div><div class=\"line\"><span class=\"attr\">DB_DATABASE</span>=homestead</div><div class=\"line\"><span class=\"attr\">DB_USERNAME</span>=homestead</div><div class=\"line\"><span class=\"attr\">DB_PASSWORD</span>=secret</div></pre></td></tr></table></figure>\n<p>Be sure to create the database (<code>homestead</code> in this case, but you can obviously customise it).</p>\n<p>It’s also a good idea in general to change the <code>APP_KEY</code> value into some random string in case you are building a “serious” application.</p>\n<p>To make Lumen load this configuration file we need, again, to edit the <code>bootstrap/app.php</code> file and uncomment the following line:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dotenv::load(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../'</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Create-a-migration\"><a href=\"#Create-a-migration\" class=\"headerlink\" title=\"Create a migration\"></a>Create a migration</h2><p><a href=\"http://laravel.com/docs/5.0/migrations\">Migrations</a> allows the framework to keep the database schema under control. They define all the database tables and fields programmatically and keep track of the various changes on them (so that we can easily update and rollback the whole schema when needed). We need to initialise the migration system with the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate:install</div></pre></td></tr></table></figure>\n<p>This command creates a special table in our database called <code>migrations</code> that will be used internally from the framework to keep track of all the available migrations and the current one used.</p>\n<p>Every migrations is identified by a file that generally lives in the <code>database/migrations</code> folder. The file describes the changes in our schema (eg. new tables, new fields, new indexes, tables to be deleted, etc…). In our case we need to create a new table, the “quotes” table to be precise. Let’s run this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan make:migration --create=quotes create_quotes_table</div></pre></td></tr></table></figure>\n<p>It creates a new file under the <code>database/migrations</code> folder that we can easily edit to add the fields we want to have in our table. We just need to tweak the <code>up()</code> function a bit:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">up</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    Schema::create(<span class=\"string\">'quotes'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(Blueprint $table)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">         $table-&gt;increments(<span class=\"string\">'id'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;timestamps();\t\t\t</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// our new fields</span></div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'text'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'author'</span>);</div><div class=\"line\">    \t\t\t     $table-&gt;string(<span class=\"string\">'background'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To execute the migration (and effectively create the table on the database) we have to run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan migrate</div></pre></td></tr></table></figure>\n<h2 id=\"Create-the-Quote-model\"><a href=\"#Create-the-Quote-model\" class=\"headerlink\" title=\"Create the Quote model\"></a>Create the Quote model</h2><p>In general, a model is a class used to abstract our data and represent it as an object. In ORMs a model class also offers static methods to query the data storage to retrieve the data from the data source and create the corresponding objects.</p>\n<p>In our case we need to define the <code>Quote</code> model in <code>app/Models/Quote.php</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># app/Models/Quote.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quote</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Yes, that’s it… we don’t really need to write anything else! We are extending the Eloquent <code>Model</code> class that does all the hard work for us, proving a standard model configuration that is good enough most of the times. In this case it automatically maps the class <code>Quote</code> to the <code>quotes</code> table that we created before.</p>\n<h2 id=\"Seed-the-database\"><a href=\"#Seed-the-database\" class=\"headerlink\" title=\"Seed the database\"></a>Seed the database</h2><p>The seeding process allows us to populate our database with initial data. In our case we can use it to provide some quotes. It’s quite useful because we will not build a full fledged admin to do the data entry at this stage (and we also will not have to touch the database manually).</p>\n<p>Seeds files are stored in <code>database/seeds</code> and we need to create a new file there. We will call it <code>QuoteTableSeeder.php</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># database/seeds/QuoteTableSeeder.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>\\<span class=\"title\">Quote</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Seeder</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuoteTableSeeder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Seeder</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'Success is going from failure to failure without losing your enthusiasm'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Winston Churchill'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'1.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'Dream big and dare to fail'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Norman Vaughan'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'2.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        Quote::create([</div><div class=\"line\">            <span class=\"string\">'text'</span> =&gt; <span class=\"string\">'It does not matter how slowly you go as long as you do not stop'</span>,</div><div class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"string\">'Confucius'</span>,</div><div class=\"line\">            <span class=\"string\">'background'</span> =&gt; <span class=\"string\">'3.jpg'</span></div><div class=\"line\">        ]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//... add more quotes if you want!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code is quite self explanatory: every call to <code>Quote::create</code> inserts a new record into the <code>quotes</code> table with the data provided into the array passed as argument. The only thing worth noticing is that we are passing a relative reference to a file in the <code>background</code> field. You need to have these files into your <code>public/img/</code> folder, as this allows us to serve these files to the browser. If you need some good royalty-free photos have a look at the <a href=\"http://unsplash.com\">Unsplash project</a>.</p>\n<p>To enable this seed script we need to link it to the main <code>DatabaseSeeder</code> script by adding the following line within the <code>run()</code> method:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;call(<span class=\"string\">'QuoteTableSeeder'</span>);</div></pre></td></tr></table></figure>\n<p>Now we just need to launch the following command to execute the seed script and populate the database:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php artisan db:seed</div></pre></td></tr></table></figure>\n<p>Damn, we got a <code>Class QuoteTableSeeder does not exist</code>! That’s why by default Lumen Composer file maps the <code>database</code> path with the <code>classmap</code> strategy. That means that every time Composer dumps the autoloader, it creates a static map of all the classes available inside that folder. So every time we add a new class there we need to manually re-dump the autoloader script:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer dump-autoload</div></pre></td></tr></table></figure>\n<p>Now let’s run again <code>php artisan db:seed</code> and this time everything should be fine.<br>If you explore your database you will see some records within the <code>quotes</code> table.</p>\n<h2 id=\"The-routing\"><a href=\"#The-routing\" class=\"headerlink\" title=\"The routing\"></a>The routing</h2><p>Until now we just defined the data model of our application and populated our database. Now we will add some business logic and we will map it to some routes.</p>\n<p>We will have two routes:</p>\n<ul>\n<li>GET <code>/</code> - the main route, providing a new quote everyday</li>\n<li>GET <code>/{id}</code> - the route of a specific quote, mapped by id</li>\n</ul>\n<p>To define the business logic associate to a route we have to edit the <code>app/Http/routes.php</code> file:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># app/Http/routes.php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Models</span>\\<span class=\"title\">Quote</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Display the today quote</div><div class=\"line\"> */</span></div><div class=\"line\">$app-&gt;get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($app)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Picks a different quote every day </div><div class=\"line\">     * (for a maximum of 366 quotes)</div><div class=\"line\">     *</div><div class=\"line\">     *   - $count: the total number of available quotes</div><div class=\"line\">     *   - $day: the current day of the year (from 0 to 365)</div><div class=\"line\">     *   - $page: the page to look for to retrieve the </div><div class=\"line\">     *            correct record</div><div class=\"line\">     */</span></div><div class=\"line\">    $count = Quote::query()-&gt;get()-&gt;count();</div><div class=\"line\">    $day = (int) date(<span class=\"string\">'z'</span>);</div><div class=\"line\">    $page = $day % $count + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    $quotes = Quote::query()-&gt;get()-&gt;forPage($page, <span class=\"number\">1</span>)-&gt;all();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($quotes)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> \\Illuminate\\Database\\Eloquent\\ModelNotFoundException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'quote'</span>, [<span class=\"string\">'quote'</span> =&gt; $quotes[<span class=\"number\">0</span>]]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Display a specific quote</div><div class=\"line\"> */</span></div><div class=\"line\">$app-&gt;get(<span class=\"string\">'/&#123;id&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($id)</span> <span class=\"title\">use</span> <span class=\"params\">($app)</span> </span>&#123;</div><div class=\"line\">    $quote = Quote::query()-&gt;findOrFail($id);</div><div class=\"line\">    <span class=\"keyword\">return</span> view(<span class=\"string\">'quote'</span>, [<span class=\"string\">'quote'</span> =&gt; $quote]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The two <code>$app-&gt;get</code> defines the two routes we need for our app. For every route we define the business logic within a closure function. The code is very straightforward and, thanks to the comments, it should be quite easy to understand.</p>\n<p>The <code>view()</code> function allow to render a template. In this case we are rendering the  <code>quote</code> template passing the model as <code>quote</code> variable. In the next paragraph we will see how to define our template.</p>\n<p><strong>Note</strong>: if you don’t want to use closures in your routing and you want to have a greater control on the structure of your code and your business logic you can leverage Laravel’s controllers. I will not go into the detail of this, but you can check the <a href=\"http://lumen.laravel.com/docs/controllers\">Documentation</a> that shows how to do it. It’s quite simple anyway.</p>\n<h2 id=\"The-template\"><a href=\"#The-template\" class=\"headerlink\" title=\"The template\"></a>The template</h2><p>Lumen uses the Laravel default template language, <a href=\"http://lumen.laravel.com/docs/templates\">Blade</a>. Blade allows us to render complex HTML code in a easy way. All the templates live in the <code>resources/views</code> folder. Let’s create the <code>quote.blade.php</code> file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- resources/views/quote.blade.php --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Motivaitonal — Your daily source of motivation!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">'http://fonts.googleapis.com/css?family=Alegreya:400,700|Roboto+Condensed'</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/css'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-image: url('/img/&#123;&#123;$quote-&gt;background&#125;&#125;')\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"quote-container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123;$quote-&gt;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span>— &#123;&#123;$quote-&gt;author&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can see we can use the double curly braces syntax to reference variable values.</p>\n<p>To finish we just need to create our <code>public/css/style.css</code> stylesheet file:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0,0,0,.3);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2em</span> <span class=\"number\">4em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(150, 150, 150, 0.8);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.text</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Alegreya'</span>, serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">4em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.quote-container</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.author</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'Roboto Condensed'</span>, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it, now your app is up and running. Isn’t it beautiful? Hey, let me know if you decide to publish it and motivate the whole world! ;)</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>Lumen seems to be a very promising framework for the fast prototyping of small web apps. I look forward to use it again for slightly more complex use cases where I can adopt other interesting features like the <a href=\"http://lumen.laravel.com/docs/cache\">cache layer</a> and the <a href=\"http://lumen.laravel.com/docs/queues\">job queue library</a>.<br>Have you already used Lumen? Do you think it will become a mainstream framework along Laravel or it will just be another of the hundreds of <a href=\"/tag/php\">Php</a> framework available out there? I’m really curious to know what you think about it, let me know it in the comments!</p>\n<p>Best regards and have a very motivated day ;)</p>\n"},{"uuid":"297697ad-a954-4135-b80b-466fae20dbaf","layout":"post","title":"Extracting data from Wikipedia using curl, grep, cut and other shell commands","slug":"extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands","subtitle":null,"date":"2016-08-15T17:17:00.000Z","updated":"2016-08-29T22:08:11.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/08/extracting-data-from-wikipedia-using-curl-grep-and-other-bash-commands-judo-teddy-riner.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn this article I am going to show you how I was able to extract and process some information from Wikipedia only using a combination of common bash utilities like `curl` and `grep`.\n\n\n## The need\n\nIf you are a sport lover like me I guess your heart is currently being warmed by the **Rio 2016 Olympic games**. My favourite sport in the games is **Judo** and now that the competitions are over I was wondering who were **the best olympic \"judokas\" of all the times** by number of medals collected during the games (no matter the kind of medal).\nI tried to *google* the answer for a while but it wasn't easy to find an up to date result, so I decided to do some quick research and trying to get to a conclusion by myself. I have to say it was I bit tougher than I expected, but it was definitively fun...\n\n\n## The dataset\n\nThe first thing I needed was a reliable and up to date data source listing all the Judo Olympic medal winners in history. This was easy to find on Wikipedia: [List of Olympic medalists in Judo](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo).\nAnyway the data on this Wikipedia page is structured to be easy to read by humans and not to be processed by a machine. Also I didn't found any way to have the same data in the page in a *csv* or *json* format, so the only viable option was to extract the data by myself from the web page.\nAt first I thought about creating a quick and dirty [JavaScript](/tag/javascript) command and use some library like [cheerio](https://cheerio.js.org) to extract the data directly from the HTML code of the page, but it sounded like to much of work for the simple goal I had in mind.\nSo I had another quick look at Wikipedia to find out if there was any better format to extract the information. Going to the *edit* option of the page I realized that parsing the [wikitext](https://www.mediawiki.org/wiki/Markup_spec) (source) of the page would have been much easier and I could even use a regular expression to extract the relevant information from there.\nAt this stage I wondered if there was a way to get only the wikitext of a specific Wikipedia page. It turns out that it's possible and it's very easy: you just need to append the query parameter `?action=raw` in the url!\n\nSo hitting [https://en.wikipedia.org/wiki/List\\_of\\_Olympic_medalists\\_in\\_judo?action=raw](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw) will give us our starting dataset which will look like this:\n\n```\n==Men==\n===Extra Lightweight===\n*60&nbsp;kg\n{| {{MedalistTable|type=Games}}\n|-\n|rowspan=2|[[Judo at the 1980 Summer Olympics|1980 Moscow]]<br>{{DetailsLink|Judo at the 1980 Summer Olympics – Men's 60 kg}}\n|rowspan=2|{{flagIOCmedalist|[[Thierry Rey]]|FRA|1980 Summer}}\n|rowspan=2|{{flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]|CUB|1980 Summer}}\n|{{flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]|HUN|1980 Summer}}\n|-\n|{{flagIOCmedalist|[[Aramby Emizh]]|URS|1980 Summer}}\n|-\n|rowspan=2|[[Judo at the 1984 Summer Olympics|1984 Los Angeles]]<br>{{DetailsLink|Judo at the 1984 Summer Olympics – Men's 60 kg}}\n|rowspan=2|{{flagIOCmedalist|[[Shinji Hosokawa]]|JPN|1984 Summer}}\n|rowspan=2|{{flagIOCmedalist|[[Kim Jae-Yup]]|KOR|1984 Summer}}\n|{{flagIOCmedalist|[[Neil Eckersley]]|GBR|1984 Summer}}\n|-\n|{{flagIOCmedalist|[[Edward Liddie]]|USA|1984 Summer}}\n|-\n...\n```\n\nNote that, for the sake of brevity, from now on I will use `...` to indicates that there's a lot of data that was stripped from the example.\n\nWe can easily get this data into our bash shell with `curl`:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"\n```\n\nIn case you don't know the options `-sS` allow to strip out the download progress output and just print the downloaded data (or any possible error) in the console.\n\nNow that we have our dataset, to compute the result we need to:\n\n  - Extract all the athletes names\n  - Count the occurrences of each one of them\n  - Reverse order them by the resulting count.\n\nWe will do so with a combination of bash commands, bound together using the pipe operator (`|`). Pipes let you use the output of a program as the input of another one, effectively creating a stream of data that is transformed step by step by small and easy to understand operations.\n\n\n## Extracting data with `grep`\n\nThe dataset shown before is just the wikitext code needed to render the tables of athletes that won medals by category and year. So we can easily assume that all the athletes listed in the page are interesting for us.\n\nAs you can see every athlete is referenced in the code using the *template* `flagIOCmedalist` and every entry looks like:\n\n```\n{{flagIOCmedalist|[[NAME]]|COUNTRY|OLYMPIC GAME}}\n```\n\nSo we can easily extract all the athletes names with a regex like the following:\n\n```regexp\nflagIOCmedalist\\|\\[\\[(.+)\\]\\]\n```\n\nThis regular expression behaves as described in the following picture:\n\n![flagIOCmedalist matches the characters flagIOCmedalist literally](/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png)\n\nIf you want to understand all the details of this regex you can play with it on [regex101](https://regex101.com/r/cT7nD8/2).\n\nIn the shell we can apply a regex to an input data using `grep`. We need to concatenate the output of `curl` to `grep` using the pipe operator (`|`):\n\n```bash\ncurl ... |  grep -Eoi \"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"\n```\n\nWith the `grep` we are using the options `-Eoi` which allow us to:\n\n  - `-E`: use a POSIX *extended* regular expression ([ERE](https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions))\n  - `-o`: print only the matched (non-empty) parts of a matching line\n  - `-i`: case insensitive matching (this is not really needed for our problem, but could allow us to match any case variation of the template reference like `flagiocmedalist` and `FLAGIOCMEDALIST`).\n\nThe previous command is going to output something like this:\n\n```nohighlight\nflagIOCmedalist|[[Thierry Rey]]\nflagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]\nflagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]\nflagIOCmedalist|[[Aramby Emizh]]\n...\n```\n\nWhich, of course, looks kind of ugly. We ideally want to have only the name of every athlete and not all the `template` syntax wrapping it.\n\nLet's try to clean up the data a little bit more.\n\n\n## Cleaning up the data with `cut`\n\n`cut` is another interesting command line utility that can be used in a whole lot of different ways to extract substrings (or columns) from text.\n\nUsing `cut` we can remove all the unneeded text in 3 steps:\n\n  1. remove the prefix `flagIOCmedalist|[[`\n  2. remove the suffix `]]`\n  3. clean up the names with the \"(judo)\" disambiguation note. For example from `José Rodríguez (judoka)|José Rodríguez` we want to keep only `José Rodríguez`.\n\n\n### Substring with `cut`\n\nThe complete the first step (removing the prefix `flagIOCmedalist|[[`) we can use the following command:\n\n```bash\n... | cut -c\"19-\"\n```\n\nThe option `-c\"19-\"` means: \"take the substring that starts from the character number 19 to the end of the string\". Character 19 is the 20th character considering that strings are *\"0-indexed\"*.\nYou can use the `-c` option to extract any generic substring. For example `-c\"4-8\"` will extract the substring from the 5th to the 9th character. If you leave the range open on the right it will take all the remaining string to the end.\n\nThis filter will be applied to every line and it will modify our stream of data as follows:\n\n```\nThierry Rey]]\nJosé Rodríguez (judoka)|José Rodríguez]]\nTibor Kincses (judoka)|Tibor Kincses]]\nAramby Emizh]]\n...\n```\n\n### Splitting strings with `cut`\n\nNow we would like to remove the suffix `]]`.\nIn order to achieve this goal we can use:\n\n```bash\n... cut -d \\] -f 1\n```\n\nThis time we are using the options `-d` and `-f`.\nWhen we use `d` we can specify a character to be used as delimiter (`]` in this case), this way `cut` will not split the string by character index but in chunks (or columns), generating a new chunk every time the delimiter is encountered along the line.\nThe option `-f` can be combined with `-d` to select one or more chunks, in this case we want to select the first chunk.\nAs we can expect, this will be the status of our data after this command is executed in the pipeline:\n\n```\nThierry Rey\nJosé Rodríguez (judoka)|José Rodríguez\nTibor Kincses (judoka)|Tibor Kincses\nAramby Emizh \n...\n```\n\nThe data looks almost clean, we just need to get rid of the occasional disambiguation notes. These cases can be distinguished by the character `|` (pipe) that separates the disambiguation definition from the text that must be rendered by the wikitext engine into HTML code. In these cases we want to keep only the part of the string after the pipe character. Again we can use `cut` with the options `-d` and `-f`:\n\n```bash\n... | cut -d \\| -f 2\n```\n\nThis time we are using the pipe character as delimiter and we are taking only the second chunk of the string. \nThis might seem obvious at this stage, but what happens in all the rows where there's no disambiguation note (and no pipe character)? In this cases we will have just one chunk containing the full line, so what do we get by using the option `-f 2`?\nLuckily in these cases `cut` is smart enough to assume the string is not matching our pattern and returns the entire line, so our data is not destroyed.\n\nThe final result after this command is:\n\n```\nThierry Rey\nJosé Rodríguez\nTibor Kincses\nAramby Emizh \n...\n```\n\nOur data is finally clean! 🎉\n\n\n## Counting and sorting with `uniq` and `sort`\n\nNow that we have our clean list of names we need to count the occurrences of every athlete and sort.\nIn order to remove duplicates (and count the occurrences) we can use the command `uniq`. This command, when fed with some text, outputs the text itself with adjacent identical lines collapsed to one.\nThis means that before we can use `uniq` we need to have all the names sorted alphabetically so that all the athletes with multiple occurrences have their name repeated on multiple lines one after another.\nThis can be achieved with the command `sort`, which, as you might easily guess, just sorts all the lines received as input in alphabetical order.\n\nJust to give you a practical example, after using the command `sort` our data will look like:\n\n```\n...\nPaweł Nastula\nPeter Seisenbacher\nPeter Seisenbacher\nPriscilla Gneto\nQin Dongya\nRadomir Kovačević\nRafael Silva\nRafael Silva\nRafaela Silva\nRamaz Kharshiladze\n...\n```\n\nNow we can pipe the `uniq -c` command to our data processing flow in order to remove duplicates. The option `-c` prints in front of every line the number of consecutive occurrences originally found for that line.\nAfter this command we will have something like this:\n\n```\n...\n1 Paweł Nastula\n2 Peter Seisenbacher\n1 Priscilla Gneto\n1 Qin Dongya\n1 Radomir Kovačević\n2 Rafael Silva\n1 Rafaela Silva\n1 Ramaz Kharshiladze\n...\n```\n\nNote that [Rafael Silva](https://en.wikipedia.org/wiki/Rafael_Silva_(judoka)) and [Rafaela Silva](https://en.wikipedia.org/wiki/Rafaela_Silva) are two different athletes, it's not a typo! 😂\n\nWe are almost done. Now we just need to sort our data once again, but this time in reverse order. To do so we can use the `sort` command once again, this time as follows:\n\n```bash\nsort -nr\n```\n\nWhere the option `-n` specifies that the first part of every line is a number (so the command can effectively distinguish and sort lines starting for example with `1` and `10`). The option `-r` instead indicates that we want to sort in revers order (bigger first).\n\nThis concludes our pipeline of commands!\n\n\n## Combining all together\n\nCombining all the commands together, our final pipeline will be the following:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" |\\\n grep -Eoi \"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\" |\\\n cut -c\"19-\" |\\\n cut -d \\] -f 1 |\\\n cut -d \\| -f 2 |\\\n sort |\\\n uniq -c |\\\n sort -nr\n```\n\nNow that you understood every single part it shouldn't look very cryptic.\n\nIf we execute it, we can finally discover who are the best Judo Olympic athletes up to Rio 2016:\n\n... drum rolls ...\n\nWith 4 medals:\n\n  - [Driulis González](https://en.wikipedia.org/wiki/Driulis_González)\n  - [Angelo Parisi](https://en.wikipedia.org/wiki/Angelo_Parisi)\n\nWith 3 medals:\n\n  - [Teddy Riner](https://en.wikipedia.org/wiki/Teddy_Riner) (The guy in the picture!)\n  - [Tadahiro Nomura](https://en.wikipedia.org/wiki/Tadahiro_Nomura)\n  - [Ryoko Tamura](https://en.wikipedia.org/wiki/Ryoko_Tani)\n  - [Rishod Sobirov](https://en.wikipedia.org/wiki/Rishod_Sobirov)\n  - [Mark Huizinga](https://en.wikipedia.org/wiki/Mark_Huizinga)\n  - [Idalys Ortiz](https://en.wikipedia.org/wiki/Idalys_Ortiz)\n  - [Edith Bosch](https://en.wikipedia.org/wiki/Edith_Bosch)\n  - [David Douillet](https://en.wikipedia.org/wiki/David_Douillet)\n  - [Amarilis Savón](https://en.wikipedia.org/wiki/Amarilis_Savón)\n\nLot's of French people there, uh! It's a shame no Italian athlete is there yet! 😉 \n\n\n## Conclusion\n\nI hope this article showed you that the unix shell is a very powerful tool. If you learn its basic commands and the most common options you will be able to complete a hell of a lot of task directly from the command line by just wisely combining them. You will not need to open an editor and write a long script and then to have an interpreter like [Node.js](/tag/node-js) to run it, sometimes the command line is just enough you need!\n\nIf you want to experiment a bit more with this topic, I can propose you a nice variation of this tutorial as exercise:\n\n**Can you compute the ranking of the nations with the highest number of medals?**\n\nIf so, please write your solution in the comments 🤓\n\nUntil next time!\n\nCheers\n\n\n## Alternative approaches\n\n**EXTRA** (Updated on Wed 29th August 2016)\n\nSome people are suggesting interesting alternative solutions. I think it's nice to list them here.\n\n\n### Improved `grep` with the reset match operator\n\nIn the newest versions of Gnu grep (not currently available on Mac!) is possible to use the `\\K` operator (reset match). \n\n`\\K` resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match. (See the complete regex on [regex101](https://regex101.com/r/tJ9qI1/1))\n\nWith this approach we can rewrite our command as follows, effectively getting rid of all the `cut` commands in the pipeline:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" |\\\n grep -Po 'flagIOCmedalist\\|\\[\\[(.* \\(judoka\\)\\|)?\\K[^\\]]*' |\\\n sort |\\\n uniq -c |\\\n sort -nr\n```\n\nSolution suggested by *pakistanprogrammerclub* in the [comments](#comment-2844392299)\n\n### quget\n\n[quget](https://www.npmjs.com/package/quget) is a command line utility authored in [Node.js](/tag/node-js) that brings together the power of famous node packages such as request, cheerio, and jQuery-like CSS selectors to the command-line.\n\nTo run the following command you need to have Node.js installed and to install `quget` with `npm i -g quget`:\n\n```bash\nquget https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo \"#mw-content-text table.wikitable tr:nth-child(n+2) td:nth-child(n+2) a:first-of-type, #mw-content-text table.wikitable tr:nth-child(n+2) td:only-child a:first-of-type\" | sort | uniq -c | sort -nr\n```\n\nSolution by *ɹɐqooɟ* in the [comments](#comment-2840602442).\n\n*shapeshed* on reddit mentioned [pup](https://github.com/ericchiang/pup) an alternative command written in [Go](/tag/go).\n\n\n### awk\n\n`awk` is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems (cit. [Wikipedia](https://en.wikipedia.org/wiki/AWK)).\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" | awk -F'\\|\\\\\\[\\\\\\[|\\\\\\]' '/flagIOCmedalist/{a[$2]++} END {for (i in a) print a[i], i | \"sort -r\"}'\n```\n\nThis didn't work for me on a Mac, but it did work on an Ubuntu machine.\n\nSolution by *Boris P.* on Facebook.\n\n\n### sed\n\n`sed` (stream editor) is a Unix utility that parses and transforms text, using a simple, compact programming language. (See more on [Wikipedia](https://en.wikipedia.org/wiki/Sed)).\n\nWe can use `sed` as an alternative to grep to extract the names of the judokas in one shot. Our final command will look like:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" | sed -n '/flagIOCmedalist/{s/^.*\\[\\[//; s/\\]\\].*//; s/^.*|//;p}' | sort | uniq -c | sort -nr\n```\n\nThis approach doesn't seem to be working on Mac tough.\n\nSolution suggested by *pakistanprogrammerclub* in the [comments](#comment-2844392299)\n\n\n### In-Browser developer console\n\nYou can extract data from the current web page using the developer console that most browsers offer (Chrome, Opera, Firefox...). After opening [our Wikipedia page of interest](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo), in the developer console you can run the following [JavaScript](/tag/javascript) one-liner:\n\n```javascript\n[].slice.call(document.querySelectorAll('table tr td:nth-child(n+2) > a:nth-child(1), table tr:nth-child(3) td > a:nth-child(1)')).map(function(e) { return e.innerText; }).reduce(function(res,el) { res[el] = res[el] ? res[el] + 1 : 1; return res; }, {});\n```\n\nThe result is an object with the medalists as keys, and the count as values. JavaScript objects are unordered so sorting is left as an exercise for the reader.\n\nSolution by *lacksconfidence* on [HackerNews](https://news.ycombinator.com/item?id=12293209)\n\n\n### XPath and Google Spreadsheet or Python\n\nXPath (XML Path Language) is a query language for selecting nodes from an XML document (cit. [Wikipedia](https://en.wikipedia.org/wiki/XPath)).\n\nBy downloading the HTML of the Wikipedia page and applying an XPath selector like `//table//tr/td[2]/a[1]/text()` we should be able to extract all the gold medalist in the tables. In the same fashion we can build a slightly more complex solution by combining more selectors:\n\n```xpath\n//table//tr/td[2]/a[1]/text()|//table//tr/td[3]/a[1]/text()|//table//tr/td[4]/a[1]/text()\n```\n\nWith this approach we can easily import data into a spreadsheet software like Google Spreadsheet. In Google Spreadsheet we can use the function `IMPORTXML` to run an XPath expression against an XML or HTML document available on a given URL.\n\nI created an [example document](https://docs.google.com/spreadsheets/d/1VVFIGFcmuVpDRBR9xKe-s_T4tJk0-tLcvuf_gKVuKfA/edit?usp=sharing) that you can check out if you are curious to see this feature in action.\n\nSolution based on comments by *turtlebits* and *san_dimitri* on [HackerNews](https://news.ycombinator.com/item?id=12294667).\n\nI'm glad to know I inspired [Nikolai Hampton](https://twitter.com/@NikolaiHampton) to write an [amazing article](http://3583bytesready.net/2016/08/17/scraping-data-python-xpath/) that illustrates how to solve this problem using XPath expressions in **Python**. If you like Python the article is absolutely a must, don't miss it out!\n","source":"_posts/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands.md","raw":"uuid:             297697ad-a954-4135-b80b-466fae20dbaf\nlayout:           post\ntitle:            'Extracting data from Wikipedia using curl, grep, cut and other shell commands'\nslug:             extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands\nsubtitle:         null\ndate:             '2016-08-15T17:17:00.000Z'\nupdated:          '2016-08-29T22:08:11.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/08/extracting-data-from-wikipedia-using-curl-grep-and-other-bash-commands-judo-teddy-riner.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Bash\n  - Shell\n\n---\n\nIn this article I am going to show you how I was able to extract and process some information from Wikipedia only using a combination of common bash utilities like `curl` and `grep`.\n\n\n## The need\n\nIf you are a sport lover like me I guess your heart is currently being warmed by the **Rio 2016 Olympic games**. My favourite sport in the games is **Judo** and now that the competitions are over I was wondering who were **the best olympic \"judokas\" of all the times** by number of medals collected during the games (no matter the kind of medal).\nI tried to *google* the answer for a while but it wasn't easy to find an up to date result, so I decided to do some quick research and trying to get to a conclusion by myself. I have to say it was I bit tougher than I expected, but it was definitively fun...\n\n\n## The dataset\n\nThe first thing I needed was a reliable and up to date data source listing all the Judo Olympic medal winners in history. This was easy to find on Wikipedia: [List of Olympic medalists in Judo](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo).\nAnyway the data on this Wikipedia page is structured to be easy to read by humans and not to be processed by a machine. Also I didn't found any way to have the same data in the page in a *csv* or *json* format, so the only viable option was to extract the data by myself from the web page.\nAt first I thought about creating a quick and dirty [JavaScript](/tag/javascript) command and use some library like [cheerio](https://cheerio.js.org) to extract the data directly from the HTML code of the page, but it sounded like to much of work for the simple goal I had in mind.\nSo I had another quick look at Wikipedia to find out if there was any better format to extract the information. Going to the *edit* option of the page I realized that parsing the [wikitext](https://www.mediawiki.org/wiki/Markup_spec) (source) of the page would have been much easier and I could even use a regular expression to extract the relevant information from there.\nAt this stage I wondered if there was a way to get only the wikitext of a specific Wikipedia page. It turns out that it's possible and it's very easy: you just need to append the query parameter `?action=raw` in the url!\n\nSo hitting [https://en.wikipedia.org/wiki/List\\_of\\_Olympic_medalists\\_in\\_judo?action=raw](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw) will give us our starting dataset which will look like this:\n\n```\n==Men==\n===Extra Lightweight===\n*60&nbsp;kg\n{| {{MedalistTable|type=Games}}\n|-\n|rowspan=2|[[Judo at the 1980 Summer Olympics|1980 Moscow]]<br>{{DetailsLink|Judo at the 1980 Summer Olympics – Men's 60 kg}}\n|rowspan=2|{{flagIOCmedalist|[[Thierry Rey]]|FRA|1980 Summer}}\n|rowspan=2|{{flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]|CUB|1980 Summer}}\n|{{flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]|HUN|1980 Summer}}\n|-\n|{{flagIOCmedalist|[[Aramby Emizh]]|URS|1980 Summer}}\n|-\n|rowspan=2|[[Judo at the 1984 Summer Olympics|1984 Los Angeles]]<br>{{DetailsLink|Judo at the 1984 Summer Olympics – Men's 60 kg}}\n|rowspan=2|{{flagIOCmedalist|[[Shinji Hosokawa]]|JPN|1984 Summer}}\n|rowspan=2|{{flagIOCmedalist|[[Kim Jae-Yup]]|KOR|1984 Summer}}\n|{{flagIOCmedalist|[[Neil Eckersley]]|GBR|1984 Summer}}\n|-\n|{{flagIOCmedalist|[[Edward Liddie]]|USA|1984 Summer}}\n|-\n...\n```\n\nNote that, for the sake of brevity, from now on I will use `...` to indicates that there's a lot of data that was stripped from the example.\n\nWe can easily get this data into our bash shell with `curl`:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"\n```\n\nIn case you don't know the options `-sS` allow to strip out the download progress output and just print the downloaded data (or any possible error) in the console.\n\nNow that we have our dataset, to compute the result we need to:\n\n  - Extract all the athletes names\n  - Count the occurrences of each one of them\n  - Reverse order them by the resulting count.\n\nWe will do so with a combination of bash commands, bound together using the pipe operator (`|`). Pipes let you use the output of a program as the input of another one, effectively creating a stream of data that is transformed step by step by small and easy to understand operations.\n\n\n## Extracting data with `grep`\n\nThe dataset shown before is just the wikitext code needed to render the tables of athletes that won medals by category and year. So we can easily assume that all the athletes listed in the page are interesting for us.\n\nAs you can see every athlete is referenced in the code using the *template* `flagIOCmedalist` and every entry looks like:\n\n```\n{{flagIOCmedalist|[[NAME]]|COUNTRY|OLYMPIC GAME}}\n```\n\nSo we can easily extract all the athletes names with a regex like the following:\n\n```regexp\nflagIOCmedalist\\|\\[\\[(.+)\\]\\]\n```\n\nThis regular expression behaves as described in the following picture:\n\n![flagIOCmedalist matches the characters flagIOCmedalist literally](/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png)\n\nIf you want to understand all the details of this regex you can play with it on [regex101](https://regex101.com/r/cT7nD8/2).\n\nIn the shell we can apply a regex to an input data using `grep`. We need to concatenate the output of `curl` to `grep` using the pipe operator (`|`):\n\n```bash\ncurl ... |  grep -Eoi \"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"\n```\n\nWith the `grep` we are using the options `-Eoi` which allow us to:\n\n  - `-E`: use a POSIX *extended* regular expression ([ERE](https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions))\n  - `-o`: print only the matched (non-empty) parts of a matching line\n  - `-i`: case insensitive matching (this is not really needed for our problem, but could allow us to match any case variation of the template reference like `flagiocmedalist` and `FLAGIOCMEDALIST`).\n\nThe previous command is going to output something like this:\n\n```nohighlight\nflagIOCmedalist|[[Thierry Rey]]\nflagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]\nflagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]\nflagIOCmedalist|[[Aramby Emizh]]\n...\n```\n\nWhich, of course, looks kind of ugly. We ideally want to have only the name of every athlete and not all the `template` syntax wrapping it.\n\nLet's try to clean up the data a little bit more.\n\n\n## Cleaning up the data with `cut`\n\n`cut` is another interesting command line utility that can be used in a whole lot of different ways to extract substrings (or columns) from text.\n\nUsing `cut` we can remove all the unneeded text in 3 steps:\n\n  1. remove the prefix `flagIOCmedalist|[[`\n  2. remove the suffix `]]`\n  3. clean up the names with the \"(judo)\" disambiguation note. For example from `José Rodríguez (judoka)|José Rodríguez` we want to keep only `José Rodríguez`.\n\n\n### Substring with `cut`\n\nThe complete the first step (removing the prefix `flagIOCmedalist|[[`) we can use the following command:\n\n```bash\n... | cut -c\"19-\"\n```\n\nThe option `-c\"19-\"` means: \"take the substring that starts from the character number 19 to the end of the string\". Character 19 is the 20th character considering that strings are *\"0-indexed\"*.\nYou can use the `-c` option to extract any generic substring. For example `-c\"4-8\"` will extract the substring from the 5th to the 9th character. If you leave the range open on the right it will take all the remaining string to the end.\n\nThis filter will be applied to every line and it will modify our stream of data as follows:\n\n```\nThierry Rey]]\nJosé Rodríguez (judoka)|José Rodríguez]]\nTibor Kincses (judoka)|Tibor Kincses]]\nAramby Emizh]]\n...\n```\n\n### Splitting strings with `cut`\n\nNow we would like to remove the suffix `]]`.\nIn order to achieve this goal we can use:\n\n```bash\n... cut -d \\] -f 1\n```\n\nThis time we are using the options `-d` and `-f`.\nWhen we use `d` we can specify a character to be used as delimiter (`]` in this case), this way `cut` will not split the string by character index but in chunks (or columns), generating a new chunk every time the delimiter is encountered along the line.\nThe option `-f` can be combined with `-d` to select one or more chunks, in this case we want to select the first chunk.\nAs we can expect, this will be the status of our data after this command is executed in the pipeline:\n\n```\nThierry Rey\nJosé Rodríguez (judoka)|José Rodríguez\nTibor Kincses (judoka)|Tibor Kincses\nAramby Emizh \n...\n```\n\nThe data looks almost clean, we just need to get rid of the occasional disambiguation notes. These cases can be distinguished by the character `|` (pipe) that separates the disambiguation definition from the text that must be rendered by the wikitext engine into HTML code. In these cases we want to keep only the part of the string after the pipe character. Again we can use `cut` with the options `-d` and `-f`:\n\n```bash\n... | cut -d \\| -f 2\n```\n\nThis time we are using the pipe character as delimiter and we are taking only the second chunk of the string. \nThis might seem obvious at this stage, but what happens in all the rows where there's no disambiguation note (and no pipe character)? In this cases we will have just one chunk containing the full line, so what do we get by using the option `-f 2`?\nLuckily in these cases `cut` is smart enough to assume the string is not matching our pattern and returns the entire line, so our data is not destroyed.\n\nThe final result after this command is:\n\n```\nThierry Rey\nJosé Rodríguez\nTibor Kincses\nAramby Emizh \n...\n```\n\nOur data is finally clean! 🎉\n\n\n## Counting and sorting with `uniq` and `sort`\n\nNow that we have our clean list of names we need to count the occurrences of every athlete and sort.\nIn order to remove duplicates (and count the occurrences) we can use the command `uniq`. This command, when fed with some text, outputs the text itself with adjacent identical lines collapsed to one.\nThis means that before we can use `uniq` we need to have all the names sorted alphabetically so that all the athletes with multiple occurrences have their name repeated on multiple lines one after another.\nThis can be achieved with the command `sort`, which, as you might easily guess, just sorts all the lines received as input in alphabetical order.\n\nJust to give you a practical example, after using the command `sort` our data will look like:\n\n```\n...\nPaweł Nastula\nPeter Seisenbacher\nPeter Seisenbacher\nPriscilla Gneto\nQin Dongya\nRadomir Kovačević\nRafael Silva\nRafael Silva\nRafaela Silva\nRamaz Kharshiladze\n...\n```\n\nNow we can pipe the `uniq -c` command to our data processing flow in order to remove duplicates. The option `-c` prints in front of every line the number of consecutive occurrences originally found for that line.\nAfter this command we will have something like this:\n\n```\n...\n1 Paweł Nastula\n2 Peter Seisenbacher\n1 Priscilla Gneto\n1 Qin Dongya\n1 Radomir Kovačević\n2 Rafael Silva\n1 Rafaela Silva\n1 Ramaz Kharshiladze\n...\n```\n\nNote that [Rafael Silva](https://en.wikipedia.org/wiki/Rafael_Silva_(judoka)) and [Rafaela Silva](https://en.wikipedia.org/wiki/Rafaela_Silva) are two different athletes, it's not a typo! 😂\n\nWe are almost done. Now we just need to sort our data once again, but this time in reverse order. To do so we can use the `sort` command once again, this time as follows:\n\n```bash\nsort -nr\n```\n\nWhere the option `-n` specifies that the first part of every line is a number (so the command can effectively distinguish and sort lines starting for example with `1` and `10`). The option `-r` instead indicates that we want to sort in revers order (bigger first).\n\nThis concludes our pipeline of commands!\n\n\n## Combining all together\n\nCombining all the commands together, our final pipeline will be the following:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" |\\\n grep -Eoi \"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\" |\\\n cut -c\"19-\" |\\\n cut -d \\] -f 1 |\\\n cut -d \\| -f 2 |\\\n sort |\\\n uniq -c |\\\n sort -nr\n```\n\nNow that you understood every single part it shouldn't look very cryptic.\n\nIf we execute it, we can finally discover who are the best Judo Olympic athletes up to Rio 2016:\n\n... drum rolls ...\n\nWith 4 medals:\n\n  - [Driulis González](https://en.wikipedia.org/wiki/Driulis_González)\n  - [Angelo Parisi](https://en.wikipedia.org/wiki/Angelo_Parisi)\n\nWith 3 medals:\n\n  - [Teddy Riner](https://en.wikipedia.org/wiki/Teddy_Riner) (The guy in the picture!)\n  - [Tadahiro Nomura](https://en.wikipedia.org/wiki/Tadahiro_Nomura)\n  - [Ryoko Tamura](https://en.wikipedia.org/wiki/Ryoko_Tani)\n  - [Rishod Sobirov](https://en.wikipedia.org/wiki/Rishod_Sobirov)\n  - [Mark Huizinga](https://en.wikipedia.org/wiki/Mark_Huizinga)\n  - [Idalys Ortiz](https://en.wikipedia.org/wiki/Idalys_Ortiz)\n  - [Edith Bosch](https://en.wikipedia.org/wiki/Edith_Bosch)\n  - [David Douillet](https://en.wikipedia.org/wiki/David_Douillet)\n  - [Amarilis Savón](https://en.wikipedia.org/wiki/Amarilis_Savón)\n\nLot's of French people there, uh! It's a shame no Italian athlete is there yet! 😉 \n\n\n## Conclusion\n\nI hope this article showed you that the unix shell is a very powerful tool. If you learn its basic commands and the most common options you will be able to complete a hell of a lot of task directly from the command line by just wisely combining them. You will not need to open an editor and write a long script and then to have an interpreter like [Node.js](/tag/node-js) to run it, sometimes the command line is just enough you need!\n\nIf you want to experiment a bit more with this topic, I can propose you a nice variation of this tutorial as exercise:\n\n**Can you compute the ranking of the nations with the highest number of medals?**\n\nIf so, please write your solution in the comments 🤓\n\nUntil next time!\n\nCheers\n\n\n## Alternative approaches\n\n**EXTRA** (Updated on Wed 29th August 2016)\n\nSome people are suggesting interesting alternative solutions. I think it's nice to list them here.\n\n\n### Improved `grep` with the reset match operator\n\nIn the newest versions of Gnu grep (not currently available on Mac!) is possible to use the `\\K` operator (reset match). \n\n`\\K` resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match. (See the complete regex on [regex101](https://regex101.com/r/tJ9qI1/1))\n\nWith this approach we can rewrite our command as follows, effectively getting rid of all the `cut` commands in the pipeline:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" |\\\n grep -Po 'flagIOCmedalist\\|\\[\\[(.* \\(judoka\\)\\|)?\\K[^\\]]*' |\\\n sort |\\\n uniq -c |\\\n sort -nr\n```\n\nSolution suggested by *pakistanprogrammerclub* in the [comments](#comment-2844392299)\n\n### quget\n\n[quget](https://www.npmjs.com/package/quget) is a command line utility authored in [Node.js](/tag/node-js) that brings together the power of famous node packages such as request, cheerio, and jQuery-like CSS selectors to the command-line.\n\nTo run the following command you need to have Node.js installed and to install `quget` with `npm i -g quget`:\n\n```bash\nquget https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo \"#mw-content-text table.wikitable tr:nth-child(n+2) td:nth-child(n+2) a:first-of-type, #mw-content-text table.wikitable tr:nth-child(n+2) td:only-child a:first-of-type\" | sort | uniq -c | sort -nr\n```\n\nSolution by *ɹɐqooɟ* in the [comments](#comment-2840602442).\n\n*shapeshed* on reddit mentioned [pup](https://github.com/ericchiang/pup) an alternative command written in [Go](/tag/go).\n\n\n### awk\n\n`awk` is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems (cit. [Wikipedia](https://en.wikipedia.org/wiki/AWK)).\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" | awk -F'\\|\\\\\\[\\\\\\[|\\\\\\]' '/flagIOCmedalist/{a[$2]++} END {for (i in a) print a[i], i | \"sort -r\"}'\n```\n\nThis didn't work for me on a Mac, but it did work on an Ubuntu machine.\n\nSolution by *Boris P.* on Facebook.\n\n\n### sed\n\n`sed` (stream editor) is a Unix utility that parses and transforms text, using a simple, compact programming language. (See more on [Wikipedia](https://en.wikipedia.org/wiki/Sed)).\n\nWe can use `sed` as an alternative to grep to extract the names of the judokas in one shot. Our final command will look like:\n\n```bash\ncurl -sS \"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" | sed -n '/flagIOCmedalist/{s/^.*\\[\\[//; s/\\]\\].*//; s/^.*|//;p}' | sort | uniq -c | sort -nr\n```\n\nThis approach doesn't seem to be working on Mac tough.\n\nSolution suggested by *pakistanprogrammerclub* in the [comments](#comment-2844392299)\n\n\n### In-Browser developer console\n\nYou can extract data from the current web page using the developer console that most browsers offer (Chrome, Opera, Firefox...). After opening [our Wikipedia page of interest](https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo), in the developer console you can run the following [JavaScript](/tag/javascript) one-liner:\n\n```javascript\n[].slice.call(document.querySelectorAll('table tr td:nth-child(n+2) > a:nth-child(1), table tr:nth-child(3) td > a:nth-child(1)')).map(function(e) { return e.innerText; }).reduce(function(res,el) { res[el] = res[el] ? res[el] + 1 : 1; return res; }, {});\n```\n\nThe result is an object with the medalists as keys, and the count as values. JavaScript objects are unordered so sorting is left as an exercise for the reader.\n\nSolution by *lacksconfidence* on [HackerNews](https://news.ycombinator.com/item?id=12293209)\n\n\n### XPath and Google Spreadsheet or Python\n\nXPath (XML Path Language) is a query language for selecting nodes from an XML document (cit. [Wikipedia](https://en.wikipedia.org/wiki/XPath)).\n\nBy downloading the HTML of the Wikipedia page and applying an XPath selector like `//table//tr/td[2]/a[1]/text()` we should be able to extract all the gold medalist in the tables. In the same fashion we can build a slightly more complex solution by combining more selectors:\n\n```xpath\n//table//tr/td[2]/a[1]/text()|//table//tr/td[3]/a[1]/text()|//table//tr/td[4]/a[1]/text()\n```\n\nWith this approach we can easily import data into a spreadsheet software like Google Spreadsheet. In Google Spreadsheet we can use the function `IMPORTXML` to run an XPath expression against an XML or HTML document available on a given URL.\n\nI created an [example document](https://docs.google.com/spreadsheets/d/1VVFIGFcmuVpDRBR9xKe-s_T4tJk0-tLcvuf_gKVuKfA/edit?usp=sharing) that you can check out if you are curious to see this feature in action.\n\nSolution based on comments by *turtlebits* and *san_dimitri* on [HackerNews](https://news.ycombinator.com/item?id=12294667).\n\nI'm glad to know I inspired [Nikolai Hampton](https://twitter.com/@NikolaiHampton) to write an [amazing article](http://3583bytesready.net/2016/08/17/scraping-data-python-xpath/) that illustrates how to solve this problem using XPath expressions in **Python**. If you like Python the article is absolutely a must, don't miss it out!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryd000csvvudo1w1xzz","content":"<p>In this article I am going to show you how I was able to extract and process some information from Wikipedia only using a combination of common bash utilities like <code>curl</code> and <code>grep</code>.</p>\n<h2 id=\"The-need\"><a href=\"#The-need\" class=\"headerlink\" title=\"The need\"></a>The need</h2><p>If you are a sport lover like me I guess your heart is currently being warmed by the <strong>Rio 2016 Olympic games</strong>. My favourite sport in the games is <strong>Judo</strong> and now that the competitions are over I was wondering who were <strong>the best olympic “judokas” of all the times</strong> by number of medals collected during the games (no matter the kind of medal).<br>I tried to <em>google</em> the answer for a while but it wasn’t easy to find an up to date result, so I decided to do some quick research and trying to get to a conclusion by myself. I have to say it was I bit tougher than I expected, but it was definitively fun…</p>\n<h2 id=\"The-dataset\"><a href=\"#The-dataset\" class=\"headerlink\" title=\"The dataset\"></a>The dataset</h2><p>The first thing I needed was a reliable and up to date data source listing all the Judo Olympic medal winners in history. This was easy to find on Wikipedia: <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo\" target=\"_blank\" rel=\"external\">List of Olympic medalists in Judo</a>.<br>Anyway the data on this Wikipedia page is structured to be easy to read by humans and not to be processed by a machine. Also I didn’t found any way to have the same data in the page in a <em>csv</em> or <em>json</em> format, so the only viable option was to extract the data by myself from the web page.<br>At first I thought about creating a quick and dirty <a href=\"/tag/javascript\">JavaScript</a> command and use some library like <a href=\"https://cheerio.js.org\" target=\"_blank\" rel=\"external\">cheerio</a> to extract the data directly from the HTML code of the page, but it sounded like to much of work for the simple goal I had in mind.<br>So I had another quick look at Wikipedia to find out if there was any better format to extract the information. Going to the <em>edit</em> option of the page I realized that parsing the <a href=\"https://www.mediawiki.org/wiki/Markup_spec\" target=\"_blank\" rel=\"external\">wikitext</a> (source) of the page would have been much easier and I could even use a regular expression to extract the relevant information from there.<br>At this stage I wondered if there was a way to get only the wikitext of a specific Wikipedia page. It turns out that it’s possible and it’s very easy: you just need to append the query parameter <code>?action=raw</code> in the url!</p>\n<p>So hitting <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw</a> will give us our starting dataset which will look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">==Men==</div><div class=\"line\">===Extra Lightweight===</div><div class=\"line\">*60&amp;nbsp;kg</div><div class=\"line\">&#123;| &#123;&#123;MedalistTable|type=Games&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|rowspan=2|[[Judo at the 1980 Summer Olympics|1980 Moscow]]&lt;br&gt;&#123;&#123;DetailsLink|Judo at the 1980 Summer Olympics – Men&apos;s 60 kg&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Thierry Rey]]|FRA|1980 Summer&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]|CUB|1980 Summer&#125;&#125;</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]|HUN|1980 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Aramby Emizh]]|URS|1980 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|rowspan=2|[[Judo at the 1984 Summer Olympics|1984 Los Angeles]]&lt;br&gt;&#123;&#123;DetailsLink|Judo at the 1984 Summer Olympics – Men&apos;s 60 kg&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Shinji Hosokawa]]|JPN|1984 Summer&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Kim Jae-Yup]]|KOR|1984 Summer&#125;&#125;</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Neil Eckersley]]|GBR|1984 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Edward Liddie]]|USA|1984 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Note that, for the sake of brevity, from now on I will use <code>...</code> to indicates that there’s a lot of data that was stripped from the example.</p>\n<p>We can easily get this data into our bash shell with <code>curl</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span></div></pre></td></tr></table></figure>\n<p>In case you don’t know the options <code>-sS</code> allow to strip out the download progress output and just print the downloaded data (or any possible error) in the console.</p>\n<p>Now that we have our dataset, to compute the result we need to:</p>\n<ul>\n<li>Extract all the athletes names</li>\n<li>Count the occurrences of each one of them</li>\n<li>Reverse order them by the resulting count.</li>\n</ul>\n<p>We will do so with a combination of bash commands, bound together using the pipe operator (<code>|</code>). Pipes let you use the output of a program as the input of another one, effectively creating a stream of data that is transformed step by step by small and easy to understand operations.</p>\n<h2 id=\"Extracting-data-with-grep\"><a href=\"#Extracting-data-with-grep\" class=\"headerlink\" title=\"Extracting data with grep\"></a>Extracting data with <code>grep</code></h2><p>The dataset shown before is just the wikitext code needed to render the tables of athletes that won medals by category and year. So we can easily assume that all the athletes listed in the page are interesting for us.</p>\n<p>As you can see every athlete is referenced in the code using the <em>template</em> <code>flagIOCmedalist</code> and every entry looks like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;flagIOCmedalist|[[NAME]]|COUNTRY|OLYMPIC GAME&#125;&#125;</div></pre></td></tr></table></figure>\n<p>So we can easily extract all the athletes names with a regex like the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flagIOCmedalist\\|\\[\\[(.+)\\]\\]</div></pre></td></tr></table></figure>\n<p>This regular expression behaves as described in the following picture:</p>\n<p><img src=\"/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png\" alt=\"flagIOCmedalist matches the characters flagIOCmedalist literally\"></p>\n<p>If you want to understand all the details of this regex you can play with it on <a href=\"https://regex101.com/r/cT7nD8/2\" target=\"_blank\" rel=\"external\">regex101</a>.</p>\n<p>In the shell we can apply a regex to an input data using <code>grep</code>. We need to concatenate the output of <code>curl</code> to <code>grep</code> using the pipe operator (<code>|</code>):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl ... |  grep -Eoi <span class=\"string\">\"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"</span></div></pre></td></tr></table></figure>\n<p>With the <code>grep</code> we are using the options <code>-Eoi</code> which allow us to:</p>\n<ul>\n<li><code>-E</code>: use a POSIX <em>extended</em> regular expression (<a href=\"https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions\" target=\"_blank\" rel=\"external\">ERE</a>)</li>\n<li><code>-o</code>: print only the matched (non-empty) parts of a matching line</li>\n<li><code>-i</code>: case insensitive matching (this is not really needed for our problem, but could allow us to match any case variation of the template reference like <code>flagiocmedalist</code> and <code>FLAGIOCMEDALIST</code>).</li>\n</ul>\n<p>The previous command is going to output something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">flagIOCmedalist|[[Thierry Rey]]</div><div class=\"line\">flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]</div><div class=\"line\">flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]</div><div class=\"line\">flagIOCmedalist|[[Aramby Emizh]]</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Which, of course, looks kind of ugly. We ideally want to have only the name of every athlete and not all the <code>template</code> syntax wrapping it.</p>\n<p>Let’s try to clean up the data a little bit more.</p>\n<h2 id=\"Cleaning-up-the-data-with-cut\"><a href=\"#Cleaning-up-the-data-with-cut\" class=\"headerlink\" title=\"Cleaning up the data with cut\"></a>Cleaning up the data with <code>cut</code></h2><p><code>cut</code> is another interesting command line utility that can be used in a whole lot of different ways to extract substrings (or columns) from text.</p>\n<p>Using <code>cut</code> we can remove all the unneeded text in 3 steps:</p>\n<ol>\n<li>remove the prefix <code>flagIOCmedalist|[[</code></li>\n<li>remove the suffix <code>]]</code></li>\n<li>clean up the names with the “(judo)” disambiguation note. For example from <code>José Rodríguez (judoka)|José Rodríguez</code> we want to keep only <code>José Rodríguez</code>.</li>\n</ol>\n<h3 id=\"Substring-with-cut\"><a href=\"#Substring-with-cut\" class=\"headerlink\" title=\"Substring with cut\"></a>Substring with <code>cut</code></h3><p>The complete the first step (removing the prefix <code>flagIOCmedalist|[[</code>) we can use the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... | cut -c<span class=\"string\">\"19-\"</span></div></pre></td></tr></table></figure>\n<p>The option <code>-c&quot;19-&quot;</code> means: “take the substring that starts from the character number 19 to the end of the string”. Character 19 is the 20th character considering that strings are <em>“0-indexed”</em>.<br>You can use the <code>-c</code> option to extract any generic substring. For example <code>-c&quot;4-8&quot;</code> will extract the substring from the 5th to the 9th character. If you leave the range open on the right it will take all the remaining string to the end.</p>\n<p>This filter will be applied to every line and it will modify our stream of data as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey]]</div><div class=\"line\">José Rodríguez (judoka)|José Rodríguez]]</div><div class=\"line\">Tibor Kincses (judoka)|Tibor Kincses]]</div><div class=\"line\">Aramby Emizh]]</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h3 id=\"Splitting-strings-with-cut\"><a href=\"#Splitting-strings-with-cut\" class=\"headerlink\" title=\"Splitting strings with cut\"></a>Splitting strings with <code>cut</code></h3><p>Now we would like to remove the suffix <code>]]</code>.<br>In order to achieve this goal we can use:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... cut <span class=\"_\">-d</span> \\] <span class=\"_\">-f</span> 1</div></pre></td></tr></table></figure>\n<p>This time we are using the options <code>-d</code> and <code>-f</code>.<br>When we use <code>d</code> we can specify a character to be used as delimiter (<code>]</code> in this case), this way <code>cut</code> will not split the string by character index but in chunks (or columns), generating a new chunk every time the delimiter is encountered along the line.<br>The option <code>-f</code> can be combined with <code>-d</code> to select one or more chunks, in this case we want to select the first chunk.<br>As we can expect, this will be the status of our data after this command is executed in the pipeline:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey</div><div class=\"line\">José Rodríguez (judoka)|José Rodríguez</div><div class=\"line\">Tibor Kincses (judoka)|Tibor Kincses</div><div class=\"line\">Aramby Emizh </div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>The data looks almost clean, we just need to get rid of the occasional disambiguation notes. These cases can be distinguished by the character <code>|</code> (pipe) that separates the disambiguation definition from the text that must be rendered by the wikitext engine into HTML code. In these cases we want to keep only the part of the string after the pipe character. Again we can use <code>cut</code> with the options <code>-d</code> and <code>-f</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... | cut <span class=\"_\">-d</span> \\| <span class=\"_\">-f</span> 2</div></pre></td></tr></table></figure>\n<p>This time we are using the pipe character as delimiter and we are taking only the second chunk of the string.<br>This might seem obvious at this stage, but what happens in all the rows where there’s no disambiguation note (and no pipe character)? In this cases we will have just one chunk containing the full line, so what do we get by using the option <code>-f 2</code>?<br>Luckily in these cases <code>cut</code> is smart enough to assume the string is not matching our pattern and returns the entire line, so our data is not destroyed.</p>\n<p>The final result after this command is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey</div><div class=\"line\">José Rodríguez</div><div class=\"line\">Tibor Kincses</div><div class=\"line\">Aramby Emizh </div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Our data is finally clean! 🎉</p>\n<h2 id=\"Counting-and-sorting-with-uniq-and-sort\"><a href=\"#Counting-and-sorting-with-uniq-and-sort\" class=\"headerlink\" title=\"Counting and sorting with uniq and sort\"></a>Counting and sorting with <code>uniq</code> and <code>sort</code></h2><p>Now that we have our clean list of names we need to count the occurrences of every athlete and sort.<br>In order to remove duplicates (and count the occurrences) we can use the command <code>uniq</code>. This command, when fed with some text, outputs the text itself with adjacent identical lines collapsed to one.<br>This means that before we can use <code>uniq</code> we need to have all the names sorted alphabetically so that all the athletes with multiple occurrences have their name repeated on multiple lines one after another.<br>This can be achieved with the command <code>sort</code>, which, as you might easily guess, just sorts all the lines received as input in alphabetical order.</p>\n<p>Just to give you a practical example, after using the command <code>sort</code> our data will look like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">Paweł Nastula</div><div class=\"line\">Peter Seisenbacher</div><div class=\"line\">Peter Seisenbacher</div><div class=\"line\">Priscilla Gneto</div><div class=\"line\">Qin Dongya</div><div class=\"line\">Radomir Kovačević</div><div class=\"line\">Rafael Silva</div><div class=\"line\">Rafael Silva</div><div class=\"line\">Rafaela Silva</div><div class=\"line\">Ramaz Kharshiladze</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Now we can pipe the <code>uniq -c</code> command to our data processing flow in order to remove duplicates. The option <code>-c</code> prints in front of every line the number of consecutive occurrences originally found for that line.<br>After this command we will have something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">1 Paweł Nastula</div><div class=\"line\">2 Peter Seisenbacher</div><div class=\"line\">1 Priscilla Gneto</div><div class=\"line\">1 Qin Dongya</div><div class=\"line\">1 Radomir Kovačević</div><div class=\"line\">2 Rafael Silva</div><div class=\"line\">1 Rafaela Silva</div><div class=\"line\">1 Ramaz Kharshiladze</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Note that <a href=\"https://en.wikipedia.org/wiki/Rafael_Silva_(judoka\" target=\"_blank\" rel=\"external\">Rafael Silva</a>) and <a href=\"https://en.wikipedia.org/wiki/Rafaela_Silva\" target=\"_blank\" rel=\"external\">Rafaela Silva</a> are two different athletes, it’s not a typo! 😂</p>\n<p>We are almost done. Now we just need to sort our data once again, but this time in reverse order. To do so we can use the <code>sort</code> command once again, this time as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort -nr</div></pre></td></tr></table></figure>\n<p>Where the option <code>-n</code> specifies that the first part of every line is a number (so the command can effectively distinguish and sort lines starting for example with <code>1</code> and <code>10</code>). The option <code>-r</code> instead indicates that we want to sort in revers order (bigger first).</p>\n<p>This concludes our pipeline of commands!</p>\n<h2 id=\"Combining-all-together\"><a href=\"#Combining-all-together\" class=\"headerlink\" title=\"Combining all together\"></a>Combining all together</h2><p>Combining all the commands together, our final pipeline will be the following:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> |\\</div><div class=\"line\"> grep -Eoi <span class=\"string\">\"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"</span> |\\</div><div class=\"line\"> cut -c<span class=\"string\">\"19-\"</span> |\\</div><div class=\"line\"> cut <span class=\"_\">-d</span> \\] <span class=\"_\">-f</span> 1 |\\</div><div class=\"line\"> cut <span class=\"_\">-d</span> \\| <span class=\"_\">-f</span> 2 |\\</div><div class=\"line\"> sort |\\</div><div class=\"line\"> uniq -c |\\</div><div class=\"line\"> sort -nr</div></pre></td></tr></table></figure>\n<p>Now that you understood every single part it shouldn’t look very cryptic.</p>\n<p>If we execute it, we can finally discover who are the best Judo Olympic athletes up to Rio 2016:</p>\n<p>… drum rolls …</p>\n<p>With 4 medals:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Driulis_González\" target=\"_blank\" rel=\"external\">Driulis González</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Angelo_Parisi\" target=\"_blank\" rel=\"external\">Angelo Parisi</a></li>\n</ul>\n<p>With 3 medals:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Teddy_Riner\" target=\"_blank\" rel=\"external\">Teddy Riner</a> (The guy in the picture!)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Tadahiro_Nomura\" target=\"_blank\" rel=\"external\">Tadahiro Nomura</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ryoko_Tani\" target=\"_blank\" rel=\"external\">Ryoko Tamura</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Rishod_Sobirov\" target=\"_blank\" rel=\"external\">Rishod Sobirov</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Mark_Huizinga\" target=\"_blank\" rel=\"external\">Mark Huizinga</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Idalys_Ortiz\" target=\"_blank\" rel=\"external\">Idalys Ortiz</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Edith_Bosch\" target=\"_blank\" rel=\"external\">Edith Bosch</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/David_Douillet\" target=\"_blank\" rel=\"external\">David Douillet</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Amarilis_Savón\" target=\"_blank\" rel=\"external\">Amarilis Savón</a></li>\n</ul>\n<p>Lot’s of French people there, uh! It’s a shame no Italian athlete is there yet! 😉 </p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I hope this article showed you that the unix shell is a very powerful tool. If you learn its basic commands and the most common options you will be able to complete a hell of a lot of task directly from the command line by just wisely combining them. You will not need to open an editor and write a long script and then to have an interpreter like <a href=\"/tag/node-js\">Node.js</a> to run it, sometimes the command line is just enough you need!</p>\n<p>If you want to experiment a bit more with this topic, I can propose you a nice variation of this tutorial as exercise:</p>\n<p><strong>Can you compute the ranking of the nations with the highest number of medals?</strong></p>\n<p>If so, please write your solution in the comments 🤓</p>\n<p>Until next time!</p>\n<p>Cheers</p>\n<h2 id=\"Alternative-approaches\"><a href=\"#Alternative-approaches\" class=\"headerlink\" title=\"Alternative approaches\"></a>Alternative approaches</h2><p><strong>EXTRA</strong> (Updated on Wed 29th August 2016)</p>\n<p>Some people are suggesting interesting alternative solutions. I think it’s nice to list them here.</p>\n<h3 id=\"Improved-grep-with-the-reset-match-operator\"><a href=\"#Improved-grep-with-the-reset-match-operator\" class=\"headerlink\" title=\"Improved grep with the reset match operator\"></a>Improved <code>grep</code> with the reset match operator</h3><p>In the newest versions of Gnu grep (not currently available on Mac!) is possible to use the <code>\\K</code> operator (reset match). </p>\n<p><code>\\K</code> resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match. (See the complete regex on <a href=\"https://regex101.com/r/tJ9qI1/1\" target=\"_blank\" rel=\"external\">regex101</a>)</p>\n<p>With this approach we can rewrite our command as follows, effectively getting rid of all the <code>cut</code> commands in the pipeline:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> |\\</div><div class=\"line\"> grep -Po <span class=\"string\">'flagIOCmedalist\\|\\[\\[(.* \\(judoka\\)\\|)?\\K[^\\]]*'</span> |\\</div><div class=\"line\"> sort |\\</div><div class=\"line\"> uniq -c |\\</div><div class=\"line\"> sort -nr</div></pre></td></tr></table></figure>\n<p>Solution suggested by <em>pakistanprogrammerclub</em> in the <a href=\"#comment-2844392299\">comments</a></p>\n<h3 id=\"quget\"><a href=\"#quget\" class=\"headerlink\" title=\"quget\"></a>quget</h3><p><a href=\"https://www.npmjs.com/package/quget\" target=\"_blank\" rel=\"external\">quget</a> is a command line utility authored in <a href=\"/tag/node-js\">Node.js</a> that brings together the power of famous node packages such as request, cheerio, and jQuery-like CSS selectors to the command-line.</p>\n<p>To run the following command you need to have Node.js installed and to install <code>quget</code> with <code>npm i -g quget</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">quget https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo <span class=\"string\">\"#mw-content-text table.wikitable tr:nth-child(n+2) td:nth-child(n+2) a:first-of-type, #mw-content-text table.wikitable tr:nth-child(n+2) td:only-child a:first-of-type\"</span> | sort | uniq -c | sort -nr</div></pre></td></tr></table></figure>\n<p>Solution by <em>ɹɐqooɟ</em> in the <a href=\"#comment-2840602442\">comments</a>.</p>\n<p><em>shapeshed</em> on reddit mentioned <a href=\"https://github.com/ericchiang/pup\" target=\"_blank\" rel=\"external\">pup</a> an alternative command written in <a href=\"/tag/go\">Go</a>.</p>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p><code>awk</code> is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems (cit. <a href=\"https://en.wikipedia.org/wiki/AWK\" target=\"_blank\" rel=\"external\">Wikipedia</a>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> | awk -F<span class=\"string\">'\\|\\\\\\[\\\\\\[|\\\\\\]'</span> <span class=\"string\">'/flagIOCmedalist/&#123;a[$2]++&#125; END &#123;for (i in a) print a[i], i | \"sort -r\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>This didn’t work for me on a Mac, but it did work on an Ubuntu machine.</p>\n<p>Solution by <em>Boris P.</em> on Facebook.</p>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><p><code>sed</code> (stream editor) is a Unix utility that parses and transforms text, using a simple, compact programming language. (See more on <a href=\"https://en.wikipedia.org/wiki/Sed\" target=\"_blank\" rel=\"external\">Wikipedia</a>).</p>\n<p>We can use <code>sed</code> as an alternative to grep to extract the names of the judokas in one shot. Our final command will look like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> | sed -n <span class=\"string\">'/flagIOCmedalist/&#123;s/^.*\\[\\[//; s/\\]\\].*//; s/^.*|//;p&#125;'</span> | sort | uniq -c | sort -nr</div></pre></td></tr></table></figure>\n<p>This approach doesn’t seem to be working on Mac tough.</p>\n<p>Solution suggested by <em>pakistanprogrammerclub</em> in the <a href=\"#comment-2844392299\">comments</a></p>\n<h3 id=\"In-Browser-developer-console\"><a href=\"#In-Browser-developer-console\" class=\"headerlink\" title=\"In-Browser developer console\"></a>In-Browser developer console</h3><p>You can extract data from the current web page using the developer console that most browsers offer (Chrome, Opera, Firefox…). After opening <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo\" target=\"_blank\" rel=\"external\">our Wikipedia page of interest</a>, in the developer console you can run the following <a href=\"/tag/javascript\">JavaScript</a> one-liner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'table tr td:nth-child(n+2) &gt; a:nth-child(1), table tr:nth-child(3) td &gt; a:nth-child(1)'</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">return</span> e.innerText; &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,el</span>) </span>&#123; res[el] = res[el] ? res[el] + <span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"keyword\">return</span> res; &#125;, &#123;&#125;);</div></pre></td></tr></table></figure>\n<p>The result is an object with the medalists as keys, and the count as values. JavaScript objects are unordered so sorting is left as an exercise for the reader.</p>\n<p>Solution by <em>lacksconfidence</em> on <a href=\"https://news.ycombinator.com/item?id=12293209\" target=\"_blank\" rel=\"external\">HackerNews</a></p>\n<h3 id=\"XPath-and-Google-Spreadsheet-or-Python\"><a href=\"#XPath-and-Google-Spreadsheet-or-Python\" class=\"headerlink\" title=\"XPath and Google Spreadsheet or Python\"></a>XPath and Google Spreadsheet or Python</h3><p>XPath (XML Path Language) is a query language for selecting nodes from an XML document (cit. <a href=\"https://en.wikipedia.org/wiki/XPath\" target=\"_blank\" rel=\"external\">Wikipedia</a>).</p>\n<p>By downloading the HTML of the Wikipedia page and applying an XPath selector like <code>//table//tr/td[2]/a[1]/text()</code> we should be able to extract all the gold medalist in the tables. In the same fashion we can build a slightly more complex solution by combining more selectors:</p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//table//tr/td[<span class=\"number\">2</span>]/a[<span class=\"number\">1</span>]/text()|//table//tr/td[<span class=\"number\">3</span>]/a[<span class=\"number\">1</span>]/text()|//table//tr/td[<span class=\"number\">4</span>]/a[<span class=\"number\">1</span>]/text()</div></pre></td></tr></table></figure>\n<p>With this approach we can easily import data into a spreadsheet software like Google Spreadsheet. In Google Spreadsheet we can use the function <code>IMPORTXML</code> to run an XPath expression against an XML or HTML document available on a given URL.</p>\n<p>I created an <a href=\"https://docs.google.com/spreadsheets/d/1VVFIGFcmuVpDRBR9xKe-s_T4tJk0-tLcvuf_gKVuKfA/edit?usp=sharing\" target=\"_blank\" rel=\"external\">example document</a> that you can check out if you are curious to see this feature in action.</p>\n<p>Solution based on comments by <em>turtlebits</em> and <em>san_dimitri</em> on <a href=\"https://news.ycombinator.com/item?id=12294667\" target=\"_blank\" rel=\"external\">HackerNews</a>.</p>\n<p>I’m glad to know I inspired <a href=\"https://twitter.com/@NikolaiHampton\" target=\"_blank\" rel=\"external\">Nikolai Hampton</a> to write an <a href=\"http://3583bytesready.net/2016/08/17/scraping-data-python-xpath/\" target=\"_blank\" rel=\"external\">amazing article</a> that illustrates how to solve this problem using XPath expressions in <strong>Python</strong>. If you like Python the article is absolutely a must, don’t miss it out!</p>\n","excerpt":"","more":"<p>In this article I am going to show you how I was able to extract and process some information from Wikipedia only using a combination of common bash utilities like <code>curl</code> and <code>grep</code>.</p>\n<h2 id=\"The-need\"><a href=\"#The-need\" class=\"headerlink\" title=\"The need\"></a>The need</h2><p>If you are a sport lover like me I guess your heart is currently being warmed by the <strong>Rio 2016 Olympic games</strong>. My favourite sport in the games is <strong>Judo</strong> and now that the competitions are over I was wondering who were <strong>the best olympic “judokas” of all the times</strong> by number of medals collected during the games (no matter the kind of medal).<br>I tried to <em>google</em> the answer for a while but it wasn’t easy to find an up to date result, so I decided to do some quick research and trying to get to a conclusion by myself. I have to say it was I bit tougher than I expected, but it was definitively fun…</p>\n<h2 id=\"The-dataset\"><a href=\"#The-dataset\" class=\"headerlink\" title=\"The dataset\"></a>The dataset</h2><p>The first thing I needed was a reliable and up to date data source listing all the Judo Olympic medal winners in history. This was easy to find on Wikipedia: <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo\">List of Olympic medalists in Judo</a>.<br>Anyway the data on this Wikipedia page is structured to be easy to read by humans and not to be processed by a machine. Also I didn’t found any way to have the same data in the page in a <em>csv</em> or <em>json</em> format, so the only viable option was to extract the data by myself from the web page.<br>At first I thought about creating a quick and dirty <a href=\"/tag/javascript\">JavaScript</a> command and use some library like <a href=\"https://cheerio.js.org\">cheerio</a> to extract the data directly from the HTML code of the page, but it sounded like to much of work for the simple goal I had in mind.<br>So I had another quick look at Wikipedia to find out if there was any better format to extract the information. Going to the <em>edit</em> option of the page I realized that parsing the <a href=\"https://www.mediawiki.org/wiki/Markup_spec\">wikitext</a> (source) of the page would have been much easier and I could even use a regular expression to extract the relevant information from there.<br>At this stage I wondered if there was a way to get only the wikitext of a specific Wikipedia page. It turns out that it’s possible and it’s very easy: you just need to append the query parameter <code>?action=raw</code> in the url!</p>\n<p>So hitting <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\">https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw</a> will give us our starting dataset which will look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">==Men==</div><div class=\"line\">===Extra Lightweight===</div><div class=\"line\">*60&amp;nbsp;kg</div><div class=\"line\">&#123;| &#123;&#123;MedalistTable|type=Games&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|rowspan=2|[[Judo at the 1980 Summer Olympics|1980 Moscow]]&lt;br&gt;&#123;&#123;DetailsLink|Judo at the 1980 Summer Olympics – Men&apos;s 60 kg&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Thierry Rey]]|FRA|1980 Summer&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]|CUB|1980 Summer&#125;&#125;</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]|HUN|1980 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Aramby Emizh]]|URS|1980 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|rowspan=2|[[Judo at the 1984 Summer Olympics|1984 Los Angeles]]&lt;br&gt;&#123;&#123;DetailsLink|Judo at the 1984 Summer Olympics – Men&apos;s 60 kg&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Shinji Hosokawa]]|JPN|1984 Summer&#125;&#125;</div><div class=\"line\">|rowspan=2|&#123;&#123;flagIOCmedalist|[[Kim Jae-Yup]]|KOR|1984 Summer&#125;&#125;</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Neil Eckersley]]|GBR|1984 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">|&#123;&#123;flagIOCmedalist|[[Edward Liddie]]|USA|1984 Summer&#125;&#125;</div><div class=\"line\">|-</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Note that, for the sake of brevity, from now on I will use <code>...</code> to indicates that there’s a lot of data that was stripped from the example.</p>\n<p>We can easily get this data into our bash shell with <code>curl</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span></div></pre></td></tr></table></figure>\n<p>In case you don’t know the options <code>-sS</code> allow to strip out the download progress output and just print the downloaded data (or any possible error) in the console.</p>\n<p>Now that we have our dataset, to compute the result we need to:</p>\n<ul>\n<li>Extract all the athletes names</li>\n<li>Count the occurrences of each one of them</li>\n<li>Reverse order them by the resulting count.</li>\n</ul>\n<p>We will do so with a combination of bash commands, bound together using the pipe operator (<code>|</code>). Pipes let you use the output of a program as the input of another one, effectively creating a stream of data that is transformed step by step by small and easy to understand operations.</p>\n<h2 id=\"Extracting-data-with-grep\"><a href=\"#Extracting-data-with-grep\" class=\"headerlink\" title=\"Extracting data with grep\"></a>Extracting data with <code>grep</code></h2><p>The dataset shown before is just the wikitext code needed to render the tables of athletes that won medals by category and year. So we can easily assume that all the athletes listed in the page are interesting for us.</p>\n<p>As you can see every athlete is referenced in the code using the <em>template</em> <code>flagIOCmedalist</code> and every entry looks like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;flagIOCmedalist|[[NAME]]|COUNTRY|OLYMPIC GAME&#125;&#125;</div></pre></td></tr></table></figure>\n<p>So we can easily extract all the athletes names with a regex like the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flagIOCmedalist\\|\\[\\[(.+)\\]\\]</div></pre></td></tr></table></figure>\n<p>This regular expression behaves as described in the following picture:</p>\n<p><img src=\"/content/images/2016/08/flagIOCmedalist_matches_the_characters_flagIOCmedalist.png\" alt=\"flagIOCmedalist matches the characters flagIOCmedalist literally\"></p>\n<p>If you want to understand all the details of this regex you can play with it on <a href=\"https://regex101.com/r/cT7nD8/2\">regex101</a>.</p>\n<p>In the shell we can apply a regex to an input data using <code>grep</code>. We need to concatenate the output of <code>curl</code> to <code>grep</code> using the pipe operator (<code>|</code>):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl ... |  grep -Eoi <span class=\"string\">\"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"</span></div></pre></td></tr></table></figure>\n<p>With the <code>grep</code> we are using the options <code>-Eoi</code> which allow us to:</p>\n<ul>\n<li><code>-E</code>: use a POSIX <em>extended</em> regular expression (<a href=\"https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions\">ERE</a>)</li>\n<li><code>-o</code>: print only the matched (non-empty) parts of a matching line</li>\n<li><code>-i</code>: case insensitive matching (this is not really needed for our problem, but could allow us to match any case variation of the template reference like <code>flagiocmedalist</code> and <code>FLAGIOCMEDALIST</code>).</li>\n</ul>\n<p>The previous command is going to output something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">flagIOCmedalist|[[Thierry Rey]]</div><div class=\"line\">flagIOCmedalist|[[José Rodríguez (judoka)|José Rodríguez]]</div><div class=\"line\">flagIOCmedalist|[[Tibor Kincses (judoka)|Tibor Kincses]]</div><div class=\"line\">flagIOCmedalist|[[Aramby Emizh]]</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Which, of course, looks kind of ugly. We ideally want to have only the name of every athlete and not all the <code>template</code> syntax wrapping it.</p>\n<p>Let’s try to clean up the data a little bit more.</p>\n<h2 id=\"Cleaning-up-the-data-with-cut\"><a href=\"#Cleaning-up-the-data-with-cut\" class=\"headerlink\" title=\"Cleaning up the data with cut\"></a>Cleaning up the data with <code>cut</code></h2><p><code>cut</code> is another interesting command line utility that can be used in a whole lot of different ways to extract substrings (or columns) from text.</p>\n<p>Using <code>cut</code> we can remove all the unneeded text in 3 steps:</p>\n<ol>\n<li>remove the prefix <code>flagIOCmedalist|[[</code></li>\n<li>remove the suffix <code>]]</code></li>\n<li>clean up the names with the “(judo)” disambiguation note. For example from <code>José Rodríguez (judoka)|José Rodríguez</code> we want to keep only <code>José Rodríguez</code>.</li>\n</ol>\n<h3 id=\"Substring-with-cut\"><a href=\"#Substring-with-cut\" class=\"headerlink\" title=\"Substring with cut\"></a>Substring with <code>cut</code></h3><p>The complete the first step (removing the prefix <code>flagIOCmedalist|[[</code>) we can use the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... | cut -c<span class=\"string\">\"19-\"</span></div></pre></td></tr></table></figure>\n<p>The option <code>-c&quot;19-&quot;</code> means: “take the substring that starts from the character number 19 to the end of the string”. Character 19 is the 20th character considering that strings are <em>“0-indexed”</em>.<br>You can use the <code>-c</code> option to extract any generic substring. For example <code>-c&quot;4-8&quot;</code> will extract the substring from the 5th to the 9th character. If you leave the range open on the right it will take all the remaining string to the end.</p>\n<p>This filter will be applied to every line and it will modify our stream of data as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey]]</div><div class=\"line\">José Rodríguez (judoka)|José Rodríguez]]</div><div class=\"line\">Tibor Kincses (judoka)|Tibor Kincses]]</div><div class=\"line\">Aramby Emizh]]</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h3 id=\"Splitting-strings-with-cut\"><a href=\"#Splitting-strings-with-cut\" class=\"headerlink\" title=\"Splitting strings with cut\"></a>Splitting strings with <code>cut</code></h3><p>Now we would like to remove the suffix <code>]]</code>.<br>In order to achieve this goal we can use:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... cut <span class=\"_\">-d</span> \\] <span class=\"_\">-f</span> 1</div></pre></td></tr></table></figure>\n<p>This time we are using the options <code>-d</code> and <code>-f</code>.<br>When we use <code>d</code> we can specify a character to be used as delimiter (<code>]</code> in this case), this way <code>cut</code> will not split the string by character index but in chunks (or columns), generating a new chunk every time the delimiter is encountered along the line.<br>The option <code>-f</code> can be combined with <code>-d</code> to select one or more chunks, in this case we want to select the first chunk.<br>As we can expect, this will be the status of our data after this command is executed in the pipeline:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey</div><div class=\"line\">José Rodríguez (judoka)|José Rodríguez</div><div class=\"line\">Tibor Kincses (judoka)|Tibor Kincses</div><div class=\"line\">Aramby Emizh </div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>The data looks almost clean, we just need to get rid of the occasional disambiguation notes. These cases can be distinguished by the character <code>|</code> (pipe) that separates the disambiguation definition from the text that must be rendered by the wikitext engine into HTML code. In these cases we want to keep only the part of the string after the pipe character. Again we can use <code>cut</code> with the options <code>-d</code> and <code>-f</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">... | cut <span class=\"_\">-d</span> \\| <span class=\"_\">-f</span> 2</div></pre></td></tr></table></figure>\n<p>This time we are using the pipe character as delimiter and we are taking only the second chunk of the string.<br>This might seem obvious at this stage, but what happens in all the rows where there’s no disambiguation note (and no pipe character)? In this cases we will have just one chunk containing the full line, so what do we get by using the option <code>-f 2</code>?<br>Luckily in these cases <code>cut</code> is smart enough to assume the string is not matching our pattern and returns the entire line, so our data is not destroyed.</p>\n<p>The final result after this command is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thierry Rey</div><div class=\"line\">José Rodríguez</div><div class=\"line\">Tibor Kincses</div><div class=\"line\">Aramby Emizh </div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Our data is finally clean! 🎉</p>\n<h2 id=\"Counting-and-sorting-with-uniq-and-sort\"><a href=\"#Counting-and-sorting-with-uniq-and-sort\" class=\"headerlink\" title=\"Counting and sorting with uniq and sort\"></a>Counting and sorting with <code>uniq</code> and <code>sort</code></h2><p>Now that we have our clean list of names we need to count the occurrences of every athlete and sort.<br>In order to remove duplicates (and count the occurrences) we can use the command <code>uniq</code>. This command, when fed with some text, outputs the text itself with adjacent identical lines collapsed to one.<br>This means that before we can use <code>uniq</code> we need to have all the names sorted alphabetically so that all the athletes with multiple occurrences have their name repeated on multiple lines one after another.<br>This can be achieved with the command <code>sort</code>, which, as you might easily guess, just sorts all the lines received as input in alphabetical order.</p>\n<p>Just to give you a practical example, after using the command <code>sort</code> our data will look like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">Paweł Nastula</div><div class=\"line\">Peter Seisenbacher</div><div class=\"line\">Peter Seisenbacher</div><div class=\"line\">Priscilla Gneto</div><div class=\"line\">Qin Dongya</div><div class=\"line\">Radomir Kovačević</div><div class=\"line\">Rafael Silva</div><div class=\"line\">Rafael Silva</div><div class=\"line\">Rafaela Silva</div><div class=\"line\">Ramaz Kharshiladze</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Now we can pipe the <code>uniq -c</code> command to our data processing flow in order to remove duplicates. The option <code>-c</code> prints in front of every line the number of consecutive occurrences originally found for that line.<br>After this command we will have something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">1 Paweł Nastula</div><div class=\"line\">2 Peter Seisenbacher</div><div class=\"line\">1 Priscilla Gneto</div><div class=\"line\">1 Qin Dongya</div><div class=\"line\">1 Radomir Kovačević</div><div class=\"line\">2 Rafael Silva</div><div class=\"line\">1 Rafaela Silva</div><div class=\"line\">1 Ramaz Kharshiladze</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Note that <a href=\"https://en.wikipedia.org/wiki/Rafael_Silva_(judoka\">Rafael Silva</a>) and <a href=\"https://en.wikipedia.org/wiki/Rafaela_Silva\">Rafaela Silva</a> are two different athletes, it’s not a typo! 😂</p>\n<p>We are almost done. Now we just need to sort our data once again, but this time in reverse order. To do so we can use the <code>sort</code> command once again, this time as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort -nr</div></pre></td></tr></table></figure>\n<p>Where the option <code>-n</code> specifies that the first part of every line is a number (so the command can effectively distinguish and sort lines starting for example with <code>1</code> and <code>10</code>). The option <code>-r</code> instead indicates that we want to sort in revers order (bigger first).</p>\n<p>This concludes our pipeline of commands!</p>\n<h2 id=\"Combining-all-together\"><a href=\"#Combining-all-together\" class=\"headerlink\" title=\"Combining all together\"></a>Combining all together</h2><p>Combining all the commands together, our final pipeline will be the following:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> |\\</div><div class=\"line\"> grep -Eoi <span class=\"string\">\"flagIOCmedalist\\|\\[\\[(.+)\\]\\]\"</span> |\\</div><div class=\"line\"> cut -c<span class=\"string\">\"19-\"</span> |\\</div><div class=\"line\"> cut <span class=\"_\">-d</span> \\] <span class=\"_\">-f</span> 1 |\\</div><div class=\"line\"> cut <span class=\"_\">-d</span> \\| <span class=\"_\">-f</span> 2 |\\</div><div class=\"line\"> sort |\\</div><div class=\"line\"> uniq -c |\\</div><div class=\"line\"> sort -nr</div></pre></td></tr></table></figure>\n<p>Now that you understood every single part it shouldn’t look very cryptic.</p>\n<p>If we execute it, we can finally discover who are the best Judo Olympic athletes up to Rio 2016:</p>\n<p>… drum rolls …</p>\n<p>With 4 medals:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Driulis_González\">Driulis González</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Angelo_Parisi\">Angelo Parisi</a></li>\n</ul>\n<p>With 3 medals:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Teddy_Riner\">Teddy Riner</a> (The guy in the picture!)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Tadahiro_Nomura\">Tadahiro Nomura</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ryoko_Tani\">Ryoko Tamura</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Rishod_Sobirov\">Rishod Sobirov</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Mark_Huizinga\">Mark Huizinga</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Idalys_Ortiz\">Idalys Ortiz</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Edith_Bosch\">Edith Bosch</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/David_Douillet\">David Douillet</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Amarilis_Savón\">Amarilis Savón</a></li>\n</ul>\n<p>Lot’s of French people there, uh! It’s a shame no Italian athlete is there yet! 😉 </p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I hope this article showed you that the unix shell is a very powerful tool. If you learn its basic commands and the most common options you will be able to complete a hell of a lot of task directly from the command line by just wisely combining them. You will not need to open an editor and write a long script and then to have an interpreter like <a href=\"/tag/node-js\">Node.js</a> to run it, sometimes the command line is just enough you need!</p>\n<p>If you want to experiment a bit more with this topic, I can propose you a nice variation of this tutorial as exercise:</p>\n<p><strong>Can you compute the ranking of the nations with the highest number of medals?</strong></p>\n<p>If so, please write your solution in the comments 🤓</p>\n<p>Until next time!</p>\n<p>Cheers</p>\n<h2 id=\"Alternative-approaches\"><a href=\"#Alternative-approaches\" class=\"headerlink\" title=\"Alternative approaches\"></a>Alternative approaches</h2><p><strong>EXTRA</strong> (Updated on Wed 29th August 2016)</p>\n<p>Some people are suggesting interesting alternative solutions. I think it’s nice to list them here.</p>\n<h3 id=\"Improved-grep-with-the-reset-match-operator\"><a href=\"#Improved-grep-with-the-reset-match-operator\" class=\"headerlink\" title=\"Improved grep with the reset match operator\"></a>Improved <code>grep</code> with the reset match operator</h3><p>In the newest versions of Gnu grep (not currently available on Mac!) is possible to use the <code>\\K</code> operator (reset match). </p>\n<p><code>\\K</code> resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match. (See the complete regex on <a href=\"https://regex101.com/r/tJ9qI1/1\">regex101</a>)</p>\n<p>With this approach we can rewrite our command as follows, effectively getting rid of all the <code>cut</code> commands in the pipeline:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> |\\</div><div class=\"line\"> grep -Po <span class=\"string\">'flagIOCmedalist\\|\\[\\[(.* \\(judoka\\)\\|)?\\K[^\\]]*'</span> |\\</div><div class=\"line\"> sort |\\</div><div class=\"line\"> uniq -c |\\</div><div class=\"line\"> sort -nr</div></pre></td></tr></table></figure>\n<p>Solution suggested by <em>pakistanprogrammerclub</em> in the <a href=\"#comment-2844392299\">comments</a></p>\n<h3 id=\"quget\"><a href=\"#quget\" class=\"headerlink\" title=\"quget\"></a>quget</h3><p><a href=\"https://www.npmjs.com/package/quget\">quget</a> is a command line utility authored in <a href=\"/tag/node-js\">Node.js</a> that brings together the power of famous node packages such as request, cheerio, and jQuery-like CSS selectors to the command-line.</p>\n<p>To run the following command you need to have Node.js installed and to install <code>quget</code> with <code>npm i -g quget</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">quget https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo <span class=\"string\">\"#mw-content-text table.wikitable tr:nth-child(n+2) td:nth-child(n+2) a:first-of-type, #mw-content-text table.wikitable tr:nth-child(n+2) td:only-child a:first-of-type\"</span> | sort | uniq -c | sort -nr</div></pre></td></tr></table></figure>\n<p>Solution by <em>ɹɐqooɟ</em> in the <a href=\"#comment-2840602442\">comments</a>.</p>\n<p><em>shapeshed</em> on reddit mentioned <a href=\"https://github.com/ericchiang/pup\">pup</a> an alternative command written in <a href=\"/tag/go\">Go</a>.</p>\n<h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p><code>awk</code> is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems (cit. <a href=\"https://en.wikipedia.org/wiki/AWK\">Wikipedia</a>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> | awk -F<span class=\"string\">'\\|\\\\\\[\\\\\\[|\\\\\\]'</span> <span class=\"string\">'/flagIOCmedalist/&#123;a[$2]++&#125; END &#123;for (i in a) print a[i], i | \"sort -r\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>This didn’t work for me on a Mac, but it did work on an Ubuntu machine.</p>\n<p>Solution by <em>Boris P.</em> on Facebook.</p>\n<h3 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h3><p><code>sed</code> (stream editor) is a Unix utility that parses and transforms text, using a simple, compact programming language. (See more on <a href=\"https://en.wikipedia.org/wiki/Sed\">Wikipedia</a>).</p>\n<p>We can use <code>sed</code> as an alternative to grep to extract the names of the judokas in one shot. Our final command will look like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S <span class=\"string\">\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo?action=raw\"</span> | sed -n <span class=\"string\">'/flagIOCmedalist/&#123;s/^.*\\[\\[//; s/\\]\\].*//; s/^.*|//;p&#125;'</span> | sort | uniq -c | sort -nr</div></pre></td></tr></table></figure>\n<p>This approach doesn’t seem to be working on Mac tough.</p>\n<p>Solution suggested by <em>pakistanprogrammerclub</em> in the <a href=\"#comment-2844392299\">comments</a></p>\n<h3 id=\"In-Browser-developer-console\"><a href=\"#In-Browser-developer-console\" class=\"headerlink\" title=\"In-Browser developer console\"></a>In-Browser developer console</h3><p>You can extract data from the current web page using the developer console that most browsers offer (Chrome, Opera, Firefox…). After opening <a href=\"https://en.wikipedia.org/wiki/List_of_Olympic_medalists_in_judo\">our Wikipedia page of interest</a>, in the developer console you can run the following <a href=\"/tag/javascript\">JavaScript</a> one-liner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'table tr td:nth-child(n+2) &gt; a:nth-child(1), table tr:nth-child(3) td &gt; a:nth-child(1)'</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">return</span> e.innerText; &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,el</span>) </span>&#123; res[el] = res[el] ? res[el] + <span class=\"number\">1</span> : <span class=\"number\">1</span>; <span class=\"keyword\">return</span> res; &#125;, &#123;&#125;);</div></pre></td></tr></table></figure>\n<p>The result is an object with the medalists as keys, and the count as values. JavaScript objects are unordered so sorting is left as an exercise for the reader.</p>\n<p>Solution by <em>lacksconfidence</em> on <a href=\"https://news.ycombinator.com/item?id=12293209\">HackerNews</a></p>\n<h3 id=\"XPath-and-Google-Spreadsheet-or-Python\"><a href=\"#XPath-and-Google-Spreadsheet-or-Python\" class=\"headerlink\" title=\"XPath and Google Spreadsheet or Python\"></a>XPath and Google Spreadsheet or Python</h3><p>XPath (XML Path Language) is a query language for selecting nodes from an XML document (cit. <a href=\"https://en.wikipedia.org/wiki/XPath\">Wikipedia</a>).</p>\n<p>By downloading the HTML of the Wikipedia page and applying an XPath selector like <code>//table//tr/td[2]/a[1]/text()</code> we should be able to extract all the gold medalist in the tables. In the same fashion we can build a slightly more complex solution by combining more selectors:</p>\n<figure class=\"highlight xpath\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//table//tr/td[<span class=\"number\">2</span>]/a[<span class=\"number\">1</span>]/text()|//table//tr/td[<span class=\"number\">3</span>]/a[<span class=\"number\">1</span>]/text()|//table//tr/td[<span class=\"number\">4</span>]/a[<span class=\"number\">1</span>]/text()</div></pre></td></tr></table></figure>\n<p>With this approach we can easily import data into a spreadsheet software like Google Spreadsheet. In Google Spreadsheet we can use the function <code>IMPORTXML</code> to run an XPath expression against an XML or HTML document available on a given URL.</p>\n<p>I created an <a href=\"https://docs.google.com/spreadsheets/d/1VVFIGFcmuVpDRBR9xKe-s_T4tJk0-tLcvuf_gKVuKfA/edit?usp=sharing\">example document</a> that you can check out if you are curious to see this feature in action.</p>\n<p>Solution based on comments by <em>turtlebits</em> and <em>san_dimitri</em> on <a href=\"https://news.ycombinator.com/item?id=12294667\">HackerNews</a>.</p>\n<p>I’m glad to know I inspired <a href=\"https://twitter.com/@NikolaiHampton\">Nikolai Hampton</a> to write an <a href=\"http://3583bytesready.net/2016/08/17/scraping-data-python-xpath/\">amazing article</a> that illustrates how to solve this problem using XPath expressions in <strong>Python</strong>. If you like Python the article is absolutely a must, don’t miss it out!</p>\n"},{"uuid":"84459189-e67a-404a-97dc-697a72aeaf51","layout":"post","title":"Finally/First","slug":"finally-first","subtitle":null,"date":"2014-01-16T23:04:36.000Z","updated":"2014-01-17T03:06:07.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nYep! **Finally** here's the **first** post on the path of this blog. *Finally/first*, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure.\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: **Why start a blog?**\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in *qbasic*, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. \n\nI think that's all for now.\nStay tuned ;)\n","source":"_posts/finally-first.md","raw":"uuid:             84459189-e67a-404a-97dc-697a72aeaf51\nlayout:           post\ntitle:            Finally/First\nslug:             finally-first\nsubtitle:         null\ndate:             '2014-01-16T23:04:36.000Z'\nupdated:          '2014-01-17T03:06:07.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Life\n\n---\n\nYep! **Finally** here's the **first** post on the path of this blog. *Finally/first*, indeed a curious binomial with a weird sound, but I think it's a good title to start this adventure.\nI'll try to keep it simple and avoid to bloat things out... just start dancing by answering to a simple question, maybe the proper one now: **Why start a blog?**\nWell, I'm a web developer, fascinated by the web since I was a child and started writing my first lines of code in *qbasic*, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. \n\nI think that's all for now.\nStay tuned ;)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrye000esvvugv2u396f","content":"<p>Yep! <strong>Finally</strong> here’s the <strong>first</strong> post on the path of this blog. <em>Finally/first</em>, indeed a curious binomial with a weird sound, but I think it’s a good title to start this adventure.<br>I’ll try to keep it simple and avoid to bloat things out… just start dancing by answering to a simple question, maybe the proper one now: <strong>Why start a blog?</strong><br>Well, I’m a web developer, fascinated by the web since I was a child and started writing my first lines of code in <em>qbasic</em>, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. </p>\n<p>I think that’s all for now.<br>Stay tuned ;)</p>\n","excerpt":"","more":"<p>Yep! <strong>Finally</strong> here’s the <strong>first</strong> post on the path of this blog. <em>Finally/first</em>, indeed a curious binomial with a weird sound, but I think it’s a good title to start this adventure.<br>I’ll try to keep it simple and avoid to bloat things out… just start dancing by answering to a simple question, maybe the proper one now: <strong>Why start a blog?</strong><br>Well, I’m a web developer, fascinated by the web since I was a child and started writing my first lines of code in <em>qbasic</em>, and as any other serious web developer it happens to me to read tons of blogs to keep myself updated with the latest trends that pop out in this field. It also constantly happen to me to have the need to experiment something new in my free time. Summing it up I felt the need to build a space of mine in wich report my thoughts about web development and the result of some of these experiments. </p>\n<p>I think that’s all for now.<br>Stay tuned ;)</p>\n"},{"uuid":"e389e030-1376-49b4-93eb-9c6ae6d156c5","layout":"post","title":"Get an invitation for GitKraken","slug":"get-an-invitation-for-gitkraken","subtitle":null,"date":"2016-01-19T21:10:23.000Z","updated":"2016-02-03T18:52:55.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/01/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nAxosoft is currently working on [GitKraken](http://www.gitkraken.com/) an innovative multi-platform graphical client for [git](/tag/git) which is already available for Windows, Linux and Mac OSX in **private beta** version.\n\nThe private beta is accessible through an invite code. \nI was lucky to get an invite for me and **~~I have~~ some extra invites that I am willing to share with the first people who is going to leave a comment on this post**.\n\n- UPDATE **2016-01-19 22:00 GMT**: I finished all the invites in less than 1 hour! That's incredible :O Sorry for whoever remained out, I'll let you know if I manage to get more invites!\n\n- UPDATE **2016-01-19 23:00 GMT**: Seems that I was very very lucky and I got some **NEW INVITES**, keep commenting to get them! ;)\n\n- UPDATE **2016-01-23 09:00 GMT**: Invites are over!\n\n- UPDATE **2016-02-03 18:50 GMT**: Yesterday GitKraken 0.6 was released as Public Beta and it's free to be downloaded on the [official website](http://www.gitkraken.com/).\n\n\n## What is GitKraken\n\nAs I said, GitKraken is a new *shiny* graphical interface for [git](/tag/git). I am a big fan of git from command line and even if I used a number of different GUIs in the past I always switched back to the console.\nBy the way, GitKraken looks promising thanks to a set of interesting features. Let's have a look at the ones that impressed me most after a first try.\n\n\n### Network view\n\n[![GitKraken network view branching model graph](/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png)](/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png)\n\nThis is probably the **killer feature** at the moment, a *nice-looking* graphical view of your git network that allows you to understand what is the current status of you repository in terms of commits and branches. Every dot in the graph represents a commit and it is interactive. When you select one of them you can see all the changes applied by that commit, who pushed it, the commit description and, most importantly, if you right click on it you can immediately perform a number of actions which are notoriously not so trivial from the command line: \n\n- cherry-pick\n- create a branch from the specific commit\n- create a new tag pointing that commit\n- reset master to that commit\n- edit commit message\n\n\n### Integration with [GitHub](/tag/github)\n\n[![GitKraken integration with GitHub](/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png)](/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png)\n\nGitKraken allows you to connect with your GitHub social account and easily access and clone from your remote repositories or fork an existing repository.\n\nThis is a lovely feature that will save you some amount of time if you are an active open source contributor or if your organisation is using GitHub for business.\n\nThe integration is currently limited to cloning, but I hope it will be improved to support also pull requests and issues (which would be definitely amazing!).\n\nAlso it's worth mentioning that the support for BitBucket seems to be coming soon!\n\n\n### Branching and Stashing\n\nThere are a couple of other interesting operations that are made trivial by GitKraken...\nI am talking about **branching** and **stashing**. By just clicking a button you will be able to create a new branch starting from the current head or from a specific commit and you can also *stash* your current *uncommitted* changes. When you stash something you will see a dot in your network graph that represents the stashed data as if it was a commit and you will be able to *unstash* that changes at any time later in the future.\nPersonally I believe these features can simplify the adoption of a Git branching model as [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/) within your team.\n\n\n### Built with [Electron](http://electron.atom.io/) and [NodeJs](/tag/node-js)\n\nWhile this is not a big differentiator at the moment (apart from making it immediately cross platform), I am quite sure that this feature will allow GitKraken to offer a nice extensibility layer offering people a way to write their own plugins/integrations.\nJust look at recent softwares like [nylan/N1](https://github.com/nylas/N1) and [Atom](/3-invitations-to-try-atom-io/) to understand what is possible with this technology and why developers are loving these products.\n\n\n## Conclusion\n\nI think it's still to early to form a strong opinion about this product, but the premises are excellent and I would say we can expect great things for the first public release. I hope Axosoft will decide to keep it free as Atlassian is doing with SourceTree and that this choice might be another incentive to allow people to adopt or get even more familiar with Git.\n\nI am curious to know your opinion about it and if you prefer to use a GUI rather than the command line, so please leave a comment.\n\nAlso remember to ~~leave a comment down below this post if you need an invitation to try it~~ (invites over)!\n\nUntil next time :)\n","source":"_posts/get-an-invitation-for-gitkraken.md","raw":"uuid:             e389e030-1376-49b4-93eb-9c6ae6d156c5\nlayout:           post\ntitle:            'Get an invitation for GitKraken'\nslug:             get-an-invitation-for-gitkraken\nsubtitle:         null\ndate:             '2016-01-19T21:10:23.000Z'\nupdated:          '2016-02-03T18:52:55.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/01/get-an-invitation-for-gitkraken-loige-co-luciano-mammino.png\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Git\n  - Github\n\n---\n\nAxosoft is currently working on [GitKraken](http://www.gitkraken.com/) an innovative multi-platform graphical client for [git](/tag/git) which is already available for Windows, Linux and Mac OSX in **private beta** version.\n\nThe private beta is accessible through an invite code. \nI was lucky to get an invite for me and **~~I have~~ some extra invites that I am willing to share with the first people who is going to leave a comment on this post**.\n\n- UPDATE **2016-01-19 22:00 GMT**: I finished all the invites in less than 1 hour! That's incredible :O Sorry for whoever remained out, I'll let you know if I manage to get more invites!\n\n- UPDATE **2016-01-19 23:00 GMT**: Seems that I was very very lucky and I got some **NEW INVITES**, keep commenting to get them! ;)\n\n- UPDATE **2016-01-23 09:00 GMT**: Invites are over!\n\n- UPDATE **2016-02-03 18:50 GMT**: Yesterday GitKraken 0.6 was released as Public Beta and it's free to be downloaded on the [official website](http://www.gitkraken.com/).\n\n\n## What is GitKraken\n\nAs I said, GitKraken is a new *shiny* graphical interface for [git](/tag/git). I am a big fan of git from command line and even if I used a number of different GUIs in the past I always switched back to the console.\nBy the way, GitKraken looks promising thanks to a set of interesting features. Let's have a look at the ones that impressed me most after a first try.\n\n\n### Network view\n\n[![GitKraken network view branching model graph](/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png)](/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png)\n\nThis is probably the **killer feature** at the moment, a *nice-looking* graphical view of your git network that allows you to understand what is the current status of you repository in terms of commits and branches. Every dot in the graph represents a commit and it is interactive. When you select one of them you can see all the changes applied by that commit, who pushed it, the commit description and, most importantly, if you right click on it you can immediately perform a number of actions which are notoriously not so trivial from the command line: \n\n- cherry-pick\n- create a branch from the specific commit\n- create a new tag pointing that commit\n- reset master to that commit\n- edit commit message\n\n\n### Integration with [GitHub](/tag/github)\n\n[![GitKraken integration with GitHub](/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png)](/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png)\n\nGitKraken allows you to connect with your GitHub social account and easily access and clone from your remote repositories or fork an existing repository.\n\nThis is a lovely feature that will save you some amount of time if you are an active open source contributor or if your organisation is using GitHub for business.\n\nThe integration is currently limited to cloning, but I hope it will be improved to support also pull requests and issues (which would be definitely amazing!).\n\nAlso it's worth mentioning that the support for BitBucket seems to be coming soon!\n\n\n### Branching and Stashing\n\nThere are a couple of other interesting operations that are made trivial by GitKraken...\nI am talking about **branching** and **stashing**. By just clicking a button you will be able to create a new branch starting from the current head or from a specific commit and you can also *stash* your current *uncommitted* changes. When you stash something you will see a dot in your network graph that represents the stashed data as if it was a commit and you will be able to *unstash* that changes at any time later in the future.\nPersonally I believe these features can simplify the adoption of a Git branching model as [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/) within your team.\n\n\n### Built with [Electron](http://electron.atom.io/) and [NodeJs](/tag/node-js)\n\nWhile this is not a big differentiator at the moment (apart from making it immediately cross platform), I am quite sure that this feature will allow GitKraken to offer a nice extensibility layer offering people a way to write their own plugins/integrations.\nJust look at recent softwares like [nylan/N1](https://github.com/nylas/N1) and [Atom](/3-invitations-to-try-atom-io/) to understand what is possible with this technology and why developers are loving these products.\n\n\n## Conclusion\n\nI think it's still to early to form a strong opinion about this product, but the premises are excellent and I would say we can expect great things for the first public release. I hope Axosoft will decide to keep it free as Atlassian is doing with SourceTree and that this choice might be another incentive to allow people to adopt or get even more familiar with Git.\n\nI am curious to know your opinion about it and if you prefer to use a GUI rather than the command line, so please leave a comment.\n\nAlso remember to ~~leave a comment down below this post if you need an invitation to try it~~ (invites over)!\n\nUntil next time :)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryf000gsvvuvocmby6x","content":"<p>Axosoft is currently working on <a href=\"http://www.gitkraken.com/\" target=\"_blank\" rel=\"external\">GitKraken</a> an innovative multi-platform graphical client for <a href=\"/tag/git\">git</a> which is already available for Windows, Linux and Mac OSX in <strong>private beta</strong> version.</p>\n<p>The private beta is accessible through an invite code.<br>I was lucky to get an invite for me and <strong><del>I have</del> some extra invites that I am willing to share with the first people who is going to leave a comment on this post</strong>.</p>\n<ul>\n<li><p>UPDATE <strong>2016-01-19 22:00 GMT</strong>: I finished all the invites in less than 1 hour! That’s incredible :O Sorry for whoever remained out, I’ll let you know if I manage to get more invites!</p>\n</li>\n<li><p>UPDATE <strong>2016-01-19 23:00 GMT</strong>: Seems that I was very very lucky and I got some <strong>NEW INVITES</strong>, keep commenting to get them! ;)</p>\n</li>\n<li><p>UPDATE <strong>2016-01-23 09:00 GMT</strong>: Invites are over!</p>\n</li>\n<li><p>UPDATE <strong>2016-02-03 18:50 GMT</strong>: Yesterday GitKraken 0.6 was released as Public Beta and it’s free to be downloaded on the <a href=\"http://www.gitkraken.com/\" target=\"_blank\" rel=\"external\">official website</a>.</p>\n</li>\n</ul>\n<h2 id=\"What-is-GitKraken\"><a href=\"#What-is-GitKraken\" class=\"headerlink\" title=\"What is GitKraken\"></a>What is GitKraken</h2><p>As I said, GitKraken is a new <em>shiny</em> graphical interface for <a href=\"/tag/git\">git</a>. I am a big fan of git from command line and even if I used a number of different GUIs in the past I always switched back to the console.<br>By the way, GitKraken looks promising thanks to a set of interesting features. Let’s have a look at the ones that impressed me most after a first try.</p>\n<h3 id=\"Network-view\"><a href=\"#Network-view\" class=\"headerlink\" title=\"Network view\"></a>Network view</h3><p><a href=\"/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png\"><img src=\"/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png\" alt=\"GitKraken network view branching model graph\"></a></p>\n<p>This is probably the <strong>killer feature</strong> at the moment, a <em>nice-looking</em> graphical view of your git network that allows you to understand what is the current status of you repository in terms of commits and branches. Every dot in the graph represents a commit and it is interactive. When you select one of them you can see all the changes applied by that commit, who pushed it, the commit description and, most importantly, if you right click on it you can immediately perform a number of actions which are notoriously not so trivial from the command line: </p>\n<ul>\n<li>cherry-pick</li>\n<li>create a branch from the specific commit</li>\n<li>create a new tag pointing that commit</li>\n<li>reset master to that commit</li>\n<li>edit commit message</li>\n</ul>\n<h3 id=\"Integration-with-GitHub\"><a href=\"#Integration-with-GitHub\" class=\"headerlink\" title=\"Integration with GitHub\"></a>Integration with <a href=\"/tag/github\">GitHub</a></h3><p><a href=\"/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png\"><img src=\"/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png\" alt=\"GitKraken integration with GitHub\"></a></p>\n<p>GitKraken allows you to connect with your GitHub social account and easily access and clone from your remote repositories or fork an existing repository.</p>\n<p>This is a lovely feature that will save you some amount of time if you are an active open source contributor or if your organisation is using GitHub for business.</p>\n<p>The integration is currently limited to cloning, but I hope it will be improved to support also pull requests and issues (which would be definitely amazing!).</p>\n<p>Also it’s worth mentioning that the support for BitBucket seems to be coming soon!</p>\n<h3 id=\"Branching-and-Stashing\"><a href=\"#Branching-and-Stashing\" class=\"headerlink\" title=\"Branching and Stashing\"></a>Branching and Stashing</h3><p>There are a couple of other interesting operations that are made trivial by GitKraken…<br>I am talking about <strong>branching</strong> and <strong>stashing</strong>. By just clicking a button you will be able to create a new branch starting from the current head or from a specific commit and you can also <em>stash</em> your current <em>uncommitted</em> changes. When you stash something you will see a dot in your network graph that represents the stashed data as if it was a commit and you will be able to <em>unstash</em> that changes at any time later in the future.<br>Personally I believe these features can simplify the adoption of a Git branching model as <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"external\">GitFlow</a> within your team.</p>\n<h3 id=\"Built-with-Electron-and-NodeJs\"><a href=\"#Built-with-Electron-and-NodeJs\" class=\"headerlink\" title=\"Built with Electron and NodeJs\"></a>Built with <a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron</a> and <a href=\"/tag/node-js\">NodeJs</a></h3><p>While this is not a big differentiator at the moment (apart from making it immediately cross platform), I am quite sure that this feature will allow GitKraken to offer a nice extensibility layer offering people a way to write their own plugins/integrations.<br>Just look at recent softwares like <a href=\"https://github.com/nylas/N1\" target=\"_blank\" rel=\"external\">nylan/N1</a> and <a href=\"/3-invitations-to-try-atom-io/\">Atom</a> to understand what is possible with this technology and why developers are loving these products.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I think it’s still to early to form a strong opinion about this product, but the premises are excellent and I would say we can expect great things for the first public release. I hope Axosoft will decide to keep it free as Atlassian is doing with SourceTree and that this choice might be another incentive to allow people to adopt or get even more familiar with Git.</p>\n<p>I am curious to know your opinion about it and if you prefer to use a GUI rather than the command line, so please leave a comment.</p>\n<p>Also remember to <del>leave a comment down below this post if you need an invitation to try it</del> (invites over)!</p>\n<p>Until next time :)</p>\n","excerpt":"","more":"<p>Axosoft is currently working on <a href=\"http://www.gitkraken.com/\">GitKraken</a> an innovative multi-platform graphical client for <a href=\"/tag/git\">git</a> which is already available for Windows, Linux and Mac OSX in <strong>private beta</strong> version.</p>\n<p>The private beta is accessible through an invite code.<br>I was lucky to get an invite for me and <strong><del>I have</del> some extra invites that I am willing to share with the first people who is going to leave a comment on this post</strong>.</p>\n<ul>\n<li><p>UPDATE <strong>2016-01-19 22:00 GMT</strong>: I finished all the invites in less than 1 hour! That’s incredible :O Sorry for whoever remained out, I’ll let you know if I manage to get more invites!</p>\n</li>\n<li><p>UPDATE <strong>2016-01-19 23:00 GMT</strong>: Seems that I was very very lucky and I got some <strong>NEW INVITES</strong>, keep commenting to get them! ;)</p>\n</li>\n<li><p>UPDATE <strong>2016-01-23 09:00 GMT</strong>: Invites are over!</p>\n</li>\n<li><p>UPDATE <strong>2016-02-03 18:50 GMT</strong>: Yesterday GitKraken 0.6 was released as Public Beta and it’s free to be downloaded on the <a href=\"http://www.gitkraken.com/\">official website</a>.</p>\n</li>\n</ul>\n<h2 id=\"What-is-GitKraken\"><a href=\"#What-is-GitKraken\" class=\"headerlink\" title=\"What is GitKraken\"></a>What is GitKraken</h2><p>As I said, GitKraken is a new <em>shiny</em> graphical interface for <a href=\"/tag/git\">git</a>. I am a big fan of git from command line and even if I used a number of different GUIs in the past I always switched back to the console.<br>By the way, GitKraken looks promising thanks to a set of interesting features. Let’s have a look at the ones that impressed me most after a first try.</p>\n<h3 id=\"Network-view\"><a href=\"#Network-view\" class=\"headerlink\" title=\"Network view\"></a>Network view</h3><p><a href=\"/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-big.png\"><img src=\"/content/images/2016/01/gitkraken-network-view-loige-co-luciano-mammino-small-1.png\" alt=\"GitKraken network view branching model graph\"></a></p>\n<p>This is probably the <strong>killer feature</strong> at the moment, a <em>nice-looking</em> graphical view of your git network that allows you to understand what is the current status of you repository in terms of commits and branches. Every dot in the graph represents a commit and it is interactive. When you select one of them you can see all the changes applied by that commit, who pushed it, the commit description and, most importantly, if you right click on it you can immediately perform a number of actions which are notoriously not so trivial from the command line: </p>\n<ul>\n<li>cherry-pick</li>\n<li>create a branch from the specific commit</li>\n<li>create a new tag pointing that commit</li>\n<li>reset master to that commit</li>\n<li>edit commit message</li>\n</ul>\n<h3 id=\"Integration-with-GitHub\"><a href=\"#Integration-with-GitHub\" class=\"headerlink\" title=\"Integration with GitHub\"></a>Integration with <a href=\"/tag/github\">GitHub</a></h3><p><a href=\"/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-big.png\"><img src=\"/content/images/2016/01/gitkraken-github-integration-loige-co-luciano-mammino-small.png\" alt=\"GitKraken integration with GitHub\"></a></p>\n<p>GitKraken allows you to connect with your GitHub social account and easily access and clone from your remote repositories or fork an existing repository.</p>\n<p>This is a lovely feature that will save you some amount of time if you are an active open source contributor or if your organisation is using GitHub for business.</p>\n<p>The integration is currently limited to cloning, but I hope it will be improved to support also pull requests and issues (which would be definitely amazing!).</p>\n<p>Also it’s worth mentioning that the support for BitBucket seems to be coming soon!</p>\n<h3 id=\"Branching-and-Stashing\"><a href=\"#Branching-and-Stashing\" class=\"headerlink\" title=\"Branching and Stashing\"></a>Branching and Stashing</h3><p>There are a couple of other interesting operations that are made trivial by GitKraken…<br>I am talking about <strong>branching</strong> and <strong>stashing</strong>. By just clicking a button you will be able to create a new branch starting from the current head or from a specific commit and you can also <em>stash</em> your current <em>uncommitted</em> changes. When you stash something you will see a dot in your network graph that represents the stashed data as if it was a commit and you will be able to <em>unstash</em> that changes at any time later in the future.<br>Personally I believe these features can simplify the adoption of a Git branching model as <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">GitFlow</a> within your team.</p>\n<h3 id=\"Built-with-Electron-and-NodeJs\"><a href=\"#Built-with-Electron-and-NodeJs\" class=\"headerlink\" title=\"Built with Electron and NodeJs\"></a>Built with <a href=\"http://electron.atom.io/\">Electron</a> and <a href=\"/tag/node-js\">NodeJs</a></h3><p>While this is not a big differentiator at the moment (apart from making it immediately cross platform), I am quite sure that this feature will allow GitKraken to offer a nice extensibility layer offering people a way to write their own plugins/integrations.<br>Just look at recent softwares like <a href=\"https://github.com/nylas/N1\">nylan/N1</a> and <a href=\"/3-invitations-to-try-atom-io/\">Atom</a> to understand what is possible with this technology and why developers are loving these products.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I think it’s still to early to form a strong opinion about this product, but the premises are excellent and I would say we can expect great things for the first public release. I hope Axosoft will decide to keep it free as Atlassian is doing with SourceTree and that this choice might be another incentive to allow people to adopt or get even more familiar with Git.</p>\n<p>I am curious to know your opinion about it and if you prefer to use a GUI rather than the command line, so please leave a comment.</p>\n<p>Also remember to <del>leave a comment down below this post if you need an invitation to try it</del> (invites over)!</p>\n<p>Until next time :)</p>\n"},{"uuid":"fcc6040c-c47f-4aba-a397-f3dbeee9125a","layout":"post","title":"Having fun with NodeJs, Slack and Chuck Norris","slug":"having-fun-with-nodejs-slack-and-chuck-norris","subtitle":null,"date":"2015-09-14T22:05:30.000Z","updated":"2015-09-14T22:05:30.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nI recently wrote a **Slack bot** in **NodeJs** in collaboration with one of my favourite web development websites: the amazing [Scotch.io](https://scotch.io).\n\nIt's a simple and funny experiment I have done in my free time to learn something new. It's nothing special but it will add a bit of fun inside your Slack organisation... *Who doesn't want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?* :)\n\nThe bot is available on Github ([lmammino/norrisbot](https://github.com/lmammino/norrisbot)) and on NPM ([norrisbot](https://www.npmjs.com/package/norrisbot)) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).\n\nIf you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:\n\n[Building a Slack Bot with Node.js and Chuck Norris Super Powers](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\n[![Building a Slack bot with NodeJs and Chuck Norris Super Powers](/content/images/2015/09/slacker.png)](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\nEnjoy it and feel free to leave your comments here or on the article.\n\nCheers!\n","source":"_posts/having-fun-with-nodejs-slack-and-chuck-norris.md","raw":"uuid:             fcc6040c-c47f-4aba-a397-f3dbeee9125a\nlayout:           post\ntitle:            'Having fun with NodeJs, Slack and Chuck Norris'\nslug:             having-fun-with-nodejs-slack-and-chuck-norris\nsubtitle:         null\ndate:             '2015-09-14T22:05:30.000Z'\nupdated:          '2015-09-14T22:05:30.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/09/having-fun-with-nodejs-slack-and-chuck-norris.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Node.js\n  - Slack\n  - Collaboration\n\n---\n\nI recently wrote a **Slack bot** in **NodeJs** in collaboration with one of my favourite web development websites: the amazing [Scotch.io](https://scotch.io).\n\nIt's a simple and funny experiment I have done in my free time to learn something new. It's nothing special but it will add a bit of fun inside your Slack organisation... *Who doesn't want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?* :)\n\nThe bot is available on Github ([lmammino/norrisbot](https://github.com/lmammino/norrisbot)) and on NPM ([norrisbot](https://www.npmjs.com/package/norrisbot)) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).\n\nIf you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:\n\n[Building a Slack Bot with Node.js and Chuck Norris Super Powers](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\n[![Building a Slack bot with NodeJs and Chuck Norris Super Powers](/content/images/2015/09/slacker.png)](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\nEnjoy it and feel free to leave your comments here or on the article.\n\nCheers!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryh000jsvvudwin2z4b","content":"<p>I recently wrote a <strong>Slack bot</strong> in <strong>NodeJs</strong> in collaboration with one of my favourite web development websites: the amazing <a href=\"https://scotch.io\" target=\"_blank\" rel=\"external\">Scotch.io</a>.</p>\n<p>It’s a simple and funny experiment I have done in my free time to learn something new. It’s nothing special but it will add a bit of fun inside your Slack organisation… <em>Who doesn’t want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?</em> :)</p>\n<p>The bot is available on Github (<a href=\"https://github.com/lmammino/norrisbot\" target=\"_blank\" rel=\"external\">lmammino/norrisbot</a>) and on NPM (<a href=\"https://www.npmjs.com/package/norrisbot\" target=\"_blank\" rel=\"external\">norrisbot</a>) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).</p>\n<p>If you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:</p>\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\" target=\"_blank\" rel=\"external\">Building a Slack Bot with Node.js and Chuck Norris Super Powers</a></p>\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2015/09/slacker.png\" alt=\"Building a Slack bot with NodeJs and Chuck Norris Super Powers\"></a></p>\n<p>Enjoy it and feel free to leave your comments here or on the article.</p>\n<p>Cheers!</p>\n","excerpt":"","more":"<p>I recently wrote a <strong>Slack bot</strong> in <strong>NodeJs</strong> in collaboration with one of my favourite web development websites: the amazing <a href=\"https://scotch.io\">Scotch.io</a>.</p>\n<p>It’s a simple and funny experiment I have done in my free time to learn something new. It’s nothing special but it will add a bit of fun inside your Slack organisation… <em>Who doesn’t want to have a bot that tells random jokes about Chuck Norris in his own Company chat room?</em> :)</p>\n<p>The bot is available on Github (<a href=\"https://github.com/lmammino/norrisbot\">lmammino/norrisbot</a>) and on NPM (<a href=\"https://www.npmjs.com/package/norrisbot\">norrisbot</a>) and it can be easily installed configured and installed on every VPS and even on Heroku (using the free plan!).</p>\n<p>If you are interested in knowing how it works, in understanding the code and in learning how to deploy it on Heroku, you should definitely read the article we published on Scotch.io:</p>\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\">Building a Slack Bot with Node.js and Chuck Norris Super Powers</a></p>\n<p><a href=\"https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers\"><img src=\"/content/images/2015/09/slacker.png\" alt=\"Building a Slack bot with NodeJs and Chuck Norris Super Powers\"></a></p>\n<p>Enjoy it and feel free to leave your comments here or on the article.</p>\n<p>Cheers!</p>\n"},{"uuid":"a8cff422-53e9-4937-94b4-fef1b83b8c84","layout":"post","title":"Gulp and FTP: update a website \"on the fly\"","slug":"gulp-and-ftp-update-a-website-on-the-fly","subtitle":null,"date":"2015-10-25T18:47:00.000Z","updated":"2016-12-13T21:24:35.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly-1.png","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn this post I will explain you how to use [Gulp](http://gulpjs.com/) to interact with the files on your server through FTP. You will learn how to watch the files you are editing on your local machine and automatically synchronize them with your server as they change and how to setup a task to launch an FTP deploy on demand.\n\n\n## Premise\n\nFew days ago I was assigned to take care of updating few sections on **a legacy website which development environment is currently accessible only through FTP**. So no local virtualized development environment, no Git, no automated deploy, only old-school \"FTP live edit and test\"!\n\nI would have used an FTP desktop app to create a virtual drive to allow me to edit files easily and open the full project in Sublime, but I couldn't find any good one for the last version of OS X (El Capitan), so I decided to work out a simple solution by myself using Gulp.\n\nIf you ever had a similar situation or if you just want to have a simple and fast command line solution to edit a website you can access to only through FTP, keep reading, this post is for you!\n\n**NOTE**: I just want to stress on the fact that this solution must not be considered a best practice for development and deploy, but only a useful trick in case you have to deal with a very basic setup, especially if you are not in control of the development and deployment environments.\n\n\n## Installing Gulp\n\nIn case you don't know it, Gulp is a very popular build system written in NodeJs. It uses streams, so it's quite efficient in dealing with data transformations and in managing streams of data from different sources.\n\n![Gulp is a very popular stream-based build system written in NodeJs](/content/images/2015/10/gulp-is-the-streaming-web-build-system.png)\n\nTo be able to run the script we are going to write you need to have NodeJs and Gulp installed in your machine. If you don't have Gulp already you can easily install it with NPM:\n\n```bash\nnpm install -g gulp\n```\n\n\n## Preparing the project\n\nYou will need to have a copy of the full project on your local machine, so if you don't have it already you need to login to your server and download a copy of the source files. You can use any FTP software to do so, but if you are on a Mac there's a quick trick that allows you to avoid to install any additional software: you can simply open finder and press `⌘` + `k` to start the **connect to server** window and specify the FTP url of your project with the following syntax: `ftp://username:password@host:port/path`. This will allow you to see and copy all the files from your project and, in case you are wondering, this is a read-only access!\n\nOnce you copied all the files you have to initialize NPM on the copied project with:\n\n```bash\nnpm init\n```\n\nFollow the on screen instructions and provide all the missing informations.\n\nThen you need to install Gulp also as a local dependency:\n\n```bash\nnpm install --save-dev gulp\n```\n\nAlso we are going to use a couple of external libraries, so let's install them as well:\n\n```bash\nnpm install --save-dev gulp-util vinyl-ftp\n```\n\n[gulp-util](https://www.npmjs.com/package/gulp-util) is a module that offers a series of utilities functions for gulp (we will mainly use the log related functions) and [vinyl-ftp](https://www.npmjs.com/package/vinyl-ftp) is an FTP library that allows you to access FTP files and folders as streams and it's a perfect match for Gulp.\n\nOk, now the last step before moving to some code is to initialize a new gulp project. To do so just run:\n\n```bash\ngulp init\n```\n\nIt will create a new `gulpfile.js` file, let's finally jump to some code.\n\n\n## The gulpfile\n\nWe are going to implement two different Gulp commands: `ftp-deploy` and `ftp-deploy-watch`. The first one allows us to deploy all the local changes to the server, the second one instead activates a live watch that constantly monitors our files and uploads immediately any change to the files, very useful when you want to live-code against a development server.\n\nTo enable these two commands you need to copy paste the following code inside your `gulpfile.js` file.\n\n```javascript\n'use strict';\n\nvar gulp = require('gulp');\nvar gutil = require( 'gulp-util' );\nvar ftp = require( 'vinyl-ftp' );\n\n/** Configuration **/\nvar user = process.env.FTP_USER;\nvar password = process.env.FTP_PWD;\nvar host = 'your hostname or ip address';\nvar port = 21;\nvar localFilesGlob = ['./**/*'];\nvar remoteFolder = '/myApp'\n\n\n// helper function to build an FTP connection based on our configuration\nfunction getFtpConnection() {\n    return ftp.create({\n        host: host,\n        port: port,\n        user: user,\n        password: password,\n        parallel: 5,\n        log: gutil.log\n    });\n}\n\n/**\n * Deploy task.\n * Copies the new files to the server\n *\n * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy`\n */\ngulp.task('ftp-deploy', function() {\n\n    var conn = getFtpConnection();\n\n    return gulp.src(localFilesGlob, { base: '.', buffer: false })\n        .pipe( conn.newer( remoteFolder ) ) // only upload newer files \n        .pipe( conn.dest( remoteFolder ) )\n    ;\n});\n\n/**\n * Watch deploy task.\n * Watches the local copy for changes and copies the new files to the server whenever an update is detected\n *\n * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch`\n */\ngulp.task('ftp-deploy-watch', function() {\n\n    var conn = getFtpConnection();\n\n    gulp.watch(localFilesGlob)\n    .on('change', function(event) {\n      console.log('Changes detected! Uploading file \"' + event.path + '\", ' + event.type);\n\n      return gulp.src( [event.path], { base: '.', buffer: false } )\n        .pipe( conn.newer( remoteFolder ) ) // only upload newer files \n        .pipe( conn.dest( remoteFolder ) )\n      ;\n    });\n});\n```\n\nThe Gulp script is very simple and pretty self-descriptive, but let's try to have a look at it in greater detail.\n\nAfter importing our modules, we have a series of configuration variables. The ones you have to set are `host`, `port`, `localFilesGlob` and `remoteFolder`.\n\n  - `host` is the hostname or the IP address of your FTP server (e.g. `myserver.com` or `123.124.125.126`)\n  - `port` is the port where your FTP server is listening (generally it's the default: `21`)\n  - `localFilesGlob` is an array containing one or more [glob](https://www.npmjs.com/package/glob) expressions. These expressions are used to determine which files from your local copy should be watched and deployed into the server. The default option is very \"open\", it will copy all the files in your project folder. Most of the time it's better to be more specific so, be sure to build your own custom array of glob to avoid copying unnecessary or sensible data.\n  - `remoteFolder` is the folder in your remote server that contains the whole project (where the new files will be copied).\n\nAs you probably noticed we also have the `username` and `password` variables mapped to an environment variable. Is generally a good idea to not write passwords in configuration files, especially if you are going to publish this file somewhere. With this approach we can also share the same gulpfile with other people in the team and allow everyone to use their personal credentials.\n\nAfter the configuration variables block we have the `getFtpConnection` function. This function is used as an helper to build an FTP connection using the previously specified options. You can also add some [additional options](https://www.npmjs.com/package/vinyl-ftp#ftp-create-config), for instance `parallel` allows you to define the maximum number of files to upload in parallel.\n\nAt the end we have our two real Gulp commands: `ftp-deploy` and `ftp-deploy-watch`.\n\nThey simply defines a stream starting from the glob expressions and pipe it to the destination server through the FTP connection. The only difference between the two commands is that in the `ftp-deploy` we read all the files from the glob expressions and send them through the connection, in the second case we watch the files and send only the one that changes while command is running.\n\nIt's also worth noticing that we are piping the files through the function `conn.newer`. This function ensures that only the files that are different from the server gets overwritten.\n\n\n## Running the commands\n\nTo run the commands you must first specify the `FTP_USER` and `FTP_PWD` environment variables. For example you can do it this way:\n\n```bash\nFTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy\n```\n\nor \n\n```bash\nFTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch\n```\n\nOr if you prefer you can export the variables in your `.bashrc` or `.bash_profile` files (in this case I suggest you to rename the variables into something more specific to avoid collisions).\n\n\n## Conclusions\n\nThis approach allowed me to solve the problem easily and quickly having a mechanism that is quite fast to use and easy to maintain.\n\nI am also more and more impressed about how easy is to have simple but effective solutions up and running with NodeJs and the tools in its ecosystem. I am also impressed by the versatility of Gulp and how its stream-based approach makes things very concise and uniform.\n\nI hope this article was useful and interesting for you.\nI'd really love to receive **your opinions in the comments box** about it and, in case you are a veteran Gulp user, I'm curious to know **what was the most interesting command you have ever written using Gulp**.\n\nUntil next time!\n\nRegards\n","source":"_posts/gulp-and-ftp-update-a-website-on-the-fly.md","raw":"uuid:             a8cff422-53e9-4937-94b4-fef1b83b8c84\nlayout:           post\ntitle:            'Gulp and FTP: update a website \"on the fly\"'\nslug:             gulp-and-ftp-update-a-website-on-the-fly\nsubtitle:         null\ndate:             '2015-10-25T18:47:00.000Z'\nupdated:          '2016-12-13T21:24:35.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/10/gulp-and-ftp-update-a-website-on-the-fly-1.png\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Gulp\n  - JavaScript\n  - FTP\n  - Server\n\n---\n\nIn this post I will explain you how to use [Gulp](http://gulpjs.com/) to interact with the files on your server through FTP. You will learn how to watch the files you are editing on your local machine and automatically synchronize them with your server as they change and how to setup a task to launch an FTP deploy on demand.\n\n\n## Premise\n\nFew days ago I was assigned to take care of updating few sections on **a legacy website which development environment is currently accessible only through FTP**. So no local virtualized development environment, no Git, no automated deploy, only old-school \"FTP live edit and test\"!\n\nI would have used an FTP desktop app to create a virtual drive to allow me to edit files easily and open the full project in Sublime, but I couldn't find any good one for the last version of OS X (El Capitan), so I decided to work out a simple solution by myself using Gulp.\n\nIf you ever had a similar situation or if you just want to have a simple and fast command line solution to edit a website you can access to only through FTP, keep reading, this post is for you!\n\n**NOTE**: I just want to stress on the fact that this solution must not be considered a best practice for development and deploy, but only a useful trick in case you have to deal with a very basic setup, especially if you are not in control of the development and deployment environments.\n\n\n## Installing Gulp\n\nIn case you don't know it, Gulp is a very popular build system written in NodeJs. It uses streams, so it's quite efficient in dealing with data transformations and in managing streams of data from different sources.\n\n![Gulp is a very popular stream-based build system written in NodeJs](/content/images/2015/10/gulp-is-the-streaming-web-build-system.png)\n\nTo be able to run the script we are going to write you need to have NodeJs and Gulp installed in your machine. If you don't have Gulp already you can easily install it with NPM:\n\n```bash\nnpm install -g gulp\n```\n\n\n## Preparing the project\n\nYou will need to have a copy of the full project on your local machine, so if you don't have it already you need to login to your server and download a copy of the source files. You can use any FTP software to do so, but if you are on a Mac there's a quick trick that allows you to avoid to install any additional software: you can simply open finder and press `⌘` + `k` to start the **connect to server** window and specify the FTP url of your project with the following syntax: `ftp://username:password@host:port/path`. This will allow you to see and copy all the files from your project and, in case you are wondering, this is a read-only access!\n\nOnce you copied all the files you have to initialize NPM on the copied project with:\n\n```bash\nnpm init\n```\n\nFollow the on screen instructions and provide all the missing informations.\n\nThen you need to install Gulp also as a local dependency:\n\n```bash\nnpm install --save-dev gulp\n```\n\nAlso we are going to use a couple of external libraries, so let's install them as well:\n\n```bash\nnpm install --save-dev gulp-util vinyl-ftp\n```\n\n[gulp-util](https://www.npmjs.com/package/gulp-util) is a module that offers a series of utilities functions for gulp (we will mainly use the log related functions) and [vinyl-ftp](https://www.npmjs.com/package/vinyl-ftp) is an FTP library that allows you to access FTP files and folders as streams and it's a perfect match for Gulp.\n\nOk, now the last step before moving to some code is to initialize a new gulp project. To do so just run:\n\n```bash\ngulp init\n```\n\nIt will create a new `gulpfile.js` file, let's finally jump to some code.\n\n\n## The gulpfile\n\nWe are going to implement two different Gulp commands: `ftp-deploy` and `ftp-deploy-watch`. The first one allows us to deploy all the local changes to the server, the second one instead activates a live watch that constantly monitors our files and uploads immediately any change to the files, very useful when you want to live-code against a development server.\n\nTo enable these two commands you need to copy paste the following code inside your `gulpfile.js` file.\n\n```javascript\n'use strict';\n\nvar gulp = require('gulp');\nvar gutil = require( 'gulp-util' );\nvar ftp = require( 'vinyl-ftp' );\n\n/** Configuration **/\nvar user = process.env.FTP_USER;\nvar password = process.env.FTP_PWD;\nvar host = 'your hostname or ip address';\nvar port = 21;\nvar localFilesGlob = ['./**/*'];\nvar remoteFolder = '/myApp'\n\n\n// helper function to build an FTP connection based on our configuration\nfunction getFtpConnection() {\n    return ftp.create({\n        host: host,\n        port: port,\n        user: user,\n        password: password,\n        parallel: 5,\n        log: gutil.log\n    });\n}\n\n/**\n * Deploy task.\n * Copies the new files to the server\n *\n * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy`\n */\ngulp.task('ftp-deploy', function() {\n\n    var conn = getFtpConnection();\n\n    return gulp.src(localFilesGlob, { base: '.', buffer: false })\n        .pipe( conn.newer( remoteFolder ) ) // only upload newer files \n        .pipe( conn.dest( remoteFolder ) )\n    ;\n});\n\n/**\n * Watch deploy task.\n * Watches the local copy for changes and copies the new files to the server whenever an update is detected\n *\n * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch`\n */\ngulp.task('ftp-deploy-watch', function() {\n\n    var conn = getFtpConnection();\n\n    gulp.watch(localFilesGlob)\n    .on('change', function(event) {\n      console.log('Changes detected! Uploading file \"' + event.path + '\", ' + event.type);\n\n      return gulp.src( [event.path], { base: '.', buffer: false } )\n        .pipe( conn.newer( remoteFolder ) ) // only upload newer files \n        .pipe( conn.dest( remoteFolder ) )\n      ;\n    });\n});\n```\n\nThe Gulp script is very simple and pretty self-descriptive, but let's try to have a look at it in greater detail.\n\nAfter importing our modules, we have a series of configuration variables. The ones you have to set are `host`, `port`, `localFilesGlob` and `remoteFolder`.\n\n  - `host` is the hostname or the IP address of your FTP server (e.g. `myserver.com` or `123.124.125.126`)\n  - `port` is the port where your FTP server is listening (generally it's the default: `21`)\n  - `localFilesGlob` is an array containing one or more [glob](https://www.npmjs.com/package/glob) expressions. These expressions are used to determine which files from your local copy should be watched and deployed into the server. The default option is very \"open\", it will copy all the files in your project folder. Most of the time it's better to be more specific so, be sure to build your own custom array of glob to avoid copying unnecessary or sensible data.\n  - `remoteFolder` is the folder in your remote server that contains the whole project (where the new files will be copied).\n\nAs you probably noticed we also have the `username` and `password` variables mapped to an environment variable. Is generally a good idea to not write passwords in configuration files, especially if you are going to publish this file somewhere. With this approach we can also share the same gulpfile with other people in the team and allow everyone to use their personal credentials.\n\nAfter the configuration variables block we have the `getFtpConnection` function. This function is used as an helper to build an FTP connection using the previously specified options. You can also add some [additional options](https://www.npmjs.com/package/vinyl-ftp#ftp-create-config), for instance `parallel` allows you to define the maximum number of files to upload in parallel.\n\nAt the end we have our two real Gulp commands: `ftp-deploy` and `ftp-deploy-watch`.\n\nThey simply defines a stream starting from the glob expressions and pipe it to the destination server through the FTP connection. The only difference between the two commands is that in the `ftp-deploy` we read all the files from the glob expressions and send them through the connection, in the second case we watch the files and send only the one that changes while command is running.\n\nIt's also worth noticing that we are piping the files through the function `conn.newer`. This function ensures that only the files that are different from the server gets overwritten.\n\n\n## Running the commands\n\nTo run the commands you must first specify the `FTP_USER` and `FTP_PWD` environment variables. For example you can do it this way:\n\n```bash\nFTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy\n```\n\nor \n\n```bash\nFTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch\n```\n\nOr if you prefer you can export the variables in your `.bashrc` or `.bash_profile` files (in this case I suggest you to rename the variables into something more specific to avoid collisions).\n\n\n## Conclusions\n\nThis approach allowed me to solve the problem easily and quickly having a mechanism that is quite fast to use and easy to maintain.\n\nI am also more and more impressed about how easy is to have simple but effective solutions up and running with NodeJs and the tools in its ecosystem. I am also impressed by the versatility of Gulp and how its stream-based approach makes things very concise and uniform.\n\nI hope this article was useful and interesting for you.\nI'd really love to receive **your opinions in the comments box** about it and, in case you are a veteran Gulp user, I'm curious to know **what was the most interesting command you have ever written using Gulp**.\n\nUntil next time!\n\nRegards\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryi000ksvvu7wunldg5","content":"<p>In this post I will explain you how to use <a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"external\">Gulp</a> to interact with the files on your server through FTP. You will learn how to watch the files you are editing on your local machine and automatically synchronize them with your server as they change and how to setup a task to launch an FTP deploy on demand.</p>\n<h2 id=\"Premise\"><a href=\"#Premise\" class=\"headerlink\" title=\"Premise\"></a>Premise</h2><p>Few days ago I was assigned to take care of updating few sections on <strong>a legacy website which development environment is currently accessible only through FTP</strong>. So no local virtualized development environment, no Git, no automated deploy, only old-school “FTP live edit and test”!</p>\n<p>I would have used an FTP desktop app to create a virtual drive to allow me to edit files easily and open the full project in Sublime, but I couldn’t find any good one for the last version of OS X (El Capitan), so I decided to work out a simple solution by myself using Gulp.</p>\n<p>If you ever had a similar situation or if you just want to have a simple and fast command line solution to edit a website you can access to only through FTP, keep reading, this post is for you!</p>\n<p><strong>NOTE</strong>: I just want to stress on the fact that this solution must not be considered a best practice for development and deploy, but only a useful trick in case you have to deal with a very basic setup, especially if you are not in control of the development and deployment environments.</p>\n<h2 id=\"Installing-Gulp\"><a href=\"#Installing-Gulp\" class=\"headerlink\" title=\"Installing Gulp\"></a>Installing Gulp</h2><p>In case you don’t know it, Gulp is a very popular build system written in NodeJs. It uses streams, so it’s quite efficient in dealing with data transformations and in managing streams of data from different sources.</p>\n<p><img src=\"/content/images/2015/10/gulp-is-the-streaming-web-build-system.png\" alt=\"Gulp is a very popular stream-based build system written in NodeJs\"></p>\n<p>To be able to run the script we are going to write you need to have NodeJs and Gulp installed in your machine. If you don’t have Gulp already you can easily install it with NPM:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure>\n<h2 id=\"Preparing-the-project\"><a href=\"#Preparing-the-project\" class=\"headerlink\" title=\"Preparing the project\"></a>Preparing the project</h2><p>You will need to have a copy of the full project on your local machine, so if you don’t have it already you need to login to your server and download a copy of the source files. You can use any FTP software to do so, but if you are on a Mac there’s a quick trick that allows you to avoid to install any additional software: you can simply open finder and press <code>⌘</code> + <code>k</code> to start the <strong>connect to server</strong> window and specify the FTP url of your project with the following syntax: <code>ftp://username:password@host:port/path</code>. This will allow you to see and copy all the files from your project and, in case you are wondering, this is a read-only access!</p>\n<p>Once you copied all the files you have to initialize NPM on the copied project with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>Follow the on screen instructions and provide all the missing informations.</p>\n<p>Then you need to install Gulp also as a local dependency:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure>\n<p>Also we are going to use a couple of external libraries, so let’s install them as well:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp-util vinyl-ftp</div></pre></td></tr></table></figure>\n<p><a href=\"https://www.npmjs.com/package/gulp-util\" target=\"_blank\" rel=\"external\">gulp-util</a> is a module that offers a series of utilities functions for gulp (we will mainly use the log related functions) and <a href=\"https://www.npmjs.com/package/vinyl-ftp\" target=\"_blank\" rel=\"external\">vinyl-ftp</a> is an FTP library that allows you to access FTP files and folders as streams and it’s a perfect match for Gulp.</p>\n<p>Ok, now the last step before moving to some code is to initialize a new gulp project. To do so just run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp init</div></pre></td></tr></table></figure>\n<p>It will create a new <code>gulpfile.js</code> file, let’s finally jump to some code.</p>\n<h2 id=\"The-gulpfile\"><a href=\"#The-gulpfile\" class=\"headerlink\" title=\"The gulpfile\"></a>The gulpfile</h2><p>We are going to implement two different Gulp commands: <code>ftp-deploy</code> and <code>ftp-deploy-watch</code>. The first one allows us to deploy all the local changes to the server, the second one instead activates a live watch that constantly monitors our files and uploads immediately any change to the files, very useful when you want to live-code against a development server.</p>\n<p>To enable these two commands you need to copy paste the following code inside your <code>gulpfile.js</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>( <span class=\"string\">'gulp-util'</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> ftp = <span class=\"built_in\">require</span>( <span class=\"string\">'vinyl-ftp'</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Configuration **/</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = process.env.FTP_USER;</div><div class=\"line\"><span class=\"keyword\">var</span> password = process.env.FTP_PWD;</div><div class=\"line\"><span class=\"keyword\">var</span> host = <span class=\"string\">'your hostname or ip address'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> localFilesGlob = [<span class=\"string\">'./**/*'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> remoteFolder = <span class=\"string\">'/myApp'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// helper function to build an FTP connection based on our configuration</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFtpConnection</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ftp.create(&#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: host,</div><div class=\"line\">        <span class=\"attr\">port</span>: port,</div><div class=\"line\">        <span class=\"attr\">user</span>: user,</div><div class=\"line\">        <span class=\"attr\">password</span>: password,</div><div class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">5</span>,</div><div class=\"line\">        <span class=\"attr\">log</span>: gutil.log</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Deploy task.</div><div class=\"line\"> * Copies the new files to the server</div><div class=\"line\"> *</div><div class=\"line\"> * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy`</div><div class=\"line\"> */</div><div class=\"line\">gulp.task(<span class=\"string\">'ftp-deploy'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> conn = getFtpConnection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(localFilesGlob, &#123; <span class=\"attr\">base</span>: <span class=\"string\">'.'</span>, <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">        .pipe( conn.newer( remoteFolder ) ) <span class=\"comment\">// only upload newer files </span></div><div class=\"line\">        .pipe( conn.dest( remoteFolder ) )</div><div class=\"line\">    ;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Watch deploy task.</div><div class=\"line\"> * Watches the local copy for changes and copies the new files to the server whenever an update is detected</div><div class=\"line\"> *</div><div class=\"line\"> * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch`</div><div class=\"line\"> */</div><div class=\"line\">gulp.task(<span class=\"string\">'ftp-deploy-watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> conn = getFtpConnection();</div><div class=\"line\"></div><div class=\"line\">    gulp.watch(localFilesGlob)</div><div class=\"line\">    .on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Changes detected! Uploading file \"'</span> + event.path + <span class=\"string\">'\", '</span> + event.type);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> gulp.src( [event.path], &#123; <span class=\"attr\">base</span>: <span class=\"string\">'.'</span>, <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</div><div class=\"line\">        .pipe( conn.newer( remoteFolder ) ) <span class=\"comment\">// only upload newer files </span></div><div class=\"line\">        .pipe( conn.dest( remoteFolder ) )</div><div class=\"line\">      ;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The Gulp script is very simple and pretty self-descriptive, but let’s try to have a look at it in greater detail.</p>\n<p>After importing our modules, we have a series of configuration variables. The ones you have to set are <code>host</code>, <code>port</code>, <code>localFilesGlob</code> and <code>remoteFolder</code>.</p>\n<ul>\n<li><code>host</code> is the hostname or the IP address of your FTP server (e.g. <code>myserver.com</code> or <code>123.124.125.126</code>)</li>\n<li><code>port</code> is the port where your FTP server is listening (generally it’s the default: <code>21</code>)</li>\n<li><code>localFilesGlob</code> is an array containing one or more <a href=\"https://www.npmjs.com/package/glob\" target=\"_blank\" rel=\"external\">glob</a> expressions. These expressions are used to determine which files from your local copy should be watched and deployed into the server. The default option is very “open”, it will copy all the files in your project folder. Most of the time it’s better to be more specific so, be sure to build your own custom array of glob to avoid copying unnecessary or sensible data.</li>\n<li><code>remoteFolder</code> is the folder in your remote server that contains the whole project (where the new files will be copied).</li>\n</ul>\n<p>As you probably noticed we also have the <code>username</code> and <code>password</code> variables mapped to an environment variable. Is generally a good idea to not write passwords in configuration files, especially if you are going to publish this file somewhere. With this approach we can also share the same gulpfile with other people in the team and allow everyone to use their personal credentials.</p>\n<p>After the configuration variables block we have the <code>getFtpConnection</code> function. This function is used as an helper to build an FTP connection using the previously specified options. You can also add some <a href=\"https://www.npmjs.com/package/vinyl-ftp#ftp-create-config\" target=\"_blank\" rel=\"external\">additional options</a>, for instance <code>parallel</code> allows you to define the maximum number of files to upload in parallel.</p>\n<p>At the end we have our two real Gulp commands: <code>ftp-deploy</code> and <code>ftp-deploy-watch</code>.</p>\n<p>They simply defines a stream starting from the glob expressions and pipe it to the destination server through the FTP connection. The only difference between the two commands is that in the <code>ftp-deploy</code> we read all the files from the glob expressions and send them through the connection, in the second case we watch the files and send only the one that changes while command is running.</p>\n<p>It’s also worth noticing that we are piping the files through the function <code>conn.newer</code>. This function ensures that only the files that are different from the server gets overwritten.</p>\n<h2 id=\"Running-the-commands\"><a href=\"#Running-the-commands\" class=\"headerlink\" title=\"Running the commands\"></a>Running the commands</h2><p>To run the commands you must first specify the <code>FTP_USER</code> and <code>FTP_PWD</code> environment variables. For example you can do it this way:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy</div></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch</div></pre></td></tr></table></figure>\n<p>Or if you prefer you can export the variables in your <code>.bashrc</code> or <code>.bash_profile</code> files (in this case I suggest you to rename the variables into something more specific to avoid collisions).</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>This approach allowed me to solve the problem easily and quickly having a mechanism that is quite fast to use and easy to maintain.</p>\n<p>I am also more and more impressed about how easy is to have simple but effective solutions up and running with NodeJs and the tools in its ecosystem. I am also impressed by the versatility of Gulp and how its stream-based approach makes things very concise and uniform.</p>\n<p>I hope this article was useful and interesting for you.<br>I’d really love to receive <strong>your opinions in the comments box</strong> about it and, in case you are a veteran Gulp user, I’m curious to know <strong>what was the most interesting command you have ever written using Gulp</strong>.</p>\n<p>Until next time!</p>\n<p>Regards</p>\n","excerpt":"","more":"<p>In this post I will explain you how to use <a href=\"http://gulpjs.com/\">Gulp</a> to interact with the files on your server through FTP. You will learn how to watch the files you are editing on your local machine and automatically synchronize them with your server as they change and how to setup a task to launch an FTP deploy on demand.</p>\n<h2 id=\"Premise\"><a href=\"#Premise\" class=\"headerlink\" title=\"Premise\"></a>Premise</h2><p>Few days ago I was assigned to take care of updating few sections on <strong>a legacy website which development environment is currently accessible only through FTP</strong>. So no local virtualized development environment, no Git, no automated deploy, only old-school “FTP live edit and test”!</p>\n<p>I would have used an FTP desktop app to create a virtual drive to allow me to edit files easily and open the full project in Sublime, but I couldn’t find any good one for the last version of OS X (El Capitan), so I decided to work out a simple solution by myself using Gulp.</p>\n<p>If you ever had a similar situation or if you just want to have a simple and fast command line solution to edit a website you can access to only through FTP, keep reading, this post is for you!</p>\n<p><strong>NOTE</strong>: I just want to stress on the fact that this solution must not be considered a best practice for development and deploy, but only a useful trick in case you have to deal with a very basic setup, especially if you are not in control of the development and deployment environments.</p>\n<h2 id=\"Installing-Gulp\"><a href=\"#Installing-Gulp\" class=\"headerlink\" title=\"Installing Gulp\"></a>Installing Gulp</h2><p>In case you don’t know it, Gulp is a very popular build system written in NodeJs. It uses streams, so it’s quite efficient in dealing with data transformations and in managing streams of data from different sources.</p>\n<p><img src=\"/content/images/2015/10/gulp-is-the-streaming-web-build-system.png\" alt=\"Gulp is a very popular stream-based build system written in NodeJs\"></p>\n<p>To be able to run the script we are going to write you need to have NodeJs and Gulp installed in your machine. If you don’t have Gulp already you can easily install it with NPM:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure>\n<h2 id=\"Preparing-the-project\"><a href=\"#Preparing-the-project\" class=\"headerlink\" title=\"Preparing the project\"></a>Preparing the project</h2><p>You will need to have a copy of the full project on your local machine, so if you don’t have it already you need to login to your server and download a copy of the source files. You can use any FTP software to do so, but if you are on a Mac there’s a quick trick that allows you to avoid to install any additional software: you can simply open finder and press <code>⌘</code> + <code>k</code> to start the <strong>connect to server</strong> window and specify the FTP url of your project with the following syntax: <code>ftp://username:password@host:port/path</code>. This will allow you to see and copy all the files from your project and, in case you are wondering, this is a read-only access!</p>\n<p>Once you copied all the files you have to initialize NPM on the copied project with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>Follow the on screen instructions and provide all the missing informations.</p>\n<p>Then you need to install Gulp also as a local dependency:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure>\n<p>Also we are going to use a couple of external libraries, so let’s install them as well:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp-util vinyl-ftp</div></pre></td></tr></table></figure>\n<p><a href=\"https://www.npmjs.com/package/gulp-util\">gulp-util</a> is a module that offers a series of utilities functions for gulp (we will mainly use the log related functions) and <a href=\"https://www.npmjs.com/package/vinyl-ftp\">vinyl-ftp</a> is an FTP library that allows you to access FTP files and folders as streams and it’s a perfect match for Gulp.</p>\n<p>Ok, now the last step before moving to some code is to initialize a new gulp project. To do so just run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp init</div></pre></td></tr></table></figure>\n<p>It will create a new <code>gulpfile.js</code> file, let’s finally jump to some code.</p>\n<h2 id=\"The-gulpfile\"><a href=\"#The-gulpfile\" class=\"headerlink\" title=\"The gulpfile\"></a>The gulpfile</h2><p>We are going to implement two different Gulp commands: <code>ftp-deploy</code> and <code>ftp-deploy-watch</code>. The first one allows us to deploy all the local changes to the server, the second one instead activates a live watch that constantly monitors our files and uploads immediately any change to the files, very useful when you want to live-code against a development server.</p>\n<p>To enable these two commands you need to copy paste the following code inside your <code>gulpfile.js</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>( <span class=\"string\">'gulp-util'</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> ftp = <span class=\"built_in\">require</span>( <span class=\"string\">'vinyl-ftp'</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Configuration **/</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = process.env.FTP_USER;</div><div class=\"line\"><span class=\"keyword\">var</span> password = process.env.FTP_PWD;</div><div class=\"line\"><span class=\"keyword\">var</span> host = <span class=\"string\">'your hostname or ip address'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> localFilesGlob = [<span class=\"string\">'./**/*'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> remoteFolder = <span class=\"string\">'/myApp'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// helper function to build an FTP connection based on our configuration</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFtpConnection</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ftp.create(&#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: host,</div><div class=\"line\">        <span class=\"attr\">port</span>: port,</div><div class=\"line\">        <span class=\"attr\">user</span>: user,</div><div class=\"line\">        <span class=\"attr\">password</span>: password,</div><div class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">5</span>,</div><div class=\"line\">        <span class=\"attr\">log</span>: gutil.log</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Deploy task.</div><div class=\"line\"> * Copies the new files to the server</div><div class=\"line\"> *</div><div class=\"line\"> * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy`</div><div class=\"line\"> */</span></div><div class=\"line\">gulp.task(<span class=\"string\">'ftp-deploy'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> conn = getFtpConnection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(localFilesGlob, &#123; <span class=\"attr\">base</span>: <span class=\"string\">'.'</span>, <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">        .pipe( conn.newer( remoteFolder ) ) <span class=\"comment\">// only upload newer files </span></div><div class=\"line\">        .pipe( conn.dest( remoteFolder ) )</div><div class=\"line\">    ;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Watch deploy task.</div><div class=\"line\"> * Watches the local copy for changes and copies the new files to the server whenever an update is detected</div><div class=\"line\"> *</div><div class=\"line\"> * Usage: `FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch`</div><div class=\"line\"> */</span></div><div class=\"line\">gulp.task(<span class=\"string\">'ftp-deploy-watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> conn = getFtpConnection();</div><div class=\"line\"></div><div class=\"line\">    gulp.watch(localFilesGlob)</div><div class=\"line\">    .on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Changes detected! Uploading file \"'</span> + event.path + <span class=\"string\">'\", '</span> + event.type);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> gulp.src( [event.path], &#123; <span class=\"attr\">base</span>: <span class=\"string\">'.'</span>, <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</div><div class=\"line\">        .pipe( conn.newer( remoteFolder ) ) <span class=\"comment\">// only upload newer files </span></div><div class=\"line\">        .pipe( conn.dest( remoteFolder ) )</div><div class=\"line\">      ;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The Gulp script is very simple and pretty self-descriptive, but let’s try to have a look at it in greater detail.</p>\n<p>After importing our modules, we have a series of configuration variables. The ones you have to set are <code>host</code>, <code>port</code>, <code>localFilesGlob</code> and <code>remoteFolder</code>.</p>\n<ul>\n<li><code>host</code> is the hostname or the IP address of your FTP server (e.g. <code>myserver.com</code> or <code>123.124.125.126</code>)</li>\n<li><code>port</code> is the port where your FTP server is listening (generally it’s the default: <code>21</code>)</li>\n<li><code>localFilesGlob</code> is an array containing one or more <a href=\"https://www.npmjs.com/package/glob\">glob</a> expressions. These expressions are used to determine which files from your local copy should be watched and deployed into the server. The default option is very “open”, it will copy all the files in your project folder. Most of the time it’s better to be more specific so, be sure to build your own custom array of glob to avoid copying unnecessary or sensible data.</li>\n<li><code>remoteFolder</code> is the folder in your remote server that contains the whole project (where the new files will be copied).</li>\n</ul>\n<p>As you probably noticed we also have the <code>username</code> and <code>password</code> variables mapped to an environment variable. Is generally a good idea to not write passwords in configuration files, especially if you are going to publish this file somewhere. With this approach we can also share the same gulpfile with other people in the team and allow everyone to use their personal credentials.</p>\n<p>After the configuration variables block we have the <code>getFtpConnection</code> function. This function is used as an helper to build an FTP connection using the previously specified options. You can also add some <a href=\"https://www.npmjs.com/package/vinyl-ftp#ftp-create-config\">additional options</a>, for instance <code>parallel</code> allows you to define the maximum number of files to upload in parallel.</p>\n<p>At the end we have our two real Gulp commands: <code>ftp-deploy</code> and <code>ftp-deploy-watch</code>.</p>\n<p>They simply defines a stream starting from the glob expressions and pipe it to the destination server through the FTP connection. The only difference between the two commands is that in the <code>ftp-deploy</code> we read all the files from the glob expressions and send them through the connection, in the second case we watch the files and send only the one that changes while command is running.</p>\n<p>It’s also worth noticing that we are piping the files through the function <code>conn.newer</code>. This function ensures that only the files that are different from the server gets overwritten.</p>\n<h2 id=\"Running-the-commands\"><a href=\"#Running-the-commands\" class=\"headerlink\" title=\"Running the commands\"></a>Running the commands</h2><p>To run the commands you must first specify the <code>FTP_USER</code> and <code>FTP_PWD</code> environment variables. For example you can do it this way:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy</div></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FTP_USER=someuser FTP_PWD=somepwd gulp ftp-deploy-watch</div></pre></td></tr></table></figure>\n<p>Or if you prefer you can export the variables in your <code>.bashrc</code> or <code>.bash_profile</code> files (in this case I suggest you to rename the variables into something more specific to avoid collisions).</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>This approach allowed me to solve the problem easily and quickly having a mechanism that is quite fast to use and easy to maintain.</p>\n<p>I am also more and more impressed about how easy is to have simple but effective solutions up and running with NodeJs and the tools in its ecosystem. I am also impressed by the versatility of Gulp and how its stream-based approach makes things very concise and uniform.</p>\n<p>I hope this article was useful and interesting for you.<br>I’d really love to receive <strong>your opinions in the comments box</strong> about it and, in case you are a veteran Gulp user, I’m curious to know <strong>what was the most interesting command you have ever written using Gulp</strong>.</p>\n<p>Until next time!</p>\n<p>Regards</p>\n"},{"uuid":"000b9c76-e0e2-4b7b-95c2-29a6a84a65e1","layout":"post","title":"Integrating Twig.js and BazingaJsTranslationBundle","slug":"integrating-twig-js-and-bazingajstranslationbundle","subtitle":null,"date":"2014-02-28T11:40:05.000Z","updated":"2014-02-28T12:35:38.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nRecently I had the need to run a twig template that uses the `trans` filter on my frontend using [twig.js](http://jmsyst.com/libs/twig.js), a pure JavaScript port of twig written by the good [Johannes Schmitt](http://jmsyst.com/).\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the `trans` filter.\n\nSo, at first, I got a JavaScript runtime exception on my page when trying to use the template.\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.\n\nIn my specific case I had a Symfony application where I was already using [BazingaJsTranslationBundle](https://github.com/willdurand/BazingaJsTranslationBundle) to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the `Translator` JavaScript object offered by the Bazinga bundle.\n\n**Note**: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.\n\nIn my first attempt I wrote something like this:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThat seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.\n\nSuppose we have the string `hello %name%`. With twig we expect to do something like:\n\n```jinja+html\n{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n```\n\nNote the `%` delimiters around the parameter name.\n\nThe `Translator.trans` method expects an hash map without parameter delimiters in it. So we would have to do something like this:\n\n```javascript\nTranslator.trans(\"hello %name%\", { 'name' ; 'Alice' });\n```\nNote that there's no `%` delimiter this time.\nThe `Translator.trans` method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: `Translator.placeHolderPrefix` and `Translator.placeHolderSuffix`.\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).\n\nSo my final solution was the following:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &&\n            key[0] == Translator.placeHolderPrefix &&\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThis way it automatically normalizes parameters for the `Translator` object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex).\nLet me know if you do it ;)\n\nObviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the `Translator` object expects it (without delimiters). In this case you can stick to my first implementation.\n\nThat's all. See ya ;)\n","source":"_posts/integrating-twig-js-and-bazingajstranslationbundle.md","raw":"uuid:             000b9c76-e0e2-4b7b-95c2-29a6a84a65e1\nlayout:           post\ntitle:            'Integrating Twig.js and BazingaJsTranslationBundle'\nslug:             integrating-twig-js-and-bazingajstranslationbundle\nsubtitle:         null\ndate:             '2014-02-28T11:40:05.000Z'\nupdated:          '2014-02-28T12:35:38.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Php\n  - Symfony\n  - JavaScript\n  - Translation\n  - Twig\n\n---\n\nRecently I had the need to run a twig template that uses the `trans` filter on my frontend using [twig.js](http://jmsyst.com/libs/twig.js), a pure JavaScript port of twig written by the good [Johannes Schmitt](http://jmsyst.com/).\nThe JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the `trans` filter.\n\nSo, at first, I got a JavaScript runtime exception on my page when trying to use the template.\nLuckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.\n\nIn my specific case I had a Symfony application where I was already using [BazingaJsTranslationBundle](https://github.com/willdurand/BazingaJsTranslationBundle) to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the `Translator` JavaScript object offered by the Bazinga bundle.\n\n**Note**: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.\n\nIn my first attempt I wrote something like this:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThat seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!\nThe problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let's see a simple example.\n\nSuppose we have the string `hello %name%`. With twig we expect to do something like:\n\n```jinja+html\n{{ 'hello %name%'|trans({ '%name%' : 'Alice' }) }}\n```\n\nNote the `%` delimiters around the parameter name.\n\nThe `Translator.trans` method expects an hash map without parameter delimiters in it. So we would have to do something like this:\n\n```javascript\nTranslator.trans(\"hello %name%\", { 'name' ; 'Alice' });\n```\nNote that there's no `%` delimiter this time.\nThe `Translator.trans` method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: `Translator.placeHolderPrefix` and `Translator.placeHolderSuffix`.\nObviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).\n\nSo my final solution was the following:\n\n```javascript\nTwig.setFilter(\"trans\", function(id, params, domain, locale) {\n\n    params = params || {};\n\n    // normalizes params (removes placeholder prefixes and suffixes)\n    for (var key in params) {\n        if (params.hasOwnProperty(key) &&\n            key[0] == Translator.placeHolderPrefix &&\n            key[key.length - 1] == Translator.placeHolderSuffix) {\n            params[key.substr(1,key.length-2)] = params[key];\n            delete params[key];\n        }\n    }\n\n    return Translator.trans(id, params, domain, locale);\n});\n```\n\nThis way it automatically normalizes parameters for the `Translator` object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.\nMy normalization approach is very rough and you can surely find a better approach (maybe using a regex).\nLet me know if you do it ;)\n\nObviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the `Translator` object expects it (without delimiters). In this case you can stick to my first implementation.\n\nThat's all. See ya ;)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryk000lsvvujor1vx5u","content":"<p>Recently I had the need to run a twig template that uses the <code>trans</code> filter on my frontend using <a href=\"http://jmsyst.com/libs/twig.js\" target=\"_blank\" rel=\"external\">twig.js</a>, a pure JavaScript port of twig written by the good <a href=\"http://jmsyst.com/\" target=\"_blank\" rel=\"external\">Johannes Schmitt</a>.<br>The JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the <code>trans</code> filter.</p>\n<p>So, at first, I got a JavaScript runtime exception on my page when trying to use the template.<br>Luckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.</p>\n<p>In my specific case I had a Symfony application where I was already using <a href=\"https://github.com/willdurand/BazingaJsTranslationBundle\" target=\"_blank\" rel=\"external\">BazingaJsTranslationBundle</a> to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the <code>Translator</code> JavaScript object offered by the Bazinga bundle.</p>\n<p><strong>Note</strong>: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.</p>\n<p>In my first attempt I wrote something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Twig.setFilter(<span class=\"string\">\"trans\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, params, domain, locale</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Translator.trans(id, params, domain, locale);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>That seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!<br>The problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let’s see a simple example.</p>\n<p>Suppose we have the string <code>hello %name%</code>. With twig we expect to do something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; &apos;hello %name%&apos;|trans(&#123; &apos;%name%&apos; : &apos;Alice&apos; &#125;) &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Note the <code>%</code> delimiters around the parameter name.</p>\n<p>The <code>Translator.trans</code> method expects an hash map without parameter delimiters in it. So we would have to do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Translator.trans(<span class=\"string\">\"hello %name%\"</span>, &#123; <span class=\"string\">'name'</span> ; <span class=\"string\">'Alice'</span> &#125;);</div></pre></td></tr></table></figure>\n<p>Note that there’s no <code>%</code> delimiter this time.<br>The <code>Translator.trans</code> method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: <code>Translator.placeHolderPrefix</code> and <code>Translator.placeHolderSuffix</code>.<br>Obviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).</p>\n<p>So my final solution was the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Twig.setFilter(<span class=\"string\">\"trans\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, params, domain, locale</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    params = params || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// normalizes params (removes placeholder prefixes and suffixes)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.hasOwnProperty(key) &amp;&amp;</div><div class=\"line\">            key[<span class=\"number\">0</span>] == Translator.placeHolderPrefix &amp;&amp;</div><div class=\"line\">            key[key.length - <span class=\"number\">1</span>] == Translator.placeHolderSuffix) &#123;</div><div class=\"line\">            params[key.substr(<span class=\"number\">1</span>,key.length<span class=\"number\">-2</span>)] = params[key];</div><div class=\"line\">            <span class=\"keyword\">delete</span> params[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Translator.trans(id, params, domain, locale);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This way it automatically normalizes parameters for the <code>Translator</code> object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.<br>My normalization approach is very rough and you can surely find a better approach (maybe using a regex).<br>Let me know if you do it ;)</p>\n<p>Obviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the <code>Translator</code> object expects it (without delimiters). In this case you can stick to my first implementation.</p>\n<p>That’s all. See ya ;)</p>\n","excerpt":"","more":"<p>Recently I had the need to run a twig template that uses the <code>trans</code> filter on my frontend using <a href=\"http://jmsyst.com/libs/twig.js\">twig.js</a>, a pure JavaScript port of twig written by the good <a href=\"http://jmsyst.com/\">Johannes Schmitt</a>.<br>The JavaScript version does not handle all the functionalities offered by the original PHP version (even if it goes pretty close) and in particular it does not natively handle the <code>trans</code> filter.</p>\n<p>So, at first, I got a JavaScript runtime exception on my page when trying to use the template.<br>Luckily enough the JavaScript version of twig is extensible like the PHP one and it is very easy to add new filters and functions.</p>\n<p>In my specific case I had a Symfony application where I was already using <a href=\"https://github.com/willdurand/BazingaJsTranslationBundle\">BazingaJsTranslationBundle</a> to manage dynamic translations on the frontend. As I discovered the twig.js extensibility, it was very easy to start building a twig.js extension by using the <code>Translator</code> JavaScript object offered by the Bazinga bundle.</p>\n<p><strong>Note</strong>: I will not go into the details about how to install twig.js and BazingaJsTranslationBundle in a Symfony application. You can find all the needed informations on their websites/github pages.</p>\n<p>In my first attempt I wrote something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Twig.setFilter(<span class=\"string\">\"trans\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, params, domain, locale</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Translator.trans(id, params, domain, locale);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>That seemed to work pretty good until I started to use translation strings with parameters. Parameters were not replaced with their respective values!<br>The problem laid in a subtle differece on how the BazingaJsTranslationBundle and the standard twig handle parameters. Let’s see a simple example.</p>\n<p>Suppose we have the string <code>hello %name%</code>. With twig we expect to do something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; &apos;hello %name%&apos;|trans(&#123; &apos;%name%&apos; : &apos;Alice&apos; &#125;) &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Note the <code>%</code> delimiters around the parameter name.</p>\n<p>The <code>Translator.trans</code> method expects an hash map without parameter delimiters in it. So we would have to do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Translator.trans(<span class=\"string\">\"hello %name%\"</span>, &#123; <span class=\"string\">'name'</span> ; <span class=\"string\">'Alice'</span> &#125;);</div></pre></td></tr></table></figure>\n<p>Note that there’s no <code>%</code> delimiter this time.<br>The <code>Translator.trans</code> method manages the detection of parameters by itself and you can also decide to customize the delimiters by setting the values: <code>Translator.placeHolderPrefix</code> and <code>Translator.placeHolderSuffix</code>.<br>Obviously I suggest you to be consistent and use the same placeholders you use with PHP (especially if you need to share templates and translations from the backend to the frontend).</p>\n<p>So my final solution was the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Twig.setFilter(<span class=\"string\">\"trans\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, params, domain, locale</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    params = params || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// normalizes params (removes placeholder prefixes and suffixes)</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (params.hasOwnProperty(key) &amp;&amp;</div><div class=\"line\">            key[<span class=\"number\">0</span>] == Translator.placeHolderPrefix &amp;&amp;</div><div class=\"line\">            key[key.length - <span class=\"number\">1</span>] == Translator.placeHolderSuffix) &#123;</div><div class=\"line\">            params[key.substr(<span class=\"number\">1</span>,key.length<span class=\"number\">-2</span>)] = params[key];</div><div class=\"line\">            <span class=\"keyword\">delete</span> params[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> Translator.trans(id, params, domain, locale);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This way it automatically normalizes parameters for the <code>Translator</code> object (by removing any delimiter from parameter keys) and I have a consistent behavior between twig and twig.js.<br>My normalization approach is very rough and you can surely find a better approach (maybe using a regex).<br>Let me know if you do it ;)</p>\n<p>Obviously you can also avoid the normalization and keep the responsibility to pass the parameters hash map in the way the <code>Translator</code> object expects it (without delimiters). In this case you can stick to my first implementation.</p>\n<p>That’s all. See ya ;)</p>\n"},{"uuid":"0e3ae663-c6fd-4d6e-b5d6-65dc8a25a2ae","layout":"post","title":"How to crack a JWT token: two articles about distributed computing, ZeroMQ & Node.js","slug":"how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js","subtitle":null,"date":"2016-10-24T22:44:51.000Z","updated":"2016-10-28T22:24:42.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/10/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn the last 2 weeks I add the pleasure to release an article (in two parts) in collaboration with [RisingStack](http://risingstack.com/), one of the most famous companies in the [Node.js](/tag/node-js) ecosystem.\n\nThe article explains how to build a distributed application using Node.js and [ZeroMQ](/tag/zeromq) and provides an example that I believe it's very actual and interesting: a [JWT](/tag/jwt) token cracker.\n\nIf you are into Node.js, ZeroMQ, security or distributed application you can read the two articles in the community section of RisingStack.\n\n[![ZeroMQ & Node.js Tutorial - Cracking JWT Tokens](/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/)\n\n**[ZeroMQ & Node.js Tutorial - Cracking JWT Tokens (Part 1.)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/)**, is focused mostly on theory and describes what a JWT token is and what will be our approach to try to crack one of them.\n\n**[ZeroMQ & Node.js Tutorial - Cracking JWT Tokens (Part 2.)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/)**, instead, focuses on coding and it's a step by step guide on how to build the working application.\n\nThe application is also freely available on [NPM](https://www.npmjs.com/package/distributed-jwt-cracker) and [GitHub](https://github.com/lmammino/distributed-jwt-cracker) in case you want to simply download it or contribute.\n","source":"_posts/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.md","raw":"uuid:             0e3ae663-c6fd-4d6e-b5d6-65dc8a25a2ae\nlayout:           post\ntitle:            'How to crack a JWT token: two articles about distributed computing, ZeroMQ & Node.js'\nslug:             how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js\nsubtitle:         null\ndate:             '2016-10-24T22:44:51.000Z'\nupdated:          '2016-10-28T22:24:42.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/10/how-to-crack-a-jwt-token-two-articles-about-distributed-computing-zeromq-node-js.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Node.js\n  - ZeroMq\n  - Distributed\n  - Collaboration\n  - JWT\n  - JavaScript\n\n---\n\nIn the last 2 weeks I add the pleasure to release an article (in two parts) in collaboration with [RisingStack](http://risingstack.com/), one of the most famous companies in the [Node.js](/tag/node-js) ecosystem.\n\nThe article explains how to build a distributed application using Node.js and [ZeroMQ](/tag/zeromq) and provides an example that I believe it's very actual and interesting: a [JWT](/tag/jwt) token cracker.\n\nIf you are into Node.js, ZeroMQ, security or distributed application you can read the two articles in the community section of RisingStack.\n\n[![ZeroMQ & Node.js Tutorial - Cracking JWT Tokens](/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/)\n\n**[ZeroMQ & Node.js Tutorial - Cracking JWT Tokens (Part 1.)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/)**, is focused mostly on theory and describes what a JWT token is and what will be our approach to try to crack one of them.\n\n**[ZeroMQ & Node.js Tutorial - Cracking JWT Tokens (Part 2.)](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/)**, instead, focuses on coding and it's a step by step guide on how to build the working application.\n\nThe application is also freely available on [NPM](https://www.npmjs.com/package/distributed-jwt-cracker) and [GitHub](https://github.com/lmammino/distributed-jwt-cracker) in case you want to simply download it or contribute.\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryo000qsvvum8p9og11","content":"<p>In the last 2 weeks I add the pleasure to release an article (in two parts) in collaboration with <a href=\"http://risingstack.com/\" target=\"_blank\" rel=\"external\">RisingStack</a>, one of the most famous companies in the <a href=\"/tag/node-js\">Node.js</a> ecosystem.</p>\n<p>The article explains how to build a distributed application using Node.js and <a href=\"/tag/zeromq\">ZeroMQ</a> and provides an example that I believe it’s very actual and interesting: a <a href=\"/tag/jwt\">JWT</a> token cracker.</p>\n<p>If you are into Node.js, ZeroMQ, security or distributed application you can read the two articles in the community section of RisingStack.</p>\n<p><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg\" alt=\"ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens\"></a></p>\n<p><strong><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\" target=\"_blank\" rel=\"external\">ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens (Part 1.)</a></strong>, is focused mostly on theory and describes what a JWT token is and what will be our approach to try to crack one of them.</p>\n<p><strong><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/\" target=\"_blank\" rel=\"external\">ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens (Part 2.)</a></strong>, instead, focuses on coding and it’s a step by step guide on how to build the working application.</p>\n<p>The application is also freely available on <a href=\"https://www.npmjs.com/package/distributed-jwt-cracker\" target=\"_blank\" rel=\"external\">NPM</a> and <a href=\"https://github.com/lmammino/distributed-jwt-cracker\" target=\"_blank\" rel=\"external\">GitHub</a> in case you want to simply download it or contribute.</p>\n","excerpt":"","more":"<p>In the last 2 weeks I add the pleasure to release an article (in two parts) in collaboration with <a href=\"http://risingstack.com/\">RisingStack</a>, one of the most famous companies in the <a href=\"/tag/node-js\">Node.js</a> ecosystem.</p>\n<p>The article explains how to build a distributed application using Node.js and <a href=\"/tag/zeromq\">ZeroMQ</a> and provides an example that I believe it’s very actual and interesting: a <a href=\"/tag/jwt\">JWT</a> token cracker.</p>\n<p>If you are into Node.js, ZeroMQ, security or distributed application you can read the two articles in the community section of RisingStack.</p>\n<p><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\"><img src=\"/content/images/2016/10/zeromq-nodejs-tutorial-cracking-jwt-tokens.jpg\" alt=\"ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens\"></a></p>\n<p><strong><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\">ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens (Part 1.)</a></strong>, is focused mostly on theory and describes what a JWT token is and what will be our approach to try to crack one of them.</p>\n<p><strong><a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/\">ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens (Part 2.)</a></strong>, instead, focuses on coding and it’s a step by step guide on how to build the working application.</p>\n<p>The application is also freely available on <a href=\"https://www.npmjs.com/package/distributed-jwt-cracker\">NPM</a> and <a href=\"https://github.com/lmammino/distributed-jwt-cracker\">GitHub</a> in case you want to simply download it or contribute.</p>\n"},{"uuid":"ea2d2f0f-efec-4056-bc64-e48629be8573","layout":"post","title":"Introducing flickr-set-get a command line app to download photos","slug":"introducing-flickr-set-get-a-command-line-app-to-download-photos","subtitle":"","date":"2015-05-11T23:04:50.000Z","updated":"2015-05-14T17:05:48.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg","status":"published","language":"en_US","meta_title":"flickr-set-get a command line app to download photos from Flickr","meta_description":"","_content":"\nI recently developed a small command line app that allows you to download an entire gallery from Flickr, it's called `flickr-set-get` and you can find it on [NPM](https://www.npmjs.com/package/flickr-set-get) and [GitHub](https://github.com/lmammino/flickr-set-get).\n\n![a screenshoot of flickr-set-get](/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png)\n\n## Why?\n\nTo be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn't wanted to do it manually. I also wasn't able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.\n\n## How it's built?\n\nAs I said it's built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow \"[the Node way](http://thenodeway.io)\" so I used some very good modules as the foundation to build this app:\n\n  - [Commander](https://www.npmjs.com/package/commander), [Cli](https://www.npmjs.com/package/cli) and [Prompt](https://www.npmjs.com/package/prompt) for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)\n  - [Request](https://www.npmjs.com/package/request): to simplify the creation of the Http request to call the Flickr APIs\n  - [Async](https://www.npmjs.com/package/async): to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).\n\nAs development tools I also used:\n\n  - [JSCS](http://jscs.info): to check the code standard I adopted\n  - [Mocha](http://mochajs.org) and [Chai](http://chaijs.com/): test runner and assertion frameworks for the unit testing\n  - [Nock](https://www.npmjs.com/package/nock): amazing module to \"mock\" the Http requests and avoid to hit Flickr servers in my tests\n  - [Istanbul](https://gotwarlost.github.io/istanbul): for the code coverage\n  - [Travis CI](https://travis-ci.org): continous integration service\n  - [Coveralls](https://coveralls.io): service to keep track of the coverage changes after every new commit\n  - [Gemnasium](https://gemnasium.com): service that checks your dependencies and alerts you if they get out of date\n\n## Going asynchronous and execute requests in parallel\n\nTo download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.\n\nFirst of all you need to call the [flickr.photosets.getPhotos](https://www.flickr.com/services/api/flickr.photosets.getPhotos.html) API method to find out the IDs of all the photos in the set.\nThen, to find out the URL of every photo you need to call the [flickr.photos.getSizes](https://www.flickr.com/services/api/flickr.photos.getSizes.html) API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive.\nThe first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel.\nThanks to `Async` it was very easy to create a `task` function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the `Async.parallelLimit()` function it's even possible to run the tasks with a configurable concurrency level.\n\n![flickr-set-get asynchronous requests diagram](/content/images/2015/05/flickr-set-get-requests-diagram.png)\n\nYou can find out how I implemented this specific logic on GitHub: https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253. \n\n## How to use it?\n\nIf you're interested on using it I suggest you to read the [official documentation on GitHub](https://github.com/lmammino/flickr-set-get), but it should be quite easy to understand and use it if you are a developer (and it's not meant to be used by other people who are comfortable with the command line!)\n\n## Current status\n\nThe project has been developed in a weekend as a \"learning project\" and tested just by me on few Flickr galleries. It's to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases. \nIt's a small side project anyway so I don't expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen).\nBeing an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the [official documentation](https://github.com/lmammino/flickr-set-get).\n\n## Opinions\n\nFor me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests. \nAs I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas. \nI offer the comment box below for this sake... please don't be too much indulgent :D\n","source":"_posts/introducing-flickr-set-get-a-command-line-app-to-download-photos.md","raw":"uuid:             ea2d2f0f-efec-4056-bc64-e48629be8573\nlayout:           post\ntitle:            'Introducing flickr-set-get a command line app to download photos'\nslug:             introducing-flickr-set-get-a-command-line-app-to-download-photos\nsubtitle:         \"\"\ndate:             '2015-05-11T23:04:50.000Z'\nupdated:          '2015-05-14T17:05:48.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/05/flickr-set-get-download-photos-from-command-line-flickr.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       'flickr-set-get a command line app to download photos from Flickr'\nmeta_description: \"\"\ntags:\n  - JavaScript\n  - Http\n  - Node.js\n  - API\n  - Flickr\n\n---\n\nI recently developed a small command line app that allows you to download an entire gallery from Flickr, it's called `flickr-set-get` and you can find it on [NPM](https://www.npmjs.com/package/flickr-set-get) and [GitHub](https://github.com/lmammino/flickr-set-get).\n\n![a screenshoot of flickr-set-get](/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png)\n\n## Why?\n\nTo be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn't wanted to do it manually. I also wasn't able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.\n\n## How it's built?\n\nAs I said it's built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow \"[the Node way](http://thenodeway.io)\" so I used some very good modules as the foundation to build this app:\n\n  - [Commander](https://www.npmjs.com/package/commander), [Cli](https://www.npmjs.com/package/cli) and [Prompt](https://www.npmjs.com/package/prompt) for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)\n  - [Request](https://www.npmjs.com/package/request): to simplify the creation of the Http request to call the Flickr APIs\n  - [Async](https://www.npmjs.com/package/async): to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).\n\nAs development tools I also used:\n\n  - [JSCS](http://jscs.info): to check the code standard I adopted\n  - [Mocha](http://mochajs.org) and [Chai](http://chaijs.com/): test runner and assertion frameworks for the unit testing\n  - [Nock](https://www.npmjs.com/package/nock): amazing module to \"mock\" the Http requests and avoid to hit Flickr servers in my tests\n  - [Istanbul](https://gotwarlost.github.io/istanbul): for the code coverage\n  - [Travis CI](https://travis-ci.org): continous integration service\n  - [Coveralls](https://coveralls.io): service to keep track of the coverage changes after every new commit\n  - [Gemnasium](https://gemnasium.com): service that checks your dependencies and alerts you if they get out of date\n\n## Going asynchronous and execute requests in parallel\n\nTo download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.\n\nFirst of all you need to call the [flickr.photosets.getPhotos](https://www.flickr.com/services/api/flickr.photosets.getPhotos.html) API method to find out the IDs of all the photos in the set.\nThen, to find out the URL of every photo you need to call the [flickr.photos.getSizes](https://www.flickr.com/services/api/flickr.photos.getSizes.html) API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive.\nThe first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel.\nThanks to `Async` it was very easy to create a `task` function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the `Async.parallelLimit()` function it's even possible to run the tasks with a configurable concurrency level.\n\n![flickr-set-get asynchronous requests diagram](/content/images/2015/05/flickr-set-get-requests-diagram.png)\n\nYou can find out how I implemented this specific logic on GitHub: https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253. \n\n## How to use it?\n\nIf you're interested on using it I suggest you to read the [official documentation on GitHub](https://github.com/lmammino/flickr-set-get), but it should be quite easy to understand and use it if you are a developer (and it's not meant to be used by other people who are comfortable with the command line!)\n\n## Current status\n\nThe project has been developed in a weekend as a \"learning project\" and tested just by me on few Flickr galleries. It's to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases. \nIt's a small side project anyway so I don't expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen).\nBeing an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the [official documentation](https://github.com/lmammino/flickr-set-get).\n\n## Opinions\n\nFor me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests. \nAs I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas. \nI offer the comment box below for this sake... please don't be too much indulgent :D\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryp000ssvvusam4vxkh","content":"<p>I recently developed a small command line app that allows you to download an entire gallery from Flickr, it’s called <code>flickr-set-get</code> and you can find it on <a href=\"https://www.npmjs.com/package/flickr-set-get\" target=\"_blank\" rel=\"external\">NPM</a> and <a href=\"https://github.com/lmammino/flickr-set-get\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<p><img src=\"/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png\" alt=\"a screenshoot of flickr-set-get\"></p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>To be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn’t wanted to do it manually. I also wasn’t able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.</p>\n<h2 id=\"How-it’s-built\"><a href=\"#How-it’s-built\" class=\"headerlink\" title=\"How it’s built?\"></a>How it’s built?</h2><p>As I said it’s built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow “<a href=\"http://thenodeway.io\" target=\"_blank\" rel=\"external\">the Node way</a>“ so I used some very good modules as the foundation to build this app:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/commander\" target=\"_blank\" rel=\"external\">Commander</a>, <a href=\"https://www.npmjs.com/package/cli\" target=\"_blank\" rel=\"external\">Cli</a> and <a href=\"https://www.npmjs.com/package/prompt\" target=\"_blank\" rel=\"external\">Prompt</a> for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)</li>\n<li><a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">Request</a>: to simplify the creation of the Http request to call the Flickr APIs</li>\n<li><a href=\"https://www.npmjs.com/package/async\" target=\"_blank\" rel=\"external\">Async</a>: to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).</li>\n</ul>\n<p>As development tools I also used:</p>\n<ul>\n<li><a href=\"http://jscs.info\" target=\"_blank\" rel=\"external\">JSCS</a>: to check the code standard I adopted</li>\n<li><a href=\"http://mochajs.org\" target=\"_blank\" rel=\"external\">Mocha</a> and <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a>: test runner and assertion frameworks for the unit testing</li>\n<li><a href=\"https://www.npmjs.com/package/nock\" target=\"_blank\" rel=\"external\">Nock</a>: amazing module to “mock” the Http requests and avoid to hit Flickr servers in my tests</li>\n<li><a href=\"https://gotwarlost.github.io/istanbul\" target=\"_blank\" rel=\"external\">Istanbul</a>: for the code coverage</li>\n<li><a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"external\">Travis CI</a>: continous integration service</li>\n<li><a href=\"https://coveralls.io\" target=\"_blank\" rel=\"external\">Coveralls</a>: service to keep track of the coverage changes after every new commit</li>\n<li><a href=\"https://gemnasium.com\" target=\"_blank\" rel=\"external\">Gemnasium</a>: service that checks your dependencies and alerts you if they get out of date</li>\n</ul>\n<h2 id=\"Going-asynchronous-and-execute-requests-in-parallel\"><a href=\"#Going-asynchronous-and-execute-requests-in-parallel\" class=\"headerlink\" title=\"Going asynchronous and execute requests in parallel\"></a>Going asynchronous and execute requests in parallel</h2><p>To download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.</p>\n<p>First of all you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photosets.getPhotos.html\" target=\"_blank\" rel=\"external\">flickr.photosets.getPhotos</a> API method to find out the IDs of all the photos in the set.<br>Then, to find out the URL of every photo you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photos.getSizes.html\" target=\"_blank\" rel=\"external\">flickr.photos.getSizes</a> API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive.<br>The first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel.<br>Thanks to <code>Async</code> it was very easy to create a <code>task</code> function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the <code>Async.parallelLimit()</code> function it’s even possible to run the tasks with a configurable concurrency level.</p>\n<p><img src=\"/content/images/2015/05/flickr-set-get-requests-diagram.png\" alt=\"flickr-set-get asynchronous requests diagram\"></p>\n<p>You can find out how I implemented this specific logic on GitHub: <a href=\"https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253\" target=\"_blank\" rel=\"external\">https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253</a>. </p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it?\"></a>How to use it?</h2><p>If you’re interested on using it I suggest you to read the <a href=\"https://github.com/lmammino/flickr-set-get\" target=\"_blank\" rel=\"external\">official documentation on GitHub</a>, but it should be quite easy to understand and use it if you are a developer (and it’s not meant to be used by other people who are comfortable with the command line!)</p>\n<h2 id=\"Current-status\"><a href=\"#Current-status\" class=\"headerlink\" title=\"Current status\"></a>Current status</h2><p>The project has been developed in a weekend as a “learning project” and tested just by me on few Flickr galleries. It’s to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases.<br>It’s a small side project anyway so I don’t expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen).<br>Being an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the <a href=\"https://github.com/lmammino/flickr-set-get\" target=\"_blank\" rel=\"external\">official documentation</a>.</p>\n<h2 id=\"Opinions\"><a href=\"#Opinions\" class=\"headerlink\" title=\"Opinions\"></a>Opinions</h2><p>For me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests.<br>As I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas.<br>I offer the comment box below for this sake… please don’t be too much indulgent :D</p>\n","excerpt":"","more":"<p>I recently developed a small command line app that allows you to download an entire gallery from Flickr, it’s called <code>flickr-set-get</code> and you can find it on <a href=\"https://www.npmjs.com/package/flickr-set-get\">NPM</a> and <a href=\"https://github.com/lmammino/flickr-set-get\">GitHub</a>.</p>\n<p><img src=\"/content/images/2015/05/687474703a2f2f692e696d6775722e636f6d2f4447457059746c2e706e67.png\" alt=\"a screenshoot of flickr-set-get\"></p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>To be honest I had myself the need to download a large set of photos (more than 400 photos) from Flickr and I didn’t wanted to do it manually. I also wasn’t able, after a quick search, to find something simple to solve this task. Given that I am currently getting into deep of Node.js this was the perfect chance to develop something practical.</p>\n<h2 id=\"How-it’s-built\"><a href=\"#How-it’s-built\" class=\"headerlink\" title=\"How it’s built?\"></a>How it’s built?</h2><p>As I said it’s built using Node.js. As part of my learning process, I tried to not reinvent the wheel and to follow “<a href=\"http://thenodeway.io\">the Node way</a>“ so I used some very good modules as the foundation to build this app:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/commander\">Commander</a>, <a href=\"https://www.npmjs.com/package/cli\">Cli</a> and <a href=\"https://www.npmjs.com/package/prompt\">Prompt</a> for the command line facilities (Options/Arguments parsing, help generation, progress bar, receiving input from the user)</li>\n<li><a href=\"https://www.npmjs.com/package/request\">Request</a>: to simplify the creation of the Http request to call the Flickr APIs</li>\n<li><a href=\"https://www.npmjs.com/package/async\">Async</a>: to manage all the asynchronous tasks in parallel and with a configurable level of concurrency (one of the features that in my humble opinion makes node/javascript stand out from the crowd of the interpreted programming languages).</li>\n</ul>\n<p>As development tools I also used:</p>\n<ul>\n<li><a href=\"http://jscs.info\">JSCS</a>: to check the code standard I adopted</li>\n<li><a href=\"http://mochajs.org\">Mocha</a> and <a href=\"http://chaijs.com/\">Chai</a>: test runner and assertion frameworks for the unit testing</li>\n<li><a href=\"https://www.npmjs.com/package/nock\">Nock</a>: amazing module to “mock” the Http requests and avoid to hit Flickr servers in my tests</li>\n<li><a href=\"https://gotwarlost.github.io/istanbul\">Istanbul</a>: for the code coverage</li>\n<li><a href=\"https://travis-ci.org\">Travis CI</a>: continous integration service</li>\n<li><a href=\"https://coveralls.io\">Coveralls</a>: service to keep track of the coverage changes after every new commit</li>\n<li><a href=\"https://gemnasium.com\">Gemnasium</a>: service that checks your dependencies and alerts you if they get out of date</li>\n</ul>\n<h2 id=\"Going-asynchronous-and-execute-requests-in-parallel\"><a href=\"#Going-asynchronous-and-execute-requests-in-parallel\" class=\"headerlink\" title=\"Going asynchronous and execute requests in parallel\"></a>Going asynchronous and execute requests in parallel</h2><p>To download a photo from Flickr, starting from a gallery, you need to make several API calls before you have the right URL to download the photo.</p>\n<p>First of all you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photosets.getPhotos.html\">flickr.photosets.getPhotos</a> API method to find out the IDs of all the photos in the set.<br>Then, to find out the URL of every photo you need to call the <a href=\"https://www.flickr.com/services/api/flickr.photos.getSizes.html\">flickr.photos.getSizes</a> API method. This method gives you all the URLs to download all the different sizes of a given photo. Once you got the URL you can simply use that to download a photo into your local drive.<br>The first API call is the starting point and then, since you now have all the IDs, you can make all the other requests in parallel.<br>Thanks to <code>Async</code> it was very easy to create a <code>task</code> function that figured out the specific URL of a given photo and then downloads it into a file. Then I just needed to replicate this task for every photo and run all of them in parallel. Thanks to the <code>Async.parallelLimit()</code> function it’s even possible to run the tasks with a configurable concurrency level.</p>\n<p><img src=\"/content/images/2015/05/flickr-set-get-requests-diagram.png\" alt=\"flickr-set-get asynchronous requests diagram\"></p>\n<p>You can find out how I implemented this specific logic on GitHub: <a href=\"https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253\">https://github.com/lmammino/flickr-set-get/blob/ecaf0d8bea5791cf24c4b71791a7eb1fd2e60bcb/lib/Flickr.js#L212-L253</a>. </p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it?\"></a>How to use it?</h2><p>If you’re interested on using it I suggest you to read the <a href=\"https://github.com/lmammino/flickr-set-get\">official documentation on GitHub</a>, but it should be quite easy to understand and use it if you are a developer (and it’s not meant to be used by other people who are comfortable with the command line!)</p>\n<h2 id=\"Current-status\"><a href=\"#Current-status\" class=\"headerlink\" title=\"Current status\"></a>Current status</h2><p>The project has been developed in a weekend as a “learning project” and tested just by me on few Flickr galleries. It’s to be considered ALPHA quality and I expect it to be fully of bugs and uncovered edge cases.<br>It’s a small side project anyway so I don’t expect to put so much effort on it again unless it gets adopted by a relevant number of people (which, quite frankly, is really unlikely to happen).<br>Being an open source project I obviously tried to put in place all the basic infrastructure (tests, code standards, repository, versioning, etc.) to make it easy for other people to work on improving it. Again, more precise informations are included in the <a href=\"https://github.com/lmammino/flickr-set-get\">official documentation</a>.</p>\n<h2 id=\"Opinions\"><a href=\"#Opinions\" class=\"headerlink\" title=\"Opinions\"></a>Opinions</h2><p>For me it has been a really good learning experience, especially considering the fact that it was a good scenario to use asynchronous code dealing with several parallel Http requests.<br>As I still consider it a learning experience I would really love you (probably more experienced than me with Node.js) to give some opinions, critics, new ideas.<br>I offer the comment box below for this sake… please don’t be too much indulgent :D</p>\n"},{"uuid":"ad7d14b7-1bbf-4dde-b898-28105161280a","layout":"post","title":"Introducing mongo-uri-builder, a NodeJs module to easily create mongodb connection strings using objects","slug":"introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects","subtitle":null,"date":"2015-09-29T23:07:02.000Z","updated":"2015-09-29T23:07:02.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/09/mongo-uri-builder-article-sample-image.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nA couple of days ago I had the need to store the MongoDB connection string for a NodeJs application I am currently building.\nOf course it was not a big deal and at first I stored it in a file.\nAnyway at some point I realised that I would needed to override parts of this string to change some settings in *production* (e.g. adding replicas and authentication settings). \nFor this sake it would have been nice to have a way to store this configuration as a \"well organised\" object and then override just the properties I wanted to change. \n\nI often use the [config](https://www.npmjs.com/package/config) module to store my configuration and so I wanted to be able to do something like this in my configuration file:\n\n```json\n{\n    \"mongo\": {\n        \"host\": \"localhost\",\n        \"port\": 27017,\n        \"database\": \"mydb\",\n        \"username\": \"loige\",\n        \"password\": \"whyDoYouWantToKnowMyPassword\"\n    }\n}\n```\n\nAnd then to be able to retrieve this data and use it with a new `MongoClient` instance:\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\nvar config = require('config');\n\nvar mongoConfig = config.get('mongo');\nMongoClient.connect(createConnectionString(mongoConfig), function(err, db) {\n    //...\n});\n```\n\nThe missing bit here was the function `createConnectionString`. How to do that?\nI made a quick search on NPM and I wasn't able to find something ready to be used... So, given that it was a quite easy task and that I enjoy to create new packages, I decided to build it by myself: welcome **[mongo-uri-builder](https://www.npmjs.com/package/mongo-uri-builder)**! **It's alive!**\n\n![Frankestain it's alive feeling when creating a new NPM library](/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif)\n\n(Yes, this was sort of the feeling I had after launching `npm publish`, call me crazy...)\n\n\n## The mongo-uri-builder package\n\n`mongo-uri-builder` is a NodeJs package to easily create mongodb connection strings using configuration objects.\n\nThe configuration object that the module expects looks like this:\n\n```javascript\nvar mongoConnectionConfig = {\n    username: 'user', // the username \n    password: 'pass', // the password \n    host: 'host1', // the main host (default: \"localhost\")\n    port: 1111, // the main port\n    replicas: [ // an array of replica databases\n        // every replica must define an host, the port is optional \n        {host: 'host2', port: 2222},\n        {host: 'host3', port: 3333}\n    ],\n    database: 'db', // the name of the database\n    options: { // an arbitrary object of connection options\n        w: 0,\n        readPreference: 'secondary'\n    }\n}\n```\n\nAll the properties are optional and you can even use an empty object. The classic `mongodb://localhost` will be generated as default in this case.\n\nAs we are used with NPM, installing the module is as easy as running:\n\n```bash\nnpm install --save mongo-uri-builder\n```\n\nThen to use it you can do something like this:\n\n```javascript\nvar mongoUriBuilder = require('mongo-uri-builder');\n \nvar connectionString = mongoUriBuilder({\n    username: 'user',\n    password: 'pass',\n    host: 'host1',\n    port: 1111,\n    replicas: [\n        {host: 'host2', port: 2222},\n        {host: 'host3', port: 3333}\n    ],\n    database: 'db',\n    options: {\n        w: 0,\n        readPreference: 'secondary'\n    }\n});\n \nconsole.log(connectionString); \n \n// outputs \"mongodb://user:pass@host1:1111,host2:2222,host3:3333/db?w=0&readPreference=secondary\" \n```\n\nHow easy and \"well-readable\" it is now? :)\n\n\n## Contributing & Issues\n\nAs I often do I put the code of the module on GitHub, you can find the repository at [lmammino/mongo-uri-builder](https://github.com/lmammino/mongo-uri-builder). \nEveryone is more than welcome to contribute to the project. You can contribute just by submitting bugs and pull requests or suggesting improvements by [opening an issue](https://github.com/lmammino/mongo-uri-builder/issues).\n\n\n## Wrap up\n\nThis module is really something naive but it is a nice thing to have for me, especially in conjunction with `config`, that allows me to have different configuration files for every environment (e.g. `development` and `production`) and to override properties from a `default` configuration file. \nThis way I can just override the parts of the connection string that are effectively different from the default configuration. I can even [use environment variables](https://github.com/lorenwest/node-config/wiki/Environment-Variables) if I don't want for example to store the username and password of my database as clear text in a file.\n\nI really look forward to knowing what you think about it and if you found it useful. Of course I also hope that you will be willing to give it a spin in your next NodeJs project.\n\nAh, yeah, if you liked it don't forget to share the love and \"star\" it on [Github](https://github.com/lmammino/mongo-uri-builder) and [Npm](https://www.npmjs.com/package/mongo-uri-builder)! ;)\n\nCheers!\n","source":"_posts/introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects.md","raw":"uuid:             ad7d14b7-1bbf-4dde-b898-28105161280a\nlayout:           post\ntitle:            'Introducing mongo-uri-builder, a NodeJs module to easily create mongodb connection strings using objects'\nslug:             introducing-mongo-uri-builder-a-nodejs-module-to-easily-create-mongodb-connection-strings-using-objects\nsubtitle:         null\ndate:             '2015-09-29T23:07:02.000Z'\nupdated:          '2015-09-29T23:07:02.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/09/mongo-uri-builder-article-sample-image.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Node.js\n  - Library\n  - MongoDb\n  - Github\n\n---\n\nA couple of days ago I had the need to store the MongoDB connection string for a NodeJs application I am currently building.\nOf course it was not a big deal and at first I stored it in a file.\nAnyway at some point I realised that I would needed to override parts of this string to change some settings in *production* (e.g. adding replicas and authentication settings). \nFor this sake it would have been nice to have a way to store this configuration as a \"well organised\" object and then override just the properties I wanted to change. \n\nI often use the [config](https://www.npmjs.com/package/config) module to store my configuration and so I wanted to be able to do something like this in my configuration file:\n\n```json\n{\n    \"mongo\": {\n        \"host\": \"localhost\",\n        \"port\": 27017,\n        \"database\": \"mydb\",\n        \"username\": \"loige\",\n        \"password\": \"whyDoYouWantToKnowMyPassword\"\n    }\n}\n```\n\nAnd then to be able to retrieve this data and use it with a new `MongoClient` instance:\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\nvar config = require('config');\n\nvar mongoConfig = config.get('mongo');\nMongoClient.connect(createConnectionString(mongoConfig), function(err, db) {\n    //...\n});\n```\n\nThe missing bit here was the function `createConnectionString`. How to do that?\nI made a quick search on NPM and I wasn't able to find something ready to be used... So, given that it was a quite easy task and that I enjoy to create new packages, I decided to build it by myself: welcome **[mongo-uri-builder](https://www.npmjs.com/package/mongo-uri-builder)**! **It's alive!**\n\n![Frankestain it's alive feeling when creating a new NPM library](/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif)\n\n(Yes, this was sort of the feeling I had after launching `npm publish`, call me crazy...)\n\n\n## The mongo-uri-builder package\n\n`mongo-uri-builder` is a NodeJs package to easily create mongodb connection strings using configuration objects.\n\nThe configuration object that the module expects looks like this:\n\n```javascript\nvar mongoConnectionConfig = {\n    username: 'user', // the username \n    password: 'pass', // the password \n    host: 'host1', // the main host (default: \"localhost\")\n    port: 1111, // the main port\n    replicas: [ // an array of replica databases\n        // every replica must define an host, the port is optional \n        {host: 'host2', port: 2222},\n        {host: 'host3', port: 3333}\n    ],\n    database: 'db', // the name of the database\n    options: { // an arbitrary object of connection options\n        w: 0,\n        readPreference: 'secondary'\n    }\n}\n```\n\nAll the properties are optional and you can even use an empty object. The classic `mongodb://localhost` will be generated as default in this case.\n\nAs we are used with NPM, installing the module is as easy as running:\n\n```bash\nnpm install --save mongo-uri-builder\n```\n\nThen to use it you can do something like this:\n\n```javascript\nvar mongoUriBuilder = require('mongo-uri-builder');\n \nvar connectionString = mongoUriBuilder({\n    username: 'user',\n    password: 'pass',\n    host: 'host1',\n    port: 1111,\n    replicas: [\n        {host: 'host2', port: 2222},\n        {host: 'host3', port: 3333}\n    ],\n    database: 'db',\n    options: {\n        w: 0,\n        readPreference: 'secondary'\n    }\n});\n \nconsole.log(connectionString); \n \n// outputs \"mongodb://user:pass@host1:1111,host2:2222,host3:3333/db?w=0&readPreference=secondary\" \n```\n\nHow easy and \"well-readable\" it is now? :)\n\n\n## Contributing & Issues\n\nAs I often do I put the code of the module on GitHub, you can find the repository at [lmammino/mongo-uri-builder](https://github.com/lmammino/mongo-uri-builder). \nEveryone is more than welcome to contribute to the project. You can contribute just by submitting bugs and pull requests or suggesting improvements by [opening an issue](https://github.com/lmammino/mongo-uri-builder/issues).\n\n\n## Wrap up\n\nThis module is really something naive but it is a nice thing to have for me, especially in conjunction with `config`, that allows me to have different configuration files for every environment (e.g. `development` and `production`) and to override properties from a `default` configuration file. \nThis way I can just override the parts of the connection string that are effectively different from the default configuration. I can even [use environment variables](https://github.com/lorenwest/node-config/wiki/Environment-Variables) if I don't want for example to store the username and password of my database as clear text in a file.\n\nI really look forward to knowing what you think about it and if you found it useful. Of course I also hope that you will be willing to give it a spin in your next NodeJs project.\n\nAh, yeah, if you liked it don't forget to share the love and \"star\" it on [Github](https://github.com/lmammino/mongo-uri-builder) and [Npm](https://www.npmjs.com/package/mongo-uri-builder)! ;)\n\nCheers!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryr000tsvvuph8393oo","content":"<p>A couple of days ago I had the need to store the MongoDB connection string for a NodeJs application I am currently building.<br>Of course it was not a big deal and at first I stored it in a file.<br>Anyway at some point I realised that I would needed to override parts of this string to change some settings in <em>production</em> (e.g. adding replicas and authentication settings).<br>For this sake it would have been nice to have a way to store this configuration as a “well organised” object and then override just the properties I wanted to change. </p>\n<p>I often use the <a href=\"https://www.npmjs.com/package/config\" target=\"_blank\" rel=\"external\">config</a> module to store my configuration and so I wanted to be able to do something like this in my configuration file:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"mongo\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"host\"</span>: <span class=\"string\">\"localhost\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"port\"</span>: <span class=\"number\">27017</span>,</div><div class=\"line\">        <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"mydb\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"loige\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"whyDoYouWantToKnowMyPassword\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And then to be able to retrieve this data and use it with a new <code>MongoClient</code> instance:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mongoConfig = config.get(<span class=\"string\">'mongo'</span>);</div><div class=\"line\">MongoClient.connect(createConnectionString(mongoConfig), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The missing bit here was the function <code>createConnectionString</code>. How to do that?<br>I made a quick search on NPM and I wasn’t able to find something ready to be used… So, given that it was a quite easy task and that I enjoy to create new packages, I decided to build it by myself: welcome <strong><a href=\"https://www.npmjs.com/package/mongo-uri-builder\" target=\"_blank\" rel=\"external\">mongo-uri-builder</a></strong>! <strong>It’s alive!</strong></p>\n<p><img src=\"/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif\" alt=\"Frankestain it&#39;s alive feeling when creating a new NPM library\"></p>\n<p>(Yes, this was sort of the feeling I had after launching <code>npm publish</code>, call me crazy…)</p>\n<h2 id=\"The-mongo-uri-builder-package\"><a href=\"#The-mongo-uri-builder-package\" class=\"headerlink\" title=\"The mongo-uri-builder package\"></a>The mongo-uri-builder package</h2><p><code>mongo-uri-builder</code> is a NodeJs package to easily create mongodb connection strings using configuration objects.</p>\n<p>The configuration object that the module expects looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoConnectionConfig = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'user'</span>, <span class=\"comment\">// the username </span></div><div class=\"line\">    password: <span class=\"string\">'pass'</span>, <span class=\"comment\">// the password </span></div><div class=\"line\">    host: <span class=\"string\">'host1'</span>, <span class=\"comment\">// the main host (default: \"localhost\")</span></div><div class=\"line\">    port: <span class=\"number\">1111</span>, <span class=\"comment\">// the main port</span></div><div class=\"line\">    replicas: [ <span class=\"comment\">// an array of replica databases</span></div><div class=\"line\">        <span class=\"comment\">// every replica must define an host, the port is optional </span></div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host2'</span>, <span class=\"attr\">port</span>: <span class=\"number\">2222</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host3'</span>, <span class=\"attr\">port</span>: <span class=\"number\">3333</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'db'</span>, <span class=\"comment\">// the name of the database</span></div><div class=\"line\">    options: &#123; <span class=\"comment\">// an arbitrary object of connection options</span></div><div class=\"line\">        w: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">readPreference</span>: <span class=\"string\">'secondary'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>All the properties are optional and you can even use an empty object. The classic <code>mongodb://localhost</code> will be generated as default in this case.</p>\n<p>As we are used with NPM, installing the module is as easy as running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save mongo-uri-builder</div></pre></td></tr></table></figure>\n<p>Then to use it you can do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoUriBuilder = <span class=\"built_in\">require</span>(<span class=\"string\">'mongo-uri-builder'</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> connectionString = mongoUriBuilder(&#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'user'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'pass'</span>,</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'host1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">1111</span>,</div><div class=\"line\">    <span class=\"attr\">replicas</span>: [</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host2'</span>, <span class=\"attr\">port</span>: <span class=\"number\">2222</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host3'</span>, <span class=\"attr\">port</span>: <span class=\"number\">3333</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'db'</span>,</div><div class=\"line\">    <span class=\"attr\">options</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">w</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">readPreference</span>: <span class=\"string\">'secondary'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(connectionString); </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// outputs \"mongodb://user:pass@host1:1111,host2:2222,host3:3333/db?w=0&amp;readPreference=secondary\"</span></div></pre></td></tr></table></figure>\n<p>How easy and “well-readable” it is now? :)</p>\n<h2 id=\"Contributing-amp-Issues\"><a href=\"#Contributing-amp-Issues\" class=\"headerlink\" title=\"Contributing &amp; Issues\"></a>Contributing &amp; Issues</h2><p>As I often do I put the code of the module on GitHub, you can find the repository at <a href=\"https://github.com/lmammino/mongo-uri-builder\" target=\"_blank\" rel=\"external\">lmammino/mongo-uri-builder</a>.<br>Everyone is more than welcome to contribute to the project. You can contribute just by submitting bugs and pull requests or suggesting improvements by <a href=\"https://github.com/lmammino/mongo-uri-builder/issues\" target=\"_blank\" rel=\"external\">opening an issue</a>.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>This module is really something naive but it is a nice thing to have for me, especially in conjunction with <code>config</code>, that allows me to have different configuration files for every environment (e.g. <code>development</code> and <code>production</code>) and to override properties from a <code>default</code> configuration file.<br>This way I can just override the parts of the connection string that are effectively different from the default configuration. I can even <a href=\"https://github.com/lorenwest/node-config/wiki/Environment-Variables\" target=\"_blank\" rel=\"external\">use environment variables</a> if I don’t want for example to store the username and password of my database as clear text in a file.</p>\n<p>I really look forward to knowing what you think about it and if you found it useful. Of course I also hope that you will be willing to give it a spin in your next NodeJs project.</p>\n<p>Ah, yeah, if you liked it don’t forget to share the love and “star” it on <a href=\"https://github.com/lmammino/mongo-uri-builder\" target=\"_blank\" rel=\"external\">Github</a> and <a href=\"https://www.npmjs.com/package/mongo-uri-builder\" target=\"_blank\" rel=\"external\">Npm</a>! ;)</p>\n<p>Cheers!</p>\n","excerpt":"","more":"<p>A couple of days ago I had the need to store the MongoDB connection string for a NodeJs application I am currently building.<br>Of course it was not a big deal and at first I stored it in a file.<br>Anyway at some point I realised that I would needed to override parts of this string to change some settings in <em>production</em> (e.g. adding replicas and authentication settings).<br>For this sake it would have been nice to have a way to store this configuration as a “well organised” object and then override just the properties I wanted to change. </p>\n<p>I often use the <a href=\"https://www.npmjs.com/package/config\">config</a> module to store my configuration and so I wanted to be able to do something like this in my configuration file:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"mongo\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"host\"</span>: <span class=\"string\">\"localhost\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"port\"</span>: <span class=\"number\">27017</span>,</div><div class=\"line\">        <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"mydb\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"loige\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"whyDoYouWantToKnowMyPassword\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And then to be able to retrieve this data and use it with a new <code>MongoClient</code> instance:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mongoConfig = config.get(<span class=\"string\">'mongo'</span>);</div><div class=\"line\">MongoClient.connect(createConnectionString(mongoConfig), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The missing bit here was the function <code>createConnectionString</code>. How to do that?<br>I made a quick search on NPM and I wasn’t able to find something ready to be used… So, given that it was a quite easy task and that I enjoy to create new packages, I decided to build it by myself: welcome <strong><a href=\"https://www.npmjs.com/package/mongo-uri-builder\">mongo-uri-builder</a></strong>! <strong>It’s alive!</strong></p>\n<p><img src=\"/content/images/2015/09/mongodb-connection-string-builder-its-alive-frankestain.gif\" alt=\"Frankestain it&#39;s alive feeling when creating a new NPM library\"></p>\n<p>(Yes, this was sort of the feeling I had after launching <code>npm publish</code>, call me crazy…)</p>\n<h2 id=\"The-mongo-uri-builder-package\"><a href=\"#The-mongo-uri-builder-package\" class=\"headerlink\" title=\"The mongo-uri-builder package\"></a>The mongo-uri-builder package</h2><p><code>mongo-uri-builder</code> is a NodeJs package to easily create mongodb connection strings using configuration objects.</p>\n<p>The configuration object that the module expects looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoConnectionConfig = &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'user'</span>, <span class=\"comment\">// the username </span></div><div class=\"line\">    password: <span class=\"string\">'pass'</span>, <span class=\"comment\">// the password </span></div><div class=\"line\">    host: <span class=\"string\">'host1'</span>, <span class=\"comment\">// the main host (default: \"localhost\")</span></div><div class=\"line\">    port: <span class=\"number\">1111</span>, <span class=\"comment\">// the main port</span></div><div class=\"line\">    replicas: [ <span class=\"comment\">// an array of replica databases</span></div><div class=\"line\">        <span class=\"comment\">// every replica must define an host, the port is optional </span></div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host2'</span>, <span class=\"attr\">port</span>: <span class=\"number\">2222</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host3'</span>, <span class=\"attr\">port</span>: <span class=\"number\">3333</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'db'</span>, <span class=\"comment\">// the name of the database</span></div><div class=\"line\">    options: &#123; <span class=\"comment\">// an arbitrary object of connection options</span></div><div class=\"line\">        w: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">readPreference</span>: <span class=\"string\">'secondary'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>All the properties are optional and you can even use an empty object. The classic <code>mongodb://localhost</code> will be generated as default in this case.</p>\n<p>As we are used with NPM, installing the module is as easy as running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save mongo-uri-builder</div></pre></td></tr></table></figure>\n<p>Then to use it you can do something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoUriBuilder = <span class=\"built_in\">require</span>(<span class=\"string\">'mongo-uri-builder'</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> connectionString = mongoUriBuilder(&#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'user'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'pass'</span>,</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'host1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">1111</span>,</div><div class=\"line\">    <span class=\"attr\">replicas</span>: [</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host2'</span>, <span class=\"attr\">port</span>: <span class=\"number\">2222</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">host</span>: <span class=\"string\">'host3'</span>, <span class=\"attr\">port</span>: <span class=\"number\">3333</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'db'</span>,</div><div class=\"line\">    <span class=\"attr\">options</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">w</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">readPreference</span>: <span class=\"string\">'secondary'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(connectionString); </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// outputs \"mongodb://user:pass@host1:1111,host2:2222,host3:3333/db?w=0&amp;readPreference=secondary\"</span></div></pre></td></tr></table></figure>\n<p>How easy and “well-readable” it is now? :)</p>\n<h2 id=\"Contributing-amp-Issues\"><a href=\"#Contributing-amp-Issues\" class=\"headerlink\" title=\"Contributing &amp; Issues\"></a>Contributing &amp; Issues</h2><p>As I often do I put the code of the module on GitHub, you can find the repository at <a href=\"https://github.com/lmammino/mongo-uri-builder\">lmammino/mongo-uri-builder</a>.<br>Everyone is more than welcome to contribute to the project. You can contribute just by submitting bugs and pull requests or suggesting improvements by <a href=\"https://github.com/lmammino/mongo-uri-builder/issues\">opening an issue</a>.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>This module is really something naive but it is a nice thing to have for me, especially in conjunction with <code>config</code>, that allows me to have different configuration files for every environment (e.g. <code>development</code> and <code>production</code>) and to override properties from a <code>default</code> configuration file.<br>This way I can just override the parts of the connection string that are effectively different from the default configuration. I can even <a href=\"https://github.com/lorenwest/node-config/wiki/Environment-Variables\">use environment variables</a> if I don’t want for example to store the username and password of my database as clear text in a file.</p>\n<p>I really look forward to knowing what you think about it and if you found it useful. Of course I also hope that you will be willing to give it a spin in your next NodeJs project.</p>\n<p>Ah, yeah, if you liked it don’t forget to share the love and “star” it on <a href=\"https://github.com/lmammino/mongo-uri-builder\">Github</a> and <a href=\"https://www.npmjs.com/package/mongo-uri-builder\">Npm</a>! ;)</p>\n<p>Cheers!</p>\n"},{"uuid":"f52438b9-7003-4837-98ea-b536e3a97d5c","layout":"post","title":"Introducing Gulp cozy - Manage your gulp tasks in a cozier way","slug":"introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way","subtitle":null,"date":"2016-01-18T23:27:40.000Z","updated":"2016-01-18T23:27:40.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/01/meerkat-459171_1920.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\n[Gulp-cozy](https://www.npmjs.com/package/gulp-cozy) is an experimental NPM package that allows you to organize your Gulp tasks in a more modular way with simplicity and *\"cozyness\"* in mind.\n\n![I don't always modularize my gulp tasks, but when I do it must be cozy!](/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg)\n\n## Rationale\nEver found yourself digging into a gigantic monstrous `Gulpfile` with hundreds\nof functions and tasks scattered all around? If it happened to you I am sure you can tell that it's not a great feeling...\n\nThat's the reason why I created this small module as an attempt to help with keeping yourself cozier (and happier!) when working with Gulp.\nIn a way it tries to bring a bit of the *Node philosophy* (also known as \"[The Node way](http://thenodeway.io/)\") into your Gulpfile.\n\n*Gulp-cozy* in fact offers a very easy way (read: *very-very-very-easy!*) to separate all your Gulp tasks into small modules organized inside a dedicated folder. Gulp-cozy will take care to load all the modules and to register them as Gulp tasks. With this approach you will end up with several small modules that serve one specific purpose (a task), which in turn result easier to maintain and to reason about.\n\n## Installation and usage\n\nEnough talking, let's jump to the practice! As most of the NPM packages to install `gulp-cozy` you just need to run the following command inside your project folder:\n\n```bash\nnpm install --save-dev gulp-cozy\n```\n\nOf course I am assuming you have already installed `Gulp` globally and as local dev dependency for your project.\n\nOnce NPM finished downloading (it should be fast, the module is pretty small!) you can turn you `Gulpfile.js` into this:\n\n```javascript\n#Gulpfile.js\n\nvar gulp = require('gulp');\nvar cozy = require('gulp-cozy');\ncozy(gulp);\n```\n\nYES! This will be the only content of your Gulpfile...\nSo you might ask *\"where do all the tasks logic go?\"*\n\nThe idea is to keep all the tasks inside a `gulp` folder in your main project folder (doesn't it make you think to the `node_modules` folder approach?!). Every task is a file which name will represent the name of the gulp task.\n\nDon't worry too much for now, let's just create this new `gulp` folder and everything will be cleaner in a moment with a more practical example.\n\nLet's assume we want to create a new task to build the css files for our new project. For this sake we can add the `build-css` task by creating the `build-css.js` file as follows:\n\n```javascript\n#gulp/build-css.js\n\nvar concat = require('gulp-concat');\nvar minifyCss = require('gulp-minify-css');\n\nmodule.exports = function(gulp) {\n  return function() {\n    return gulp.src([\n      './node_modules/bootstrap/dist/css/bootstrap.css'\n    ])\n      .pipe(concat('all.css'))\n      .pipe(minifyCss({compatibility: 'ie8'}))\n      .pipe(gulp.dest('./assets/'))\n    ;\n  }\n}\n```\n\nNotice that the module exports a function that receives the current instance of Gulp as argument. This function is a factory for the real Gulp task logic so it should return a function which, will be executed when calling the `build-css` task with:\n\n```bash\ngulp build-css\n```\n\nYou can also create a module to call a series tasks as in the following\nexample.\n\n```javascript\n#gulp/build.js\n\nmodule.exports = ['clean', 'build-css', 'build-js', 'compress', 'upload'];\n```\n\nIn this case, rather than using a factory function, the module needs to export just a plain array containing the names of the tasks to be invoked. You can launch this new task with:\n\n```bash\ngulp build\n```\n\nWhat do you think? Doesn't it make things more separated, organised and most importantly \"cozy\"?\n\n## Long way to perfection\n\nAs I told in the very first line this approach has to be considered **experimental** for now and there are still many concerns that I have about it.\n\nFirst of all the module tries to expose a very small surface and to do one simple thing. That's generally good and it sticks to the node philosophy. But at the same time it's probably not very flexible.\n\nWould be great to have a way to define generic task templates, like for example processing CSS files (compile from sass, concatenate and minify) and than have a configurable way to use this template with different sets of files and producing different assets.\n\nAt the moment you could do this by creating a generic configurable module outside your `gulp` folder and than require it and use it inside one or more tasks in the new folder. This approach should work without big efforts but doesn't feel very right to me at the moment.\n\nProbably the module should expose more functions to deal with more complex case, but it boils down to the eternal struggle between \"keeping things simple\" and \"making the new jack-of-all-trades module\"...\n\n\n## Contributing\n\nIf you want to contribute to this project you can find the sources on [GitHub](https://github.com/lmammino/gulp-cozy) (of course!). If this project is interesting to you you are very welcome to contribute by submitting a pull request or simply by [opening an issue](https://github.com/lmammino/gulp-cozy/issues).\n\nIf you decide to go with the pull request, please take care to maintain the existing coding style and add unit tests for any new or changed functionality.\nThe project is currently using [XO](https://github.com/sindresorhus/xo) for styleguide and style checks run with the regular test suite.\n\n## Conclusion\n\nI am really curious to see if this topic and this library can be of any interest for other people. I'd like to know if you ever questioned yourself to find better solutions to organize your Gulp tasks and if you came out with some kind of personal solution. I would be very happy to see some comments down this article, maybe a nice discussion might born from this.\n\nBefore leaving you I have to thank my dearest friend [Andrea](https://www.linkedin.com/in/manganoandrea) for discussing these topics and give me the inspiration to spend some time on this subject.\n\nUntil next time! :)\n","source":"_posts/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way.md","raw":"uuid:             f52438b9-7003-4837-98ea-b536e3a97d5c\nlayout:           post\ntitle:            'Introducing Gulp cozy - Manage your gulp tasks in a cozier way'\nslug:             introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way\nsubtitle:         null\ndate:             '2016-01-18T23:27:40.000Z'\nupdated:          '2016-01-18T23:27:40.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/01/meerkat-459171_1920.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Gulp\n  - JavaScript\n  - Node.js\n  - Library\n\n---\n\n[Gulp-cozy](https://www.npmjs.com/package/gulp-cozy) is an experimental NPM package that allows you to organize your Gulp tasks in a more modular way with simplicity and *\"cozyness\"* in mind.\n\n![I don't always modularize my gulp tasks, but when I do it must be cozy!](/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg)\n\n## Rationale\nEver found yourself digging into a gigantic monstrous `Gulpfile` with hundreds\nof functions and tasks scattered all around? If it happened to you I am sure you can tell that it's not a great feeling...\n\nThat's the reason why I created this small module as an attempt to help with keeping yourself cozier (and happier!) when working with Gulp.\nIn a way it tries to bring a bit of the *Node philosophy* (also known as \"[The Node way](http://thenodeway.io/)\") into your Gulpfile.\n\n*Gulp-cozy* in fact offers a very easy way (read: *very-very-very-easy!*) to separate all your Gulp tasks into small modules organized inside a dedicated folder. Gulp-cozy will take care to load all the modules and to register them as Gulp tasks. With this approach you will end up with several small modules that serve one specific purpose (a task), which in turn result easier to maintain and to reason about.\n\n## Installation and usage\n\nEnough talking, let's jump to the practice! As most of the NPM packages to install `gulp-cozy` you just need to run the following command inside your project folder:\n\n```bash\nnpm install --save-dev gulp-cozy\n```\n\nOf course I am assuming you have already installed `Gulp` globally and as local dev dependency for your project.\n\nOnce NPM finished downloading (it should be fast, the module is pretty small!) you can turn you `Gulpfile.js` into this:\n\n```javascript\n#Gulpfile.js\n\nvar gulp = require('gulp');\nvar cozy = require('gulp-cozy');\ncozy(gulp);\n```\n\nYES! This will be the only content of your Gulpfile...\nSo you might ask *\"where do all the tasks logic go?\"*\n\nThe idea is to keep all the tasks inside a `gulp` folder in your main project folder (doesn't it make you think to the `node_modules` folder approach?!). Every task is a file which name will represent the name of the gulp task.\n\nDon't worry too much for now, let's just create this new `gulp` folder and everything will be cleaner in a moment with a more practical example.\n\nLet's assume we want to create a new task to build the css files for our new project. For this sake we can add the `build-css` task by creating the `build-css.js` file as follows:\n\n```javascript\n#gulp/build-css.js\n\nvar concat = require('gulp-concat');\nvar minifyCss = require('gulp-minify-css');\n\nmodule.exports = function(gulp) {\n  return function() {\n    return gulp.src([\n      './node_modules/bootstrap/dist/css/bootstrap.css'\n    ])\n      .pipe(concat('all.css'))\n      .pipe(minifyCss({compatibility: 'ie8'}))\n      .pipe(gulp.dest('./assets/'))\n    ;\n  }\n}\n```\n\nNotice that the module exports a function that receives the current instance of Gulp as argument. This function is a factory for the real Gulp task logic so it should return a function which, will be executed when calling the `build-css` task with:\n\n```bash\ngulp build-css\n```\n\nYou can also create a module to call a series tasks as in the following\nexample.\n\n```javascript\n#gulp/build.js\n\nmodule.exports = ['clean', 'build-css', 'build-js', 'compress', 'upload'];\n```\n\nIn this case, rather than using a factory function, the module needs to export just a plain array containing the names of the tasks to be invoked. You can launch this new task with:\n\n```bash\ngulp build\n```\n\nWhat do you think? Doesn't it make things more separated, organised and most importantly \"cozy\"?\n\n## Long way to perfection\n\nAs I told in the very first line this approach has to be considered **experimental** for now and there are still many concerns that I have about it.\n\nFirst of all the module tries to expose a very small surface and to do one simple thing. That's generally good and it sticks to the node philosophy. But at the same time it's probably not very flexible.\n\nWould be great to have a way to define generic task templates, like for example processing CSS files (compile from sass, concatenate and minify) and than have a configurable way to use this template with different sets of files and producing different assets.\n\nAt the moment you could do this by creating a generic configurable module outside your `gulp` folder and than require it and use it inside one or more tasks in the new folder. This approach should work without big efforts but doesn't feel very right to me at the moment.\n\nProbably the module should expose more functions to deal with more complex case, but it boils down to the eternal struggle between \"keeping things simple\" and \"making the new jack-of-all-trades module\"...\n\n\n## Contributing\n\nIf you want to contribute to this project you can find the sources on [GitHub](https://github.com/lmammino/gulp-cozy) (of course!). If this project is interesting to you you are very welcome to contribute by submitting a pull request or simply by [opening an issue](https://github.com/lmammino/gulp-cozy/issues).\n\nIf you decide to go with the pull request, please take care to maintain the existing coding style and add unit tests for any new or changed functionality.\nThe project is currently using [XO](https://github.com/sindresorhus/xo) for styleguide and style checks run with the regular test suite.\n\n## Conclusion\n\nI am really curious to see if this topic and this library can be of any interest for other people. I'd like to know if you ever questioned yourself to find better solutions to organize your Gulp tasks and if you came out with some kind of personal solution. I would be very happy to see some comments down this article, maybe a nice discussion might born from this.\n\nBefore leaving you I have to thank my dearest friend [Andrea](https://www.linkedin.com/in/manganoandrea) for discussing these topics and give me the inspiration to spend some time on this subject.\n\nUntil next time! :)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryt000vsvvusy52mpiq","content":"<p><a href=\"https://www.npmjs.com/package/gulp-cozy\" target=\"_blank\" rel=\"external\">Gulp-cozy</a> is an experimental NPM package that allows you to organize your Gulp tasks in a more modular way with simplicity and <em>“cozyness”</em> in mind.</p>\n<p><img src=\"/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg\" alt=\"I don&#39;t always modularize my gulp tasks, but when I do it must be cozy!\"></p>\n<h2 id=\"Rationale\"><a href=\"#Rationale\" class=\"headerlink\" title=\"Rationale\"></a>Rationale</h2><p>Ever found yourself digging into a gigantic monstrous <code>Gulpfile</code> with hundreds<br>of functions and tasks scattered all around? If it happened to you I am sure you can tell that it’s not a great feeling…</p>\n<p>That’s the reason why I created this small module as an attempt to help with keeping yourself cozier (and happier!) when working with Gulp.<br>In a way it tries to bring a bit of the <em>Node philosophy</em> (also known as “<a href=\"http://thenodeway.io/\" target=\"_blank\" rel=\"external\">The Node way</a>“) into your Gulpfile.</p>\n<p><em>Gulp-cozy</em> in fact offers a very easy way (read: <em>very-very-very-easy!</em>) to separate all your Gulp tasks into small modules organized inside a dedicated folder. Gulp-cozy will take care to load all the modules and to register them as Gulp tasks. With this approach you will end up with several small modules that serve one specific purpose (a task), which in turn result easier to maintain and to reason about.</p>\n<h2 id=\"Installation-and-usage\"><a href=\"#Installation-and-usage\" class=\"headerlink\" title=\"Installation and usage\"></a>Installation and usage</h2><p>Enough talking, let’s jump to the practice! As most of the NPM packages to install <code>gulp-cozy</code> you just need to run the following command inside your project folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp-cozy</div></pre></td></tr></table></figure>\n<p>Of course I am assuming you have already installed <code>Gulp</code> globally and as local dev dependency for your project.</p>\n<p>Once NPM finished downloading (it should be fast, the module is pretty small!) you can turn you <code>Gulpfile.js</code> into this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Gulpfile.js</div><div class=\"line\"></div><div class=\"line\">var gulp = require('gulp');</div><div class=\"line\">var cozy = require('gulp-cozy');</div><div class=\"line\">cozy(gulp);</div></pre></td></tr></table></figure>\n<p>YES! This will be the only content of your Gulpfile…<br>So you might ask <em>“where do all the tasks logic go?”</em></p>\n<p>The idea is to keep all the tasks inside a <code>gulp</code> folder in your main project folder (doesn’t it make you think to the <code>node_modules</code> folder approach?!). Every task is a file which name will represent the name of the gulp task.</p>\n<p>Don’t worry too much for now, let’s just create this new <code>gulp</code> folder and everything will be cleaner in a moment with a more practical example.</p>\n<p>Let’s assume we want to create a new task to build the css files for our new project. For this sake we can add the <code>build-css</code> task by creating the <code>build-css.js</code> file as follows:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#gulp/build-css.js</div><div class=\"line\"></div><div class=\"line\">var concat = require('gulp-concat');</div><div class=\"line\">var minifyCss = require('gulp-minify-css');</div><div class=\"line\"></div><div class=\"line\">module.exports = function(gulp) &#123;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    return gulp.src([</div><div class=\"line\">      './node_modules/bootstrap/dist/css/bootstrap.css'</div><div class=\"line\">    ])</div><div class=\"line\">      .pipe(concat('all.css'))</div><div class=\"line\">      .pipe(minifyCss(&#123;compatibility: 'ie8'&#125;))</div><div class=\"line\">      .pipe(gulp.dest('./assets/'))</div><div class=\"line\">    ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that the module exports a function that receives the current instance of Gulp as argument. This function is a factory for the real Gulp task logic so it should return a function which, will be executed when calling the <code>build-css</code> task with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp build-css</div></pre></td></tr></table></figure>\n<p>You can also create a module to call a series tasks as in the following<br>example.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#gulp/build.js</div><div class=\"line\"></div><div class=\"line\">module.exports = ['clean', 'build-css', 'build-js', 'compress', 'upload'];</div></pre></td></tr></table></figure>\n<p>In this case, rather than using a factory function, the module needs to export just a plain array containing the names of the tasks to be invoked. You can launch this new task with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp build</div></pre></td></tr></table></figure>\n<p>What do you think? Doesn’t it make things more separated, organised and most importantly “cozy”?</p>\n<h2 id=\"Long-way-to-perfection\"><a href=\"#Long-way-to-perfection\" class=\"headerlink\" title=\"Long way to perfection\"></a>Long way to perfection</h2><p>As I told in the very first line this approach has to be considered <strong>experimental</strong> for now and there are still many concerns that I have about it.</p>\n<p>First of all the module tries to expose a very small surface and to do one simple thing. That’s generally good and it sticks to the node philosophy. But at the same time it’s probably not very flexible.</p>\n<p>Would be great to have a way to define generic task templates, like for example processing CSS files (compile from sass, concatenate and minify) and than have a configurable way to use this template with different sets of files and producing different assets.</p>\n<p>At the moment you could do this by creating a generic configurable module outside your <code>gulp</code> folder and than require it and use it inside one or more tasks in the new folder. This approach should work without big efforts but doesn’t feel very right to me at the moment.</p>\n<p>Probably the module should expose more functions to deal with more complex case, but it boils down to the eternal struggle between “keeping things simple” and “making the new jack-of-all-trades module”…</p>\n<h2 id=\"Contributing\"><a href=\"#Contributing\" class=\"headerlink\" title=\"Contributing\"></a>Contributing</h2><p>If you want to contribute to this project you can find the sources on <a href=\"https://github.com/lmammino/gulp-cozy\" target=\"_blank\" rel=\"external\">GitHub</a> (of course!). If this project is interesting to you you are very welcome to contribute by submitting a pull request or simply by <a href=\"https://github.com/lmammino/gulp-cozy/issues\" target=\"_blank\" rel=\"external\">opening an issue</a>.</p>\n<p>If you decide to go with the pull request, please take care to maintain the existing coding style and add unit tests for any new or changed functionality.<br>The project is currently using <a href=\"https://github.com/sindresorhus/xo\" target=\"_blank\" rel=\"external\">XO</a> for styleguide and style checks run with the regular test suite.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I am really curious to see if this topic and this library can be of any interest for other people. I’d like to know if you ever questioned yourself to find better solutions to organize your Gulp tasks and if you came out with some kind of personal solution. I would be very happy to see some comments down this article, maybe a nice discussion might born from this.</p>\n<p>Before leaving you I have to thank my dearest friend <a href=\"https://www.linkedin.com/in/manganoandrea\" target=\"_blank\" rel=\"external\">Andrea</a> for discussing these topics and give me the inspiration to spend some time on this subject.</p>\n<p>Until next time! :)</p>\n","excerpt":"","more":"<p><a href=\"https://www.npmjs.com/package/gulp-cozy\">Gulp-cozy</a> is an experimental NPM package that allows you to organize your Gulp tasks in a more modular way with simplicity and <em>“cozyness”</em> in mind.</p>\n<p><img src=\"/content/images/2016/01/gulp-cozy-i-dont-always-loige-luciano-mammino.jpg\" alt=\"I don&#39;t always modularize my gulp tasks, but when I do it must be cozy!\"></p>\n<h2 id=\"Rationale\"><a href=\"#Rationale\" class=\"headerlink\" title=\"Rationale\"></a>Rationale</h2><p>Ever found yourself digging into a gigantic monstrous <code>Gulpfile</code> with hundreds<br>of functions and tasks scattered all around? If it happened to you I am sure you can tell that it’s not a great feeling…</p>\n<p>That’s the reason why I created this small module as an attempt to help with keeping yourself cozier (and happier!) when working with Gulp.<br>In a way it tries to bring a bit of the <em>Node philosophy</em> (also known as “<a href=\"http://thenodeway.io/\">The Node way</a>“) into your Gulpfile.</p>\n<p><em>Gulp-cozy</em> in fact offers a very easy way (read: <em>very-very-very-easy!</em>) to separate all your Gulp tasks into small modules organized inside a dedicated folder. Gulp-cozy will take care to load all the modules and to register them as Gulp tasks. With this approach you will end up with several small modules that serve one specific purpose (a task), which in turn result easier to maintain and to reason about.</p>\n<h2 id=\"Installation-and-usage\"><a href=\"#Installation-and-usage\" class=\"headerlink\" title=\"Installation and usage\"></a>Installation and usage</h2><p>Enough talking, let’s jump to the practice! As most of the NPM packages to install <code>gulp-cozy</code> you just need to run the following command inside your project folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp-cozy</div></pre></td></tr></table></figure>\n<p>Of course I am assuming you have already installed <code>Gulp</code> globally and as local dev dependency for your project.</p>\n<p>Once NPM finished downloading (it should be fast, the module is pretty small!) you can turn you <code>Gulpfile.js</code> into this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Gulpfile.js</div><div class=\"line\"></div><div class=\"line\">var gulp = require('gulp');</div><div class=\"line\">var cozy = require('gulp-cozy');</div><div class=\"line\">cozy(gulp);</div></pre></td></tr></table></figure>\n<p>YES! This will be the only content of your Gulpfile…<br>So you might ask <em>“where do all the tasks logic go?”</em></p>\n<p>The idea is to keep all the tasks inside a <code>gulp</code> folder in your main project folder (doesn’t it make you think to the <code>node_modules</code> folder approach?!). Every task is a file which name will represent the name of the gulp task.</p>\n<p>Don’t worry too much for now, let’s just create this new <code>gulp</code> folder and everything will be cleaner in a moment with a more practical example.</p>\n<p>Let’s assume we want to create a new task to build the css files for our new project. For this sake we can add the <code>build-css</code> task by creating the <code>build-css.js</code> file as follows:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">#gulp/build-css.js</div><div class=\"line\"></div><div class=\"line\">var concat = require('gulp-concat');</div><div class=\"line\">var minifyCss = require('gulp-minify-css');</div><div class=\"line\"></div><div class=\"line\">module.exports = function(gulp) &#123;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    return gulp.src([</div><div class=\"line\">      './node_modules/bootstrap/dist/css/bootstrap.css'</div><div class=\"line\">    ])</div><div class=\"line\">      .pipe(concat('all.css'))</div><div class=\"line\">      .pipe(minifyCss(&#123;compatibility: 'ie8'&#125;))</div><div class=\"line\">      .pipe(gulp.dest('./assets/'))</div><div class=\"line\">    ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that the module exports a function that receives the current instance of Gulp as argument. This function is a factory for the real Gulp task logic so it should return a function which, will be executed when calling the <code>build-css</code> task with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp build-css</div></pre></td></tr></table></figure>\n<p>You can also create a module to call a series tasks as in the following<br>example.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#gulp/build.js</div><div class=\"line\"></div><div class=\"line\">module.exports = ['clean', 'build-css', 'build-js', 'compress', 'upload'];</div></pre></td></tr></table></figure>\n<p>In this case, rather than using a factory function, the module needs to export just a plain array containing the names of the tasks to be invoked. You can launch this new task with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp build</div></pre></td></tr></table></figure>\n<p>What do you think? Doesn’t it make things more separated, organised and most importantly “cozy”?</p>\n<h2 id=\"Long-way-to-perfection\"><a href=\"#Long-way-to-perfection\" class=\"headerlink\" title=\"Long way to perfection\"></a>Long way to perfection</h2><p>As I told in the very first line this approach has to be considered <strong>experimental</strong> for now and there are still many concerns that I have about it.</p>\n<p>First of all the module tries to expose a very small surface and to do one simple thing. That’s generally good and it sticks to the node philosophy. But at the same time it’s probably not very flexible.</p>\n<p>Would be great to have a way to define generic task templates, like for example processing CSS files (compile from sass, concatenate and minify) and than have a configurable way to use this template with different sets of files and producing different assets.</p>\n<p>At the moment you could do this by creating a generic configurable module outside your <code>gulp</code> folder and than require it and use it inside one or more tasks in the new folder. This approach should work without big efforts but doesn’t feel very right to me at the moment.</p>\n<p>Probably the module should expose more functions to deal with more complex case, but it boils down to the eternal struggle between “keeping things simple” and “making the new jack-of-all-trades module”…</p>\n<h2 id=\"Contributing\"><a href=\"#Contributing\" class=\"headerlink\" title=\"Contributing\"></a>Contributing</h2><p>If you want to contribute to this project you can find the sources on <a href=\"https://github.com/lmammino/gulp-cozy\">GitHub</a> (of course!). If this project is interesting to you you are very welcome to contribute by submitting a pull request or simply by <a href=\"https://github.com/lmammino/gulp-cozy/issues\">opening an issue</a>.</p>\n<p>If you decide to go with the pull request, please take care to maintain the existing coding style and add unit tests for any new or changed functionality.<br>The project is currently using <a href=\"https://github.com/sindresorhus/xo\">XO</a> for styleguide and style checks run with the regular test suite.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I am really curious to see if this topic and this library can be of any interest for other people. I’d like to know if you ever questioned yourself to find better solutions to organize your Gulp tasks and if you came out with some kind of personal solution. I would be very happy to see some comments down this article, maybe a nice discussion might born from this.</p>\n<p>Before leaving you I have to thank my dearest friend <a href=\"https://www.linkedin.com/in/manganoandrea\">Andrea</a> for discussing these topics and give me the inspiration to spend some time on this subject.</p>\n<p>Until next time! :)</p>\n"},{"uuid":"d057377d-8e7c-4e9e-b5c8-fd07290b7467","layout":"post","title":"Introducing ORM Cheatsheet","slug":"introducing-orm-cheatsheet","subtitle":null,"date":"2014-04-11T08:50:53.000Z","updated":"2014-04-11T09:24:23.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nThis week I received an interesting email from Martin Stradej, the developer of [ORM Designer](http://www.orm-designer.com), a tool to design ORM relationships with a simple but powerful graphic user interface.\n\nMartin wrote the mail because he wanted to acknowledge me of his latest project: [ORM Cheatsheet](http://ormcheatsheet.com).\n\n[![ORM Cheatsheet homepage screenshoot](/content/images/2014/Apr/orm-cheatsheet-screenshoot.png)](http://ormcheatsheet.com)\n\nORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports *Doctrine2* and *Doctrine*, but it seems that *Propel* and *Cake PHP*  will be supported too).\n\nIn my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.\n\nIt also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a *Symfony* (both version 2 and 1.4) or a *Zend Framework 2* based one.\n\nThe project has its own [GitHub repository](https://github.com/atlantic18/ormcheatsheet) so everyone can submit a pull request and improve the project.\n\nThat's all\n\nHave a nice weekend\n","source":"_posts/introducing-orm-cheatsheet.md","raw":"uuid:             d057377d-8e7c-4e9e-b5c8-fd07290b7467\nlayout:           post\ntitle:            'Introducing ORM Cheatsheet'\nslug:             introducing-orm-cheatsheet\nsubtitle:         null\ndate:             '2014-04-11T08:50:53.000Z'\nupdated:          '2014-04-11T09:24:23.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Php\n  - Doctrine\n  - ORM\n\n---\n\nThis week I received an interesting email from Martin Stradej, the developer of [ORM Designer](http://www.orm-designer.com), a tool to design ORM relationships with a simple but powerful graphic user interface.\n\nMartin wrote the mail because he wanted to acknowledge me of his latest project: [ORM Cheatsheet](http://ormcheatsheet.com).\n\n[![ORM Cheatsheet homepage screenshoot](/content/images/2014/Apr/orm-cheatsheet-screenshoot.png)](http://ormcheatsheet.com)\n\nORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports *Doctrine2* and *Doctrine*, but it seems that *Propel* and *Cake PHP*  will be supported too).\n\nIn my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can't remember how to set up something it is the perfect place to go to freshen up your memory.\n\nIt also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a *Symfony* (both version 2 and 1.4) or a *Zend Framework 2* based one.\n\nThe project has its own [GitHub repository](https://github.com/atlantic18/ormcheatsheet) so everyone can submit a pull request and improve the project.\n\nThat's all\n\nHave a nice weekend\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryv000wsvvuupz0uzrh","content":"<p>This week I received an interesting email from Martin Stradej, the developer of <a href=\"http://www.orm-designer.com\" target=\"_blank\" rel=\"external\">ORM Designer</a>, a tool to design ORM relationships with a simple but powerful graphic user interface.</p>\n<p>Martin wrote the mail because he wanted to acknowledge me of his latest project: <a href=\"http://ormcheatsheet.com\" target=\"_blank\" rel=\"external\">ORM Cheatsheet</a>.</p>\n<p><a href=\"http://ormcheatsheet.com\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2014/Apr/orm-cheatsheet-screenshoot.png\" alt=\"ORM Cheatsheet homepage screenshoot\"></a></p>\n<p>ORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports <em>Doctrine2</em> and <em>Doctrine</em>, but it seems that <em>Propel</em> and <em>Cake PHP</em>  will be supported too).</p>\n<p>In my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can’t remember how to set up something it is the perfect place to go to freshen up your memory.</p>\n<p>It also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a <em>Symfony</em> (both version 2 and 1.4) or a <em>Zend Framework 2</em> based one.</p>\n<p>The project has its own <a href=\"https://github.com/atlantic18/ormcheatsheet\" target=\"_blank\" rel=\"external\">GitHub repository</a> so everyone can submit a pull request and improve the project.</p>\n<p>That’s all</p>\n<p>Have a nice weekend</p>\n","excerpt":"","more":"<p>This week I received an interesting email from Martin Stradej, the developer of <a href=\"http://www.orm-designer.com\">ORM Designer</a>, a tool to design ORM relationships with a simple but powerful graphic user interface.</p>\n<p>Martin wrote the mail because he wanted to acknowledge me of his latest project: <a href=\"http://ormcheatsheet.com\">ORM Cheatsheet</a>.</p>\n<p><a href=\"http://ormcheatsheet.com\"><img src=\"/content/images/2014/Apr/orm-cheatsheet-screenshoot.png\" alt=\"ORM Cheatsheet homepage screenshoot\"></a></p>\n<p>ORM Cheatsheet, as the name suggests, is nothing more than a reference website for those who struggles with some of the most common Php ORM libraries (it currently supports <em>Doctrine2</em> and <em>Doctrine</em>, but it seems that <em>Propel</em> and <em>Cake PHP</em>  will be supported too).</p>\n<p>In my honest opinion, the great thing about the website is that it is a really useful resource if you always spend a lot of time searching the official Doctrine reference to check how the hell a given annotation is supposed to work or how to create a particular kind of relationship. If you are already confident with Doctrine and just can’t remember how to set up something it is the perfect place to go to freshen up your memory.</p>\n<p>It also guides you on how to configure the Doctrine library to work with a standalone PHP project or even with a <em>Symfony</em> (both version 2 and 1.4) or a <em>Zend Framework 2</em> based one.</p>\n<p>The project has its own <a href=\"https://github.com/atlantic18/ormcheatsheet\">GitHub repository</a> so everyone can submit a pull request and improve the project.</p>\n<p>That’s all</p>\n<p>Have a nice weekend</p>\n"},{"uuid":"d79a0db9-3f46-4023-9fbe-e18c5c66d0c4","layout":"post","title":"New PHP library: PHPoAuthUserData","slug":"new-php-library-php-oauth-user-data","subtitle":null,"date":"2014-02-10T12:13:50.000Z","updated":"2014-02-10T23:23:21.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nI recently wrote a new [PHP library](https://github.com/Oryzone/PHPoAuthUserData) to simplify the extraction of user data (*name*, *email*, *id*, etc...) from various OAuth providers such as *Facebook*, *Twitter* and *Linkedin*.\n\nIs well know that OAuth 1 and 2 are great *standard* protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.\n\nSo each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.\n\nThat's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!\n\nJust to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?\n\nThe library I wrote is called [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData). It sits on top of the excellent OAuth library [Lusitanian/PHPoAuthLib](https://github.com/Lusitanian/PHPoAuthLib) and aims to resolve the user extraction data problem in the most simple and effective way.\n\nIt offers a *uniform* and (really) simple interface to extract the most interesting and common user data such as *Name*, *Username*, *Id* and so on.\n\nJust to give you a *quick* idea of what is possible with the library have a look at the following snippet:\n\n```php\n// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory->get($service); // get the extractor for the given service\necho $extractor->getUniqueId(); // prints out the unique id of the user\necho $extractor->getUsername(); // prints out the username of the user\necho $extractor->getImageUrl(); // prints out the url of the user profile image\n```\n\nThe code is available on [Github](https://github.com/Oryzone/PHPoAuthUserData) where you will find detailed information on how to install and use the library.\n\nI Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains [how to write an extractor for the library](http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/).\n","source":"_posts/new-php-library-php-oauth-user-data.md","raw":"uuid:             d79a0db9-3f46-4023-9fbe-e18c5c66d0c4\nlayout:           post\ntitle:            'New PHP library: PHPoAuthUserData'\nslug:             new-php-library-php-oauth-user-data\nsubtitle:         null\ndate:             '2014-02-10T12:13:50.000Z'\nupdated:          '2014-02-10T23:23:21.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Library\n  - Php\n  - Oauth\n  - Github\n\n---\n\nI recently wrote a new [PHP library](https://github.com/Oryzone/PHPoAuthUserData) to simplify the extraction of user data (*name*, *email*, *id*, etc...) from various OAuth providers such as *Facebook*, *Twitter* and *Linkedin*.\n\nIs well know that OAuth 1 and 2 are great *standard* protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.\n\nSo each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.\n\nThat's not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!\n\nJust to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes... not so maintainable, isn't it?\n\nThe library I wrote is called [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData). It sits on top of the excellent OAuth library [Lusitanian/PHPoAuthLib](https://github.com/Lusitanian/PHPoAuthLib) and aims to resolve the user extraction data problem in the most simple and effective way.\n\nIt offers a *uniform* and (really) simple interface to extract the most interesting and common user data such as *Name*, *Username*, *Id* and so on.\n\nJust to give you a *quick* idea of what is possible with the library have a look at the following snippet:\n\n```php\n// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token\n\n$extractorFactory = new \\OAuth\\UserData\\ExtractorFactory();\n$extractor = $extractorFactory->get($service); // get the extractor for the given service\necho $extractor->getUniqueId(); // prints out the unique id of the user\necho $extractor->getUsername(); // prints out the username of the user\necho $extractor->getImageUrl(); // prints out the url of the user profile image\n```\n\nThe code is available on [Github](https://github.com/Oryzone/PHPoAuthUserData) where you will find detailed information on how to install and use the library.\n\nI Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains [how to write an extractor for the library](http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/).\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryx000ysvvuedb7ley4","content":"<p>I recently wrote a new <a href=\"https://github.com/Oryzone/PHPoAuthUserData\" target=\"_blank\" rel=\"external\">PHP library</a> to simplify the extraction of user data (<em>name</em>, <em>email</em>, <em>id</em>, etc…) from various OAuth providers such as <em>Facebook</em>, <em>Twitter</em> and <em>Linkedin</em>.</p>\n<p>Is well know that OAuth 1 and 2 are great <em>standard</em> protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.</p>\n<p>So each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.</p>\n<p>That’s not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!</p>\n<p>Just to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes… not so maintainable, isn’t it?</p>\n<p>The library I wrote is called <a href=\"https://github.com/Oryzone/PHPoAuthUserData\" target=\"_blank\" rel=\"external\">PHPoAuthUserData</a>. It sits on top of the excellent OAuth library <a href=\"https://github.com/Lusitanian/PHPoAuthLib\" target=\"_blank\" rel=\"external\">Lusitanian/PHPoAuthLib</a> and aims to resolve the user extraction data problem in the most simple and effective way.</p>\n<p>It offers a <em>uniform</em> and (really) simple interface to extract the most interesting and common user data such as <em>Name</em>, <em>Username</em>, <em>Id</em> and so on.</p>\n<p>Just to give you a <em>quick</em> idea of what is possible with the library have a look at the following snippet:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token</span></div><div class=\"line\"></div><div class=\"line\">$extractorFactory = <span class=\"keyword\">new</span> \\OAuth\\UserData\\ExtractorFactory();</div><div class=\"line\">$extractor = $extractorFactory-&gt;get($service); <span class=\"comment\">// get the extractor for the given service</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getUniqueId(); <span class=\"comment\">// prints out the unique id of the user</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getUsername(); <span class=\"comment\">// prints out the username of the user</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getImageUrl(); <span class=\"comment\">// prints out the url of the user profile image</span></div></pre></td></tr></table></figure>\n<p>The code is available on <a href=\"https://github.com/Oryzone/PHPoAuthUserData\" target=\"_blank\" rel=\"external\">Github</a> where you will find detailed information on how to install and use the library.</p>\n<p>I Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains <a href=\"http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/\" target=\"_blank\" rel=\"external\">how to write an extractor for the library</a>.</p>\n","excerpt":"","more":"<p>I recently wrote a new <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHP library</a> to simplify the extraction of user data (<em>name</em>, <em>email</em>, <em>id</em>, etc…) from various OAuth providers such as <em>Facebook</em>, <em>Twitter</em> and <em>Linkedin</em>.</p>\n<p>Is well know that OAuth 1 and 2 are great <em>standard</em> protocols to authenticate users in our apps. Anyway we often need to go further the authentication process and extract various information about the authenticated users. Unfortunately this is something that is not standardized and obviously each OAuth provider manages user data in very specific manner according to its specific purposes.</p>\n<p>So each OAuth provider offer a set of APIs with specific data schemes to allow developers to extract data about the authenticated users.</p>\n<p>That’s not a big deal if we build apps that adopts a single OAuth provider, but, if we want to adopt more of them, you need to deal with several different APIs and data schemes! Yes, things can get really cumbersome!</p>\n<p>Just to make things clearer suppose you want to allow users in your app to sign up with Facebook, Twitter and Linkedin. Probably, to increase conversion rate and speed up the sign up process, you may want to populate the user profile on your app by copying data from the OAuth provider user profile he used to sign up. Yes, you have to deal with 3 different sets of APIs and data schemes! And suppose you would be able to add GitHub and Google one day, that will count for 5 different APIs and data schemes… not so maintainable, isn’t it?</p>\n<p>The library I wrote is called <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a>. It sits on top of the excellent OAuth library <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">Lusitanian/PHPoAuthLib</a> and aims to resolve the user extraction data problem in the most simple and effective way.</p>\n<p>It offers a <em>uniform</em> and (really) simple interface to extract the most interesting and common user data such as <em>Name</em>, <em>Username</em>, <em>Id</em> and so on.</p>\n<p>Just to give you a <em>quick</em> idea of what is possible with the library have a look at the following snippet:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $service is an istance of \\OAuth\\Common\\Service\\ServiceInterface (eg. the \"Facebook\" service) with a valid access token</span></div><div class=\"line\"></div><div class=\"line\">$extractorFactory = <span class=\"keyword\">new</span> \\OAuth\\UserData\\ExtractorFactory();</div><div class=\"line\">$extractor = $extractorFactory-&gt;get($service); <span class=\"comment\">// get the extractor for the given service</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getUniqueId(); <span class=\"comment\">// prints out the unique id of the user</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getUsername(); <span class=\"comment\">// prints out the username of the user</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $extractor-&gt;getImageUrl(); <span class=\"comment\">// prints out the url of the user profile image</span></div></pre></td></tr></table></figure>\n<p>The code is available on <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">Github</a> where you will find detailed information on how to install and use the library.</p>\n<p>I Hope you will enjoy it and be willing to contribute to the code base. If you want to know more, read the next post that explains <a href=\"http://loige.com/writing-a-new-extractor-for-php-oauth-user-data/\">how to write an extractor for the library</a>.</p>\n"},{"uuid":"74ab11a3-6a91-4f63-8c09-7de9197e5702","layout":"post","title":"React on the Server for Beginners: Build a Universal React and Node App","slug":"react-on-the-server-for-beginners-build-a-universal-react-and-node-app","subtitle":null,"date":"2016-08-29T21:49:47.000Z","updated":"2016-08-29T21:49:47.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/08/ryoko-tani-universal-javascript-nodejs-react-luciano-mammino-cover.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nI recently wrote a new article in collaboration with one of my favourite web development websites: the amazing [Scotch.io](https://scotch.io/).\n\nThe article talk about using [React](/tag/react) both on client and on the server (with [Node.js](/tag/node-js)) in an attempt to build a simple \"Universal JavaScript\" (a.k.a \"Isomorphic\") application.\n\nThe application is called \"Judo Heroes\" ([did you even noticed recently that I'm kind of fond of Judo?](http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/)) and it showcases some of the best Judo athletes for their number of medals won during the Olympic Games and in other important international tournaments.\n\n[![Judo Heroes main page screenshot](/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg)](https://judo-heroes.herokuapp.com/)\n\nIf you are curious you can [check out the live demo](https://judo-heroes.herokuapp.com/) or [have a look at the source code on GitHub](https://github.com/lmammino/judo-heroes).\n\nThen, if you want to follow the tutorial, you should definitely read the article on scotch:\n\n[React on the Server for Beginners: Build a Universal React and Node App](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app)\n[![React on the Server for Beginners: Build a Universal React and Node App Article Banner](/content/images/2016/08/scotch-featured-image-react-on-the-server.png)](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app)\n\nIn this article we are going to learn how to build a simple \"Universal JavaScript\" application (a.k.a. \"Isomorphic\") using **React**, **React Router** and **Express**. We will also use some **Webpack** and **Babel** to leverage the latest **ES2015** Syntax.\n\nEnjoy it and feel free to leave your comments here or on the original article.\n\nCheers!\n\n\n","source":"_posts/react-on-the-server-for-beginners-build-a-universal-react-and-node-app.md","raw":"uuid:             74ab11a3-6a91-4f63-8c09-7de9197e5702\nlayout:           post\ntitle:            'React on the Server for Beginners: Build a Universal React and Node App'\nslug:             react-on-the-server-for-beginners-build-a-universal-react-and-node-app\nsubtitle:         null\ndate:             '2016-08-29T21:49:47.000Z'\nupdated:          '2016-08-29T21:49:47.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/08/ryoko-tani-universal-javascript-nodejs-react-luciano-mammino-cover.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Node.js\n  - React\n  - Collaboration\n\n---\n\nI recently wrote a new article in collaboration with one of my favourite web development websites: the amazing [Scotch.io](https://scotch.io/).\n\nThe article talk about using [React](/tag/react) both on client and on the server (with [Node.js](/tag/node-js)) in an attempt to build a simple \"Universal JavaScript\" (a.k.a \"Isomorphic\") application.\n\nThe application is called \"Judo Heroes\" ([did you even noticed recently that I'm kind of fond of Judo?](http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/)) and it showcases some of the best Judo athletes for their number of medals won during the Olympic Games and in other important international tournaments.\n\n[![Judo Heroes main page screenshot](/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg)](https://judo-heroes.herokuapp.com/)\n\nIf you are curious you can [check out the live demo](https://judo-heroes.herokuapp.com/) or [have a look at the source code on GitHub](https://github.com/lmammino/judo-heroes).\n\nThen, if you want to follow the tutorial, you should definitely read the article on scotch:\n\n[React on the Server for Beginners: Build a Universal React and Node App](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app)\n[![React on the Server for Beginners: Build a Universal React and Node App Article Banner](/content/images/2016/08/scotch-featured-image-react-on-the-server.png)](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app)\n\nIn this article we are going to learn how to build a simple \"Universal JavaScript\" application (a.k.a. \"Isomorphic\") using **React**, **React Router** and **Express**. We will also use some **Webpack** and **Babel** to leverage the latest **ES2015** Syntax.\n\nEnjoy it and feel free to leave your comments here or on the original article.\n\nCheers!\n\n\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryy000zsvvudp48xth1","content":"<p>I recently wrote a new article in collaboration with one of my favourite web development websites: the amazing <a href=\"https://scotch.io/\" target=\"_blank\" rel=\"external\">Scotch.io</a>.</p>\n<p>The article talk about using <a href=\"/tag/react\">React</a> both on client and on the server (with <a href=\"/tag/node-js\">Node.js</a>) in an attempt to build a simple “Universal JavaScript” (a.k.a “Isomorphic”) application.</p>\n<p>The application is called “Judo Heroes” (<a href=\"http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/\" target=\"_blank\" rel=\"external\">did you even noticed recently that I’m kind of fond of Judo?</a>) and it showcases some of the best Judo athletes for their number of medals won during the Olympic Games and in other important international tournaments.</p>\n<p><a href=\"https://judo-heroes.herokuapp.com/\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg\" alt=\"Judo Heroes main page screenshot\"></a></p>\n<p>If you are curious you can <a href=\"https://judo-heroes.herokuapp.com/\" target=\"_blank\" rel=\"external\">check out the live demo</a> or <a href=\"https://github.com/lmammino/judo-heroes\" target=\"_blank\" rel=\"external\">have a look at the source code on GitHub</a>.</p>\n<p>Then, if you want to follow the tutorial, you should definitely read the article on scotch:</p>\n<p><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\" target=\"_blank\" rel=\"external\">React on the Server for Beginners: Build a Universal React and Node App</a><br><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/08/scotch-featured-image-react-on-the-server.png\" alt=\"React on the Server for Beginners: Build a Universal React and Node App Article Banner\"></a></p>\n<p>In this article we are going to learn how to build a simple “Universal JavaScript” application (a.k.a. “Isomorphic”) using <strong>React</strong>, <strong>React Router</strong> and <strong>Express</strong>. We will also use some <strong>Webpack</strong> and <strong>Babel</strong> to leverage the latest <strong>ES2015</strong> Syntax.</p>\n<p>Enjoy it and feel free to leave your comments here or on the original article.</p>\n<p>Cheers!</p>\n","excerpt":"","more":"<p>I recently wrote a new article in collaboration with one of my favourite web development websites: the amazing <a href=\"https://scotch.io/\">Scotch.io</a>.</p>\n<p>The article talk about using <a href=\"/tag/react\">React</a> both on client and on the server (with <a href=\"/tag/node-js\">Node.js</a>) in an attempt to build a simple “Universal JavaScript” (a.k.a “Isomorphic”) application.</p>\n<p>The application is called “Judo Heroes” (<a href=\"http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/\">did you even noticed recently that I’m kind of fond of Judo?</a>) and it showcases some of the best Judo athletes for their number of medals won during the Olympic Games and in other important international tournaments.</p>\n<p><a href=\"https://judo-heroes.herokuapp.com/\"><img src=\"/content/images/2016/08/universal-javascript-judo-heroes-athlete-selection-1.jpg\" alt=\"Judo Heroes main page screenshot\"></a></p>\n<p>If you are curious you can <a href=\"https://judo-heroes.herokuapp.com/\">check out the live demo</a> or <a href=\"https://github.com/lmammino/judo-heroes\">have a look at the source code on GitHub</a>.</p>\n<p>Then, if you want to follow the tutorial, you should definitely read the article on scotch:</p>\n<p><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\">React on the Server for Beginners: Build a Universal React and Node App</a><br><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\"><img src=\"/content/images/2016/08/scotch-featured-image-react-on-the-server.png\" alt=\"React on the Server for Beginners: Build a Universal React and Node App Article Banner\"></a></p>\n<p>In this article we are going to learn how to build a simple “Universal JavaScript” application (a.k.a. “Isomorphic”) using <strong>React</strong>, <strong>React Router</strong> and <strong>Express</strong>. We will also use some <strong>Webpack</strong> and <strong>Babel</strong> to leverage the latest <strong>ES2015</strong> Syntax.</p>\n<p>Enjoy it and feel free to leave your comments here or on the original article.</p>\n<p>Cheers!</p>\n"},{"uuid":"1e2cce9d-4250-415d-b752-8755ca204bdf","layout":"post","title":"Reset your MySql server password","slug":"reset-your-mysql-server-password","subtitle":null,"date":"2014-03-30T09:07:56.000Z","updated":"2014-03-30T09:20:07.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nFew days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.\n\nYou just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).\n\n![Reset your MySql server password](/content/images/2014/Mar/password_reset.jpg)\n\n#### 1. Stop the mysql daemon\n\n```bash\nsudo /etc/init.d/mysql stopRun\n```\n\n#### 2. Disable the security checks\n\n```bash\nmysqld_safe --skip-grant-tables &\n```\n\nThe [mysqld_safe](http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html) command will essentially restarts your MySql server but with the option `--skip-grant-tables` it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.\n\nYeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.\n\n#### 3. Login as root\n\n```bash\nmysql -u root -p mysql\n```\n\nIt will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root!\nThe last argument (`mysql`) specifies you want to access the MySql internal database (where user credentials are stored).\n\n#### 4. Change the root password\n\nYou're using the MySql shell now. Just run:\n\n```mysql\nupdate user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";\nexit;\n```\n\nYou need to change the `\"NEW-ROOT-PASSWORD\"` with a password of your choice (obviously).\n\n#### 5. Restart MySql\n\nYou're back in your bash shell:\n\n```bash\nsudo service mysql restart\n```\n\nThis will restart the MySql server and will enable the security checks again.\n\nSo that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)\n","source":"_posts/reset-your-mysql-server-password.md","raw":"uuid:             1e2cce9d-4250-415d-b752-8755ca204bdf\nlayout:           post\ntitle:            'Reset your MySql server password'\nslug:             reset-your-mysql-server-password\nsubtitle:         null\ndate:             '2014-03-30T09:07:56.000Z'\nupdated:          '2014-03-30T09:20:07.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Security\n  - MySql\n  - Server\n\n---\n\nFew days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven't ever had) the password of your MySql root user.\n\nYou just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).\n\n![Reset your MySql server password](/content/images/2014/Mar/password_reset.jpg)\n\n#### 1. Stop the mysql daemon\n\n```bash\nsudo /etc/init.d/mysql stopRun\n```\n\n#### 2. Disable the security checks\n\n```bash\nmysqld_safe --skip-grant-tables &\n```\n\nThe [mysqld_safe](http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html) command will essentially restarts your MySql server but with the option `--skip-grant-tables` it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!\nThat's in fact where the trick lies: this way we are able to login to MySql as root (even if we don't know the password) and edit the MySql users table to reset the root user password.\n\nYeah, I didn't think this was possible before discovering it. But it is, and, even if it feels \"insecure\", it might be useful in cases like this.\n\n#### 3. Login as root\n\n```bash\nmysql -u root -p mysql\n```\n\nIt will ask you for a password... Yes, you get it! You can enter whatever you want and it will always grant you access as root!\nThe last argument (`mysql`) specifies you want to access the MySql internal database (where user credentials are stored).\n\n#### 4. Change the root password\n\nYou're using the MySql shell now. Just run:\n\n```mysql\nupdate user set password=PASSWORD(\"NEW-ROOT-PASSWORD\") where User=\"root\";\nexit;\n```\n\nYou need to change the `\"NEW-ROOT-PASSWORD\"` with a password of your choice (obviously).\n\n#### 5. Restart MySql\n\nYou're back in your bash shell:\n\n```bash\nsudo service mysql restart\n```\n\nThis will restart the MySql server and will enable the security checks again.\n\nSo that's all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggryz0010svvuxck86c2o","content":"<p>Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven’t ever had) the password of your MySql root user.</p>\n<p>You just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).</p>\n<p><img src=\"/content/images/2014/Mar/password_reset.jpg\" alt=\"Reset your MySql server password\"></p>\n<h4 id=\"1-Stop-the-mysql-daemon\"><a href=\"#1-Stop-the-mysql-daemon\" class=\"headerlink\" title=\"1. Stop the mysql daemon\"></a>1. Stop the mysql daemon</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql stopRun</div></pre></td></tr></table></figure>\n<h4 id=\"2-Disable-the-security-checks\"><a href=\"#2-Disable-the-security-checks\" class=\"headerlink\" title=\"2. Disable the security checks\"></a>2. Disable the security checks</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqld_safe --skip-grant-tables &amp;</div></pre></td></tr></table></figure>\n<p>The <a href=\"http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html\" target=\"_blank\" rel=\"external\">mysqld_safe</a> command will essentially restarts your MySql server but with the option <code>--skip-grant-tables</code> it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!<br>That’s in fact where the trick lies: this way we are able to login to MySql as root (even if we don’t know the password) and edit the MySql users table to reset the root user password.</p>\n<p>Yeah, I didn’t think this was possible before discovering it. But it is, and, even if it feels “insecure”, it might be useful in cases like this.</p>\n<h4 id=\"3-Login-as-root\"><a href=\"#3-Login-as-root\" class=\"headerlink\" title=\"3. Login as root\"></a>3. Login as root</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p mysql</div></pre></td></tr></table></figure>\n<p>It will ask you for a password… Yes, you get it! You can enter whatever you want and it will always grant you access as root!<br>The last argument (<code>mysql</code>) specifies you want to access the MySql internal database (where user credentials are stored).</p>\n<h4 id=\"4-Change-the-root-password\"><a href=\"#4-Change-the-root-password\" class=\"headerlink\" title=\"4. Change the root password\"></a>4. Change the root password</h4><p>You’re using the MySql shell now. Just run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">update user set password=PASSWORD(&quot;NEW-ROOT-PASSWORD&quot;) where User=&quot;root&quot;;</div><div class=\"line\">exit;</div></pre></td></tr></table></figure>\n<p>You need to change the <code>&quot;NEW-ROOT-PASSWORD&quot;</code> with a password of your choice (obviously).</p>\n<h4 id=\"5-Restart-MySql\"><a href=\"#5-Restart-MySql\" class=\"headerlink\" title=\"5. Restart MySql\"></a>5. Restart MySql</h4><p>You’re back in your bash shell:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mysql restart</div></pre></td></tr></table></figure>\n<p>This will restart the MySql server and will enable the security checks again.</p>\n<p>So that’s all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)</p>\n","excerpt":"","more":"<p>Few days ago I learned an interesting trick that allows you to reset the password on a MySql server. This trick is pretty useful in case you have lost (or you haven’t ever had) the password of your MySql root user.</p>\n<p>You just need to throw some commands at the console. Note that I am assuming you are using Ubuntu or some other Debian derivate. Otherwise the commands may change a bit (but not to much I believe).</p>\n<p><img src=\"/content/images/2014/Mar/password_reset.jpg\" alt=\"Reset your MySql server password\"></p>\n<h4 id=\"1-Stop-the-mysql-daemon\"><a href=\"#1-Stop-the-mysql-daemon\" class=\"headerlink\" title=\"1. Stop the mysql daemon\"></a>1. Stop the mysql daemon</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql stopRun</div></pre></td></tr></table></figure>\n<h4 id=\"2-Disable-the-security-checks\"><a href=\"#2-Disable-the-security-checks\" class=\"headerlink\" title=\"2. Disable the security checks\"></a>2. Disable the security checks</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqld_safe --skip-grant-tables &amp;</div></pre></td></tr></table></figure>\n<p>The <a href=\"http://dev.mysql.com/doc/refman/5.0/en/mysqld-safe.html\">mysqld_safe</a> command will essentially restarts your MySql server but with the option <code>--skip-grant-tables</code> it also disables the grant tables used for authentication. You might think that this way the MySql server will deny every access attempt, but it will do the very contrary: it will allow any!<br>That’s in fact where the trick lies: this way we are able to login to MySql as root (even if we don’t know the password) and edit the MySql users table to reset the root user password.</p>\n<p>Yeah, I didn’t think this was possible before discovering it. But it is, and, even if it feels “insecure”, it might be useful in cases like this.</p>\n<h4 id=\"3-Login-as-root\"><a href=\"#3-Login-as-root\" class=\"headerlink\" title=\"3. Login as root\"></a>3. Login as root</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p mysql</div></pre></td></tr></table></figure>\n<p>It will ask you for a password… Yes, you get it! You can enter whatever you want and it will always grant you access as root!<br>The last argument (<code>mysql</code>) specifies you want to access the MySql internal database (where user credentials are stored).</p>\n<h4 id=\"4-Change-the-root-password\"><a href=\"#4-Change-the-root-password\" class=\"headerlink\" title=\"4. Change the root password\"></a>4. Change the root password</h4><p>You’re using the MySql shell now. Just run:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">update user set password=PASSWORD(&quot;NEW-ROOT-PASSWORD&quot;) where User=&quot;root&quot;;</div><div class=\"line\">exit;</div></pre></td></tr></table></figure>\n<p>You need to change the <code>&quot;NEW-ROOT-PASSWORD&quot;</code> with a password of your choice (obviously).</p>\n<h4 id=\"5-Restart-MySql\"><a href=\"#5-Restart-MySql\" class=\"headerlink\" title=\"5. Restart MySql\"></a>5. Restart MySql</h4><p>You’re back in your bash shell:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mysql restart</div></pre></td></tr></table></figure>\n<p>This will restart the MySql server and will enable the security checks again.</p>\n<p>So that’s all! You can now login into your MySql server with the new password! And try to not lose it again, at least for a while ;)</p>\n"},{"uuid":"a9fcc25f-c805-4d20-b449-da2d0bacebe4","layout":"post","title":"My Universal JavaScript Web Applications talk at Codemotion Milan 2016","slug":"my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2","subtitle":null,"date":"2016-11-26T09:53:55.000Z","updated":"2016-12-12T23:44:38.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/11/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nYesterday (25/11/2016) I had the pleasure of delivering a talk about Universal JavaScript at [Codemotion Milan 2016](http://milan2016.codemotionworld.com). It was a great fun and I was very happy to meet such a big pool of technology enthusiasts and professionals all in one places. I'm already looking forward for the next edition!\n\n## Video\n\n**Update** (12-12-2016): a video recording of the talk has been published by the folks at Codemotion:\n\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\">\n<iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/9z7k3-Or7EA\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n## Slides deck\n\nIf you are interested in my talk you can find the slides on [Slides.com](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016):\n\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\">\n<iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"//slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n\n\n## Commentary\n\nHere follows also a quite detailed kind of commentary for every slide (from my notes), so you can easily understand all the concepts discussed during the presentation.\n\n### [1.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/1)\n\nHello everybody, I am Luciano (also known as \"[lmammino](https://github.com/lmammino)\" or \"[loige](https://twitter.com/loige)\" on GitHub and Twitter).\nI am a software engineer at [Planet9 Energy](http://planet9energy.com), a new electricity provider that is focused\non using new technologies to give industrial and consumer customers more visibility over\ntheir bills and at the same time enabling new ways to perform energy trading very efficiently.\n\nMe and my team are currently building most of the infrastructure using a serverless approach\nand we make heavy use of AWS lambda and the serverless framework. If you are interested\nin these topics please catch up with me after this talk.\n\nI am also the co-author of the book \"[Node.js Design Patterns Second Edition](https://www.nodejsdesignpatterns.com)\" together with [Mario Casciaro](https://twitter.com/mariocasciaro). If you are interested in re-enforcing your knowledge of design patterns, and most importantly discover how you can get the best out of them in the Node.js and JavaScript land, this book is probably for you. For what concerns this talk, the book also features an entire chapter about Universal JavaScript.\n\n### [2.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/2)\n\nSo today we are going to be talking about Universal JavaScript for Web applications.\n\nFirst of all we will see what \"universal\" really means, then we will discuss who is currently using it and why. Then we will move into a quick overview of the main challenges to face when dealing with universal JavaScript applications. Finally, in the second part of this talk, we will see a practical example about how to build a Universal JavaScript Web Application. At first we will build the front-end only version and then by making it \"universal\".\n\n### [3.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/3)\n\nSo, for some time, what we call today Universal JavaScript was recognised as \"Isomorphic\" JavaScript. After some discussions it seems that the JavaScript community agreed on using the term \"Universal\" instead. If you are interested in the full story you can read most of it at this link [here](http://bit.ly/universaljs).\n\nAnyway, what do we really mean with the term \"Universal\"? I am going to phrase my own definition here... So please don't take it as an academic one...\n\n> Universal Javascript means writing JavaScript code that can run on different JavaScript runtimes over different contexts. For example on the Browser as well as on the Server.\n\n### [4.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/4)\n\nBut that's not limited only to the web, for example we can talk about Universal JavaScript even when building desktop or mobile applications and some people are even attempting experiments to control hardware devices directly with JavaScript.\nDuring the course of this talk we are going to focus only on Web development though.\n\n### [5.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/5)\n\nWhat are the main advantages of Universal JavaScript? First of all it allows you to deal with a JavaScript only development environment. Having JavaScript both on the Browser and on the Server removes the cost of language switching. This of course happens with any Node.js application, even if not Universal. When it gets to universal you are going to have most of the same code shared between frontend and backend, so in that case your code base would probably contain less duplication and thus will result to be more maintainable.\nAlso with universal JavaScript you will achieve better Serach Engines Optimization, because the server will be able to render the full content of you pages and not just that but it will also be able to return proper http codes in any situation, so cases like \"page not found\" or \"redirects\" can be resolved correctly by Google and the other crawlers.\nFinally we will also achieve a better \"perceived\" load time. This is a side effect of server rendering, because when the browser finish to download the HTML of the page it will have already most of the information needed to render the page, so the classical flickering effect of classic single page applications would be less likely to happen.\n\n### [6.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/6)\n\nJust to mention a few, the very first early adopter of Universal JavaScript were Netflix, Airbnb, Wordpress (that used this approach to build the [new administration panel for wordpress.com](https://github.com/Automattic/wp-calypso)) and Dropbox.\n\n### [7.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/7)\n\nSo yes, everything looks great, but if you already heard about it, you probably also heard that it's very complicated...\nLet's see why many people think so...\n\n### [8.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/8)\n\nWell, there are some specific pain point to address when it comes to build a Universal application. First of all you will need to have a nice way to write your code (generally in the form of modules) once and make it available between the backend and the frontend. The two environments, even if similar, are not the same. For example they load files and resources in different ways so we need standards and tools in order to \"transform\" the code in a way that is loadable and functional in both environments.\nThe current open source solutions are [UMD](https://github.com/umdjs/umd), which stands for Universal Module Definition, [SystemJS](https://github.com/systemjs/systemjs) that allows to load modules asynchronously and [Browserify](http://browserify.org) and [Webpack](https://webpack.github.io) as module builder for bringing CommonJs/Node.js modules to the browser.\n\n\n### [9.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/9)\n\nAnother issue is universal rendering. When it comes to JavaScript heavy applications we build most of the HTML needed from JavaScript itself (generally using the concept of components). In a regular Single Page Application these components are rendered only by the browser, after the page is fully loaded. With Unviersal JavaScript we want to be able to perform the generation of the full HTML from the server before the page is served to the browser. All the major new framworks like React and Angular 2 supports way to achieve Universal Rendering and there's a new interesting player in this field called Next.js.\n\n### [10.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/10)\n\nA similar problem is universal routing. We want both the browser and the server to be able to render specific view given specific urls. Ideally we don't want any code duplication, so the same mechanism to define routes and actions should be defined once and should function in a seamless way in both environments.\nThere are several interesting libraries trying to address this problem and one of the most famous, at least in the React land, is React Router.\n\n### [11.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/11)\n\nAgain a similar problems comes in relation to loading the data (often in the form of an API) needed by the application.\nIn these cases one of the most common solutions is to have an api that is accessible both from the server and the client and load it with an universal code base using a library like Axios or Universal Fetch.\n\n### [12.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/12)\n\nFinally one of the last big pain points is Universal State management. There is a tendency to define the full state of an application in a single object generally using libraries like Redux or Cerebral. We want to keep doing this in a way that is fully compatible and functional both on the server and the client.\n\n### [13.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/13)\n\nAnd well yes, plain old JavaScript doesn't seem to be enough these days. We often want to use some high level abstraction or language extension like Flow or JSX or even other new languages able to compile directly to JavaScript like TypeScript or Elm.\nThis is not strictly necessary but it might make the developer experience way better.\n\n### [14.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/14)\n\nYeah I know the current JavaScript panorama sounds a bit too broad and scary...\n\n### [15.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/15)\n\nBut let's stop complaining and let's build something together... It doesn't need to be perfect but I will show you that it's totally possible to build a non trivial Universal application in about 30 minutes.\n\n### [16.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/16)\n\nThe tools that we are going to use for this experiment are Webpack, React, ReactRouter and express.\n\n### [17.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/17)\n\nI was for years a Judo practitioner and I am still a big fan of this sport, so we are going to build an application called Judo Heroes. I already published a version of this application, you can see the URL here (judo-heroes.herokuapp.com) and I also wrote an entire tutorial based on it on Scotch.io (bit.ly/judo-heroes-tutorial).\n\n### [18.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/18)\n\nAs you can see the application is very simple ad allows us to display some of the best Judo Olympic athletes and read some details about them: their nationality, the year of birth, some pictures and the list of all the medals they won.\n\n### [19.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/19)\n\nLet's see how Universal comes into play with this app. If we load a specific athlete page, we can see, using the chrome developer tools all the loaded resources.\n\n### [20.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/20)\n\nThen, if from the interface we switch to another athlete, the application loads only the new resources. In this case the images for the new athlete.\n\n### [21.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/21)\n\nAnd also, if we refresh the page, the server will render the full html for the athlete page straight away. We can see this here with a curl command.\n\n### [22.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/22)\n\nOk, let's start looking at some code. Fist of all let's see out data set. For the sake of this tutorial we will keep things simple and rely on a JavaScript module that exports an array of athletes. Every athletes is an object which contains all the information we need in order to display an athlete: name, country, birth year, images, list of medals, etc.\nWe can easily require this module everywhere we want to access the data.\n\n### [23.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/23)\n\nNow let's build all the React components that define our interface.\n\n### [24.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/24)\n\nThe first component that we are going to see is the `Layout` component, which has the goal of defining the markup of the global layout we want to use in our application. It contains a static header and a static footer and a variable content.\n\n### [25.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/25)\n\nThis is more or less how a component looks like in React. We basically needs to define a render function that receives some parameters (called props) and returns the markup needed to render the component view. This markup looks like a mix of HTML and JavaScript and it's called *JSX*. In this case we expect to see:\n\n  a. An header section\n  b. A variable content (notice the variable `props.children`)\n  c. And the footer section\n\n### [26.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/26)\n\nNow let's move to the `IndexPage` component page. This component has the goal to show a card based navigation bar that allows us to select an athlete.\n\n### [27.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/27)\n\nThe first thing to notice is that we are importing our data module to get the list of all the athletes. Then inside our render method we iterate over this list and, for every athlete in the list, we reference another component called `AthletePreview` passing to it all the data representing the current athlete.\n\n### [28.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/28)\n\nSo the `AthletePreview` component represents a card in the navigation bar of the `IndexPage`. Let's jump to the code.\n\n### [29.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/29)\n\nLet's use this component to understand better how React and its JSX syntax work.\n\n  a. As I told you we have a function that has the goal of providing the JSX markup needed by React to render the component.\n  b. The main *tag* that we use is `Link` which represents a React Router component. This will make all the component *clickable* and will link it to a specific React route. We will see later in greater detail how the routing functionality works. The only important thing you need to notice for now is that the attribute `to` uses an interpolated variable to build the link reference. We reference here the `props` object which will contain all the attributes passed to this component by the parent component.\n  c. Then we display the headshot of the athlete, again we access the object `props` to fetch the picture for the current athlete.\n  d. We do the same to display the name of the athlete.\n  e. Finally we also define the markup to render a little medal icon and the count of the medals won by the athlete.\n\n### [30.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/30)\n\nNow let's move to the `AthletePage` which represents the detail page of an athlete.\n\n### [31.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/31)\n\nA lot of code here. But don't worry this is the biggest component we will see today and at the end it's quite simple. So let's zoom into the important details.\n\n### [32.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/32)\n\nThis component as well has access to all our data. It receives the id of the current athlete to display in `props.params.id`, data that will be populate by the routing layer given the current url.\n\n  a. We use this information to verify if the current id really exists in our little static database object. If not we simply render a `NotFoundPage` component that we will see later. If the athlete exists we will have all its data in the `athlete` variable.\n  b. If we have found the athlete we first render a custom component called `AthletesMenu`.\n  c. Then we have the markup that define the header of the page (the one with the big background image and the picture of the current athlete).\n\n### [33.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/33)\n\n  d. Then we have a the markup needed to render the athlete description.\n  e. Notice that inside this markup we reference another custom component called `Flag` which is the one responsible for rendering the flag icon inside the description.\n  f. In the next section we iterate over all the athlete medals and display them...\n  g. Using a custom component called `Medal`\n  h. The last bit is a link that redirects to the index page.\n\n### [34.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/34)\n\nThis is the `AthletesMenu` component that we referenced in the previous component.\n\n### [35.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/35)\n\nIn its code we access again to our data module and we iterate over it.\n\n  a. For every athlete we reference a `Link` component pointing to the athlete page. It's worth noticing that we use the attribute `activeClassName`. This is a very handy utility of the ReactRouter module that allows us to apply to the link a specific class to the link tag when the linked route matches the current URL. With this utility get very easy to create some CSS code to style active links differently from the other ones.\n\n### [36.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/36)\n\nThis is the `Flag` component we mentioned some slides before.\n\n### [37.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/37)\n\nThe code is very simple. We just need to use the `props.icon` to render the image tag properly. We also have an optional prop called `showName` that, if set to a *truthy* value, tells the component to also display the name of the country along the flag icon.\n\n### [38.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/38)\n\nFinally let's see our `Medal` component.\n\n### [39.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/39)\n\nIn this component, before the render function we have a little dictionary object that we use to map medal types ids to it's literal description ('G' for 'Gold', 'S' for 'Silver', etc.). Then we reference all the properties we receive from the parent component to display the medal year, the city, the name of the competition and the category.\n\n\n### [40.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/40)\n\nFinally let's have a look at out super simple `NotFoundPage` component. This is probably the simplest one as we don't reference any dynamic property but we just render some markup to display a very simple error page with a link to the index.\n\n### [41.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/41)\n\nOk, enough React components! I hope you are not bored already...\nLet's move to the routing functionality.\n\n### [42.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/42)\n\nIn our application we will have two different routes:\n\n  a. The index page, mapped to the main route\n  b. and the athlete page which uses the athlete `id` as parameter.\n\n### [43.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/43)\n\nin our `Routes` components we define these two routes. Using ReactRouter we can define the routes hierarchy using JSX.\n\n  - We have a main route that links the `Layout` component. This will make sure that every component will use our default layout.\n  - Then the common index route is associated to our `IndexPage` component.\n  - We than map the `AthletePage` component to the path `athlete/:id`\n  - And finally we provide a fallback path that matches all the other routers and renders our `NotFoundPage` component.\n\n### [44.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/44)\n\nLet's create the real router component now.\n\n  a. This component imports our previously defined hierarchy of routes.\n  b. It uses the hashHistory mechanism to detect the current router. We will see later what this really means.\n  c. We reference our routing hierarchy through the `routes` attribute.\n  d. Finally we use a little function to scroll the page back up every time we move dynamically to a new route. This will make sure that the transition between one page an another looks natural.\n\n### [45.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/45)\n\nSo now we have React components and routing. Let's combine them together and finalize our client app.\n\n### [46.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/46)\n\nThe app-client represent our browser application.\n\n  a. It loads our router\n  b. and renders it inside the tag with id `main`.\n\n### [47.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/47)\n\nLet's see how the main html of our application looks like\n\n### [48.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/48)\n\nWe basically have some regular meta headers and a link to a stylesheet. Then in the body:\n\n  a. We have our `main` tag which will contain all our react app\n  b. The bundled script that contains all the code needed to run our app in the frontend.\n\n### [49.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/49)\n\nLet's how we can build this bundle using Babel and Webpack.\n\n### [50.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/50)\n\nOur Babel config looks extremely simple:\n\n  a. We just need to specify that we want to transpile react code and EcmaScript 2015 to regular ES5 code.\n\nOur webpack config is a bit more elaborate:\n\n  b. First thing we need to specify is the entry point of our app. Webpack will start to crawl through all the used dependencies starting from this file.\n  c. Then we specify where we want to output the resulting bundled file.\n  d. And finally we specify that we want to process every file in our source directory using babel.\n\n### [51.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/51)\n\nTo create our bundle we just need to call `webpack` from the command line.\n\n### [52.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/52)\n\nThe last bit we need before seeing our application working is to write a small server app using Express that allows us to serve the static files that compose our app at this stage. We can do this using the `Express.static` middleware.\n\n### [53.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/53)\n\nLet's finally test our app!\n\n(Show frontend only app, show routing with hashes, code only rendered on the client and 404 not understood)\n\n### [54.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/54)\n\nSo What we have done so far?\n\n  1. We defined our views combining a bunch of different React components\n  2. We added routing using React Router\n  3. We compiled our application for the browser using Babel and Webpack\n  4. Then we executed the application served through a static Express server\n\n### [55.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/55)\n\nOk nothing so exiting so far, let's now add Server Side Rendering and Routing!\n\n### [56.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/56)\n\nWhen we executed our front-end only application you probably noticed that our URLS were looking a bit weird. The only changing part was prefixed by an hashtag symbol. That's because we were using the `hashHistory` mode in our router. This route works very well for frontend-only applications, because it makes shareable link pointing to the right dynamic section, even when in the server you only have an `index.html` page.\n\nWe need now to switch to full routes (without hashtags) and to do so we can simply change our `hashHistory` to `browserHistory`.\n\n### [57.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/57)\n\nNow we also want to convert our old `index.html` to a generic *ejs* template. Our new file looks almost identical, with the only exception that inside our `main` block we have now an *ejs* template variable called `markup` that allows us to inject arbitrary html code into it. We are going to use this to inject the React generated markup when rendering from the server.\n\n### [58.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/58)\n\nNow the last step is to update our server application to support universal routing and rendering. To do so we need to import some libraries from React, ReactDom e ReactRouter. We also import our routes from our frontend-only app and the `NotFoundPage` component.\n\nFinally we also enable the support for *ejs* templates.\n\n### [59.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/59)\n\nNow let's get to the most interesting part, let's see how the universal routing and rendering works.\n\nThe important part of the code here is the Express route defined with `app.get('*', (req, res) => {...})`.\n\nThis is an Express *catch-all* route that will intercept all the *GET* requests to every URL in the server (not previously matched to a static file). Inside this route, we take care of delegating the routing logic to the React Router `match` function.\n\n`match` accepts two parameters: the first one is a configuration object and the second is a callback function. The configuration object must have two keys:\n\n  - `routes`: used to pass the React Router routes configuration. Here, we are passing the exact same configuration that we used for the client-side rendering.\n  - `location`: This is used to specify the currently requested URL.\n\nThe callback function is called at the end of the matching. It will receive three arguments: `error`, `redirectLocation` and `renderProps`. We can use them to determine what exactly the result of the match operation was.\n\nWe can have four different cases that we need to handle:\n\n  1. The first case is when we have an error during the routing resolution. To handle this case, we simply return a 500 internal server error response to the browser.\n  2. The second case is when we match a route that is a redirect route. In this case, we need to create a server redirect message (302 redirect) to tell the browser to go to the new destination (this is not really happening in our application because we are not using redirect routes in our React Router configuration, but it's good to have it ready in case we decide to keep evolving our application).\n  3. The third case is when we match a route and we have to render the associated component. In this case, the argument renderProps is an object that contains the data we need to use to render the component. The component we are rendering is RouterContext (contained in the React Router module), which is responsible for rendering the full component tree using the values in renderProps.\n  4. The last case is when the route is not matched, and here we can simply return a 404 not found error to the browser.\n\nThis is the core of our server- side routing mechanism and we use the ReactDOM `renderToString` function to be able to render the HTML code that represents the component associated to the currently matched route.\n\nFinally, we inject the resulting HTML into the `index.ejs` template we defined before to obtain the full HTML page that we send to the browser.\n\n### [60.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/60)\n\nLet's test the app again.\n\n(Show universal routing and rendering working when changing and reloading pages).\n\n### [61.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/61)\n\nQuick recap about what was done in this presentation:\n\n  - Create a Single Page Application with React and React Router\n  - Add server side routing and rendering using React and React Router libraries in out Express app\n\n### [62.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/62)\n\nWhat can we do next to have a fully-fledged Universal app.\n\n  - Add Universal Data Retrieval\n  - Add Universal State Management\n\n### [63.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/63)\n\nThanks everybody for being here!\n\n## Thanks\n\nBig thanks to the organizers of the event for giving me this chance to be there on the stage. Also great thanks to my great friends Alessandro Cinelli ([@cirpo](https://twitter.com/cirpo)), Andrea Mangano ([@andreaman87](https://twitter.com/andreaman87)), Aleksandar Čambas and Peter Caulfield ([@quasi_modal](https://twitter.com/quasi_modal)) for reviewing my slide deck and for giving me tons of advices!\n\n### Some photos from Twitter\n\nGigantic thanks also to whoever took pictures and shared them on Twitter, some here:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/loige\">@loige</a> on stage <a href=\"https://twitter.com/hashtag/codemotion?src=hash\">#codemotion</a> Milan! Rock on! <a href=\"https://t.co/9Y97YENhIG\">pic.twitter.com/9Y97YENhIG</a></p>&mdash; cirpo (@cirpo) <a href=\"https://twitter.com/cirpo/status/802170435425234948\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\">It&#39;s time of <a href=\"https://twitter.com/hashtag/universaljs?src=hash\">#universaljs</a> <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> with <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/2XrAZFOBRe\">pic.twitter.com/2XrAZFOBRe</a></p>&mdash; Andrea Mangano (@andreaman87) <a href=\"https://twitter.com/andreaman87/status/802170179379752960\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"it\" dir=\"ltr\">Ottimo talk, su <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a>. Forse le più belle slide mai viste. Chiare ed essenziali <a href=\"https://twitter.com/hashtag/Codemotion?src=hash\">#Codemotion</a> <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/DhCRV8NPMX\">pic.twitter.com/DhCRV8NPMX</a></p>&mdash; Daniele Montagni (@dmontagni) <a href=\"https://twitter.com/dmontagni/status/802182660189724672\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI hope you liked this article and that you are now somehow confident that building universal JavaScript application is not that hard... you just need to start somewhere!\nFeel free to leave any question or comment below on the comments box.\n\nCheers, see you next time! 🍻\n\n","source":"_posts/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.md","raw":"uuid:             a9fcc25f-c805-4d20-b449-da2d0bacebe4\nlayout:           post\ntitle:            'My Universal JavaScript Web Applications talk at Codemotion Milan 2016'\nslug:             my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2\nsubtitle:         null\ndate:             '2016-11-26T09:53:55.000Z'\nupdated:          '2016-12-12T23:44:38.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/11/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Slides\n  - Talk\n  - Node.js\n  - JavaScript\n  - React\n\n---\n\nYesterday (25/11/2016) I had the pleasure of delivering a talk about Universal JavaScript at [Codemotion Milan 2016](http://milan2016.codemotionworld.com). It was a great fun and I was very happy to meet such a big pool of technology enthusiasts and professionals all in one places. I'm already looking forward for the next edition!\n\n## Video\n\n**Update** (12-12-2016): a video recording of the talk has been published by the folks at Codemotion:\n\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\">\n<iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/9z7k3-Or7EA\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n## Slides deck\n\nIf you are interested in my talk you can find the slides on [Slides.com](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016):\n\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\">\n<iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"//slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n\n\n## Commentary\n\nHere follows also a quite detailed kind of commentary for every slide (from my notes), so you can easily understand all the concepts discussed during the presentation.\n\n### [1.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/1)\n\nHello everybody, I am Luciano (also known as \"[lmammino](https://github.com/lmammino)\" or \"[loige](https://twitter.com/loige)\" on GitHub and Twitter).\nI am a software engineer at [Planet9 Energy](http://planet9energy.com), a new electricity provider that is focused\non using new technologies to give industrial and consumer customers more visibility over\ntheir bills and at the same time enabling new ways to perform energy trading very efficiently.\n\nMe and my team are currently building most of the infrastructure using a serverless approach\nand we make heavy use of AWS lambda and the serverless framework. If you are interested\nin these topics please catch up with me after this talk.\n\nI am also the co-author of the book \"[Node.js Design Patterns Second Edition](https://www.nodejsdesignpatterns.com)\" together with [Mario Casciaro](https://twitter.com/mariocasciaro). If you are interested in re-enforcing your knowledge of design patterns, and most importantly discover how you can get the best out of them in the Node.js and JavaScript land, this book is probably for you. For what concerns this talk, the book also features an entire chapter about Universal JavaScript.\n\n### [2.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/2)\n\nSo today we are going to be talking about Universal JavaScript for Web applications.\n\nFirst of all we will see what \"universal\" really means, then we will discuss who is currently using it and why. Then we will move into a quick overview of the main challenges to face when dealing with universal JavaScript applications. Finally, in the second part of this talk, we will see a practical example about how to build a Universal JavaScript Web Application. At first we will build the front-end only version and then by making it \"universal\".\n\n### [3.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/3)\n\nSo, for some time, what we call today Universal JavaScript was recognised as \"Isomorphic\" JavaScript. After some discussions it seems that the JavaScript community agreed on using the term \"Universal\" instead. If you are interested in the full story you can read most of it at this link [here](http://bit.ly/universaljs).\n\nAnyway, what do we really mean with the term \"Universal\"? I am going to phrase my own definition here... So please don't take it as an academic one...\n\n> Universal Javascript means writing JavaScript code that can run on different JavaScript runtimes over different contexts. For example on the Browser as well as on the Server.\n\n### [4.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/4)\n\nBut that's not limited only to the web, for example we can talk about Universal JavaScript even when building desktop or mobile applications and some people are even attempting experiments to control hardware devices directly with JavaScript.\nDuring the course of this talk we are going to focus only on Web development though.\n\n### [5.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/5)\n\nWhat are the main advantages of Universal JavaScript? First of all it allows you to deal with a JavaScript only development environment. Having JavaScript both on the Browser and on the Server removes the cost of language switching. This of course happens with any Node.js application, even if not Universal. When it gets to universal you are going to have most of the same code shared between frontend and backend, so in that case your code base would probably contain less duplication and thus will result to be more maintainable.\nAlso with universal JavaScript you will achieve better Serach Engines Optimization, because the server will be able to render the full content of you pages and not just that but it will also be able to return proper http codes in any situation, so cases like \"page not found\" or \"redirects\" can be resolved correctly by Google and the other crawlers.\nFinally we will also achieve a better \"perceived\" load time. This is a side effect of server rendering, because when the browser finish to download the HTML of the page it will have already most of the information needed to render the page, so the classical flickering effect of classic single page applications would be less likely to happen.\n\n### [6.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/6)\n\nJust to mention a few, the very first early adopter of Universal JavaScript were Netflix, Airbnb, Wordpress (that used this approach to build the [new administration panel for wordpress.com](https://github.com/Automattic/wp-calypso)) and Dropbox.\n\n### [7.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/7)\n\nSo yes, everything looks great, but if you already heard about it, you probably also heard that it's very complicated...\nLet's see why many people think so...\n\n### [8.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/8)\n\nWell, there are some specific pain point to address when it comes to build a Universal application. First of all you will need to have a nice way to write your code (generally in the form of modules) once and make it available between the backend and the frontend. The two environments, even if similar, are not the same. For example they load files and resources in different ways so we need standards and tools in order to \"transform\" the code in a way that is loadable and functional in both environments.\nThe current open source solutions are [UMD](https://github.com/umdjs/umd), which stands for Universal Module Definition, [SystemJS](https://github.com/systemjs/systemjs) that allows to load modules asynchronously and [Browserify](http://browserify.org) and [Webpack](https://webpack.github.io) as module builder for bringing CommonJs/Node.js modules to the browser.\n\n\n### [9.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/9)\n\nAnother issue is universal rendering. When it comes to JavaScript heavy applications we build most of the HTML needed from JavaScript itself (generally using the concept of components). In a regular Single Page Application these components are rendered only by the browser, after the page is fully loaded. With Unviersal JavaScript we want to be able to perform the generation of the full HTML from the server before the page is served to the browser. All the major new framworks like React and Angular 2 supports way to achieve Universal Rendering and there's a new interesting player in this field called Next.js.\n\n### [10.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/10)\n\nA similar problem is universal routing. We want both the browser and the server to be able to render specific view given specific urls. Ideally we don't want any code duplication, so the same mechanism to define routes and actions should be defined once and should function in a seamless way in both environments.\nThere are several interesting libraries trying to address this problem and one of the most famous, at least in the React land, is React Router.\n\n### [11.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/11)\n\nAgain a similar problems comes in relation to loading the data (often in the form of an API) needed by the application.\nIn these cases one of the most common solutions is to have an api that is accessible both from the server and the client and load it with an universal code base using a library like Axios or Universal Fetch.\n\n### [12.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/12)\n\nFinally one of the last big pain points is Universal State management. There is a tendency to define the full state of an application in a single object generally using libraries like Redux or Cerebral. We want to keep doing this in a way that is fully compatible and functional both on the server and the client.\n\n### [13.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/13)\n\nAnd well yes, plain old JavaScript doesn't seem to be enough these days. We often want to use some high level abstraction or language extension like Flow or JSX or even other new languages able to compile directly to JavaScript like TypeScript or Elm.\nThis is not strictly necessary but it might make the developer experience way better.\n\n### [14.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/14)\n\nYeah I know the current JavaScript panorama sounds a bit too broad and scary...\n\n### [15.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/15)\n\nBut let's stop complaining and let's build something together... It doesn't need to be perfect but I will show you that it's totally possible to build a non trivial Universal application in about 30 minutes.\n\n### [16.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/16)\n\nThe tools that we are going to use for this experiment are Webpack, React, ReactRouter and express.\n\n### [17.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/17)\n\nI was for years a Judo practitioner and I am still a big fan of this sport, so we are going to build an application called Judo Heroes. I already published a version of this application, you can see the URL here (judo-heroes.herokuapp.com) and I also wrote an entire tutorial based on it on Scotch.io (bit.ly/judo-heroes-tutorial).\n\n### [18.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/18)\n\nAs you can see the application is very simple ad allows us to display some of the best Judo Olympic athletes and read some details about them: their nationality, the year of birth, some pictures and the list of all the medals they won.\n\n### [19.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/19)\n\nLet's see how Universal comes into play with this app. If we load a specific athlete page, we can see, using the chrome developer tools all the loaded resources.\n\n### [20.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/20)\n\nThen, if from the interface we switch to another athlete, the application loads only the new resources. In this case the images for the new athlete.\n\n### [21.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/21)\n\nAnd also, if we refresh the page, the server will render the full html for the athlete page straight away. We can see this here with a curl command.\n\n### [22.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/22)\n\nOk, let's start looking at some code. Fist of all let's see out data set. For the sake of this tutorial we will keep things simple and rely on a JavaScript module that exports an array of athletes. Every athletes is an object which contains all the information we need in order to display an athlete: name, country, birth year, images, list of medals, etc.\nWe can easily require this module everywhere we want to access the data.\n\n### [23.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/23)\n\nNow let's build all the React components that define our interface.\n\n### [24.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/24)\n\nThe first component that we are going to see is the `Layout` component, which has the goal of defining the markup of the global layout we want to use in our application. It contains a static header and a static footer and a variable content.\n\n### [25.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/25)\n\nThis is more or less how a component looks like in React. We basically needs to define a render function that receives some parameters (called props) and returns the markup needed to render the component view. This markup looks like a mix of HTML and JavaScript and it's called *JSX*. In this case we expect to see:\n\n  a. An header section\n  b. A variable content (notice the variable `props.children`)\n  c. And the footer section\n\n### [26.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/26)\n\nNow let's move to the `IndexPage` component page. This component has the goal to show a card based navigation bar that allows us to select an athlete.\n\n### [27.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/27)\n\nThe first thing to notice is that we are importing our data module to get the list of all the athletes. Then inside our render method we iterate over this list and, for every athlete in the list, we reference another component called `AthletePreview` passing to it all the data representing the current athlete.\n\n### [28.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/28)\n\nSo the `AthletePreview` component represents a card in the navigation bar of the `IndexPage`. Let's jump to the code.\n\n### [29.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/29)\n\nLet's use this component to understand better how React and its JSX syntax work.\n\n  a. As I told you we have a function that has the goal of providing the JSX markup needed by React to render the component.\n  b. The main *tag* that we use is `Link` which represents a React Router component. This will make all the component *clickable* and will link it to a specific React route. We will see later in greater detail how the routing functionality works. The only important thing you need to notice for now is that the attribute `to` uses an interpolated variable to build the link reference. We reference here the `props` object which will contain all the attributes passed to this component by the parent component.\n  c. Then we display the headshot of the athlete, again we access the object `props` to fetch the picture for the current athlete.\n  d. We do the same to display the name of the athlete.\n  e. Finally we also define the markup to render a little medal icon and the count of the medals won by the athlete.\n\n### [30.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/30)\n\nNow let's move to the `AthletePage` which represents the detail page of an athlete.\n\n### [31.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/31)\n\nA lot of code here. But don't worry this is the biggest component we will see today and at the end it's quite simple. So let's zoom into the important details.\n\n### [32.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/32)\n\nThis component as well has access to all our data. It receives the id of the current athlete to display in `props.params.id`, data that will be populate by the routing layer given the current url.\n\n  a. We use this information to verify if the current id really exists in our little static database object. If not we simply render a `NotFoundPage` component that we will see later. If the athlete exists we will have all its data in the `athlete` variable.\n  b. If we have found the athlete we first render a custom component called `AthletesMenu`.\n  c. Then we have the markup that define the header of the page (the one with the big background image and the picture of the current athlete).\n\n### [33.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/33)\n\n  d. Then we have a the markup needed to render the athlete description.\n  e. Notice that inside this markup we reference another custom component called `Flag` which is the one responsible for rendering the flag icon inside the description.\n  f. In the next section we iterate over all the athlete medals and display them...\n  g. Using a custom component called `Medal`\n  h. The last bit is a link that redirects to the index page.\n\n### [34.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/34)\n\nThis is the `AthletesMenu` component that we referenced in the previous component.\n\n### [35.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/35)\n\nIn its code we access again to our data module and we iterate over it.\n\n  a. For every athlete we reference a `Link` component pointing to the athlete page. It's worth noticing that we use the attribute `activeClassName`. This is a very handy utility of the ReactRouter module that allows us to apply to the link a specific class to the link tag when the linked route matches the current URL. With this utility get very easy to create some CSS code to style active links differently from the other ones.\n\n### [36.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/36)\n\nThis is the `Flag` component we mentioned some slides before.\n\n### [37.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/37)\n\nThe code is very simple. We just need to use the `props.icon` to render the image tag properly. We also have an optional prop called `showName` that, if set to a *truthy* value, tells the component to also display the name of the country along the flag icon.\n\n### [38.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/38)\n\nFinally let's see our `Medal` component.\n\n### [39.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/39)\n\nIn this component, before the render function we have a little dictionary object that we use to map medal types ids to it's literal description ('G' for 'Gold', 'S' for 'Silver', etc.). Then we reference all the properties we receive from the parent component to display the medal year, the city, the name of the competition and the category.\n\n\n### [40.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/40)\n\nFinally let's have a look at out super simple `NotFoundPage` component. This is probably the simplest one as we don't reference any dynamic property but we just render some markup to display a very simple error page with a link to the index.\n\n### [41.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/41)\n\nOk, enough React components! I hope you are not bored already...\nLet's move to the routing functionality.\n\n### [42.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/42)\n\nIn our application we will have two different routes:\n\n  a. The index page, mapped to the main route\n  b. and the athlete page which uses the athlete `id` as parameter.\n\n### [43.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/43)\n\nin our `Routes` components we define these two routes. Using ReactRouter we can define the routes hierarchy using JSX.\n\n  - We have a main route that links the `Layout` component. This will make sure that every component will use our default layout.\n  - Then the common index route is associated to our `IndexPage` component.\n  - We than map the `AthletePage` component to the path `athlete/:id`\n  - And finally we provide a fallback path that matches all the other routers and renders our `NotFoundPage` component.\n\n### [44.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/44)\n\nLet's create the real router component now.\n\n  a. This component imports our previously defined hierarchy of routes.\n  b. It uses the hashHistory mechanism to detect the current router. We will see later what this really means.\n  c. We reference our routing hierarchy through the `routes` attribute.\n  d. Finally we use a little function to scroll the page back up every time we move dynamically to a new route. This will make sure that the transition between one page an another looks natural.\n\n### [45.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/45)\n\nSo now we have React components and routing. Let's combine them together and finalize our client app.\n\n### [46.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/46)\n\nThe app-client represent our browser application.\n\n  a. It loads our router\n  b. and renders it inside the tag with id `main`.\n\n### [47.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/47)\n\nLet's see how the main html of our application looks like\n\n### [48.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/48)\n\nWe basically have some regular meta headers and a link to a stylesheet. Then in the body:\n\n  a. We have our `main` tag which will contain all our react app\n  b. The bundled script that contains all the code needed to run our app in the frontend.\n\n### [49.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/49)\n\nLet's how we can build this bundle using Babel and Webpack.\n\n### [50.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/50)\n\nOur Babel config looks extremely simple:\n\n  a. We just need to specify that we want to transpile react code and EcmaScript 2015 to regular ES5 code.\n\nOur webpack config is a bit more elaborate:\n\n  b. First thing we need to specify is the entry point of our app. Webpack will start to crawl through all the used dependencies starting from this file.\n  c. Then we specify where we want to output the resulting bundled file.\n  d. And finally we specify that we want to process every file in our source directory using babel.\n\n### [51.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/51)\n\nTo create our bundle we just need to call `webpack` from the command line.\n\n### [52.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/52)\n\nThe last bit we need before seeing our application working is to write a small server app using Express that allows us to serve the static files that compose our app at this stage. We can do this using the `Express.static` middleware.\n\n### [53.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/53)\n\nLet's finally test our app!\n\n(Show frontend only app, show routing with hashes, code only rendered on the client and 404 not understood)\n\n### [54.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/54)\n\nSo What we have done so far?\n\n  1. We defined our views combining a bunch of different React components\n  2. We added routing using React Router\n  3. We compiled our application for the browser using Babel and Webpack\n  4. Then we executed the application served through a static Express server\n\n### [55.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/55)\n\nOk nothing so exiting so far, let's now add Server Side Rendering and Routing!\n\n### [56.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/56)\n\nWhen we executed our front-end only application you probably noticed that our URLS were looking a bit weird. The only changing part was prefixed by an hashtag symbol. That's because we were using the `hashHistory` mode in our router. This route works very well for frontend-only applications, because it makes shareable link pointing to the right dynamic section, even when in the server you only have an `index.html` page.\n\nWe need now to switch to full routes (without hashtags) and to do so we can simply change our `hashHistory` to `browserHistory`.\n\n### [57.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/57)\n\nNow we also want to convert our old `index.html` to a generic *ejs* template. Our new file looks almost identical, with the only exception that inside our `main` block we have now an *ejs* template variable called `markup` that allows us to inject arbitrary html code into it. We are going to use this to inject the React generated markup when rendering from the server.\n\n### [58.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/58)\n\nNow the last step is to update our server application to support universal routing and rendering. To do so we need to import some libraries from React, ReactDom e ReactRouter. We also import our routes from our frontend-only app and the `NotFoundPage` component.\n\nFinally we also enable the support for *ejs* templates.\n\n### [59.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/59)\n\nNow let's get to the most interesting part, let's see how the universal routing and rendering works.\n\nThe important part of the code here is the Express route defined with `app.get('*', (req, res) => {...})`.\n\nThis is an Express *catch-all* route that will intercept all the *GET* requests to every URL in the server (not previously matched to a static file). Inside this route, we take care of delegating the routing logic to the React Router `match` function.\n\n`match` accepts two parameters: the first one is a configuration object and the second is a callback function. The configuration object must have two keys:\n\n  - `routes`: used to pass the React Router routes configuration. Here, we are passing the exact same configuration that we used for the client-side rendering.\n  - `location`: This is used to specify the currently requested URL.\n\nThe callback function is called at the end of the matching. It will receive three arguments: `error`, `redirectLocation` and `renderProps`. We can use them to determine what exactly the result of the match operation was.\n\nWe can have four different cases that we need to handle:\n\n  1. The first case is when we have an error during the routing resolution. To handle this case, we simply return a 500 internal server error response to the browser.\n  2. The second case is when we match a route that is a redirect route. In this case, we need to create a server redirect message (302 redirect) to tell the browser to go to the new destination (this is not really happening in our application because we are not using redirect routes in our React Router configuration, but it's good to have it ready in case we decide to keep evolving our application).\n  3. The third case is when we match a route and we have to render the associated component. In this case, the argument renderProps is an object that contains the data we need to use to render the component. The component we are rendering is RouterContext (contained in the React Router module), which is responsible for rendering the full component tree using the values in renderProps.\n  4. The last case is when the route is not matched, and here we can simply return a 404 not found error to the browser.\n\nThis is the core of our server- side routing mechanism and we use the ReactDOM `renderToString` function to be able to render the HTML code that represents the component associated to the currently matched route.\n\nFinally, we inject the resulting HTML into the `index.ejs` template we defined before to obtain the full HTML page that we send to the browser.\n\n### [60.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/60)\n\nLet's test the app again.\n\n(Show universal routing and rendering working when changing and reloading pages).\n\n### [61.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/61)\n\nQuick recap about what was done in this presentation:\n\n  - Create a Single Page Application with React and React Router\n  - Add server side routing and rendering using React and React Router libraries in out Express app\n\n### [62.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/62)\n\nWhat can we do next to have a fully-fledged Universal app.\n\n  - Add Universal Data Retrieval\n  - Add Universal State Management\n\n### [63.](http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/63)\n\nThanks everybody for being here!\n\n## Thanks\n\nBig thanks to the organizers of the event for giving me this chance to be there on the stage. Also great thanks to my great friends Alessandro Cinelli ([@cirpo](https://twitter.com/cirpo)), Andrea Mangano ([@andreaman87](https://twitter.com/andreaman87)), Aleksandar Čambas and Peter Caulfield ([@quasi_modal](https://twitter.com/quasi_modal)) for reviewing my slide deck and for giving me tons of advices!\n\n### Some photos from Twitter\n\nGigantic thanks also to whoever took pictures and shared them on Twitter, some here:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/loige\">@loige</a> on stage <a href=\"https://twitter.com/hashtag/codemotion?src=hash\">#codemotion</a> Milan! Rock on! <a href=\"https://t.co/9Y97YENhIG\">pic.twitter.com/9Y97YENhIG</a></p>&mdash; cirpo (@cirpo) <a href=\"https://twitter.com/cirpo/status/802170435425234948\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\">It&#39;s time of <a href=\"https://twitter.com/hashtag/universaljs?src=hash\">#universaljs</a> <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> with <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/2XrAZFOBRe\">pic.twitter.com/2XrAZFOBRe</a></p>&mdash; Andrea Mangano (@andreaman87) <a href=\"https://twitter.com/andreaman87/status/802170179379752960\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"it\" dir=\"ltr\">Ottimo talk, su <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a>. Forse le più belle slide mai viste. Chiare ed essenziali <a href=\"https://twitter.com/hashtag/Codemotion?src=hash\">#Codemotion</a> <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/DhCRV8NPMX\">pic.twitter.com/DhCRV8NPMX</a></p>&mdash; Daniele Montagni (@dmontagni) <a href=\"https://twitter.com/dmontagni/status/802182660189724672\">25 novembre 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI hope you liked this article and that you are now somehow confident that building universal JavaScript application is not that hard... you just need to start somewhere!\nFeel free to leave any question or comment below on the comments box.\n\nCheers, see you next time! 🍻\n\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrz00012svvugm7717xd","content":"<p>Yesterday (25/11/2016) I had the pleasure of delivering a talk about Universal JavaScript at <a href=\"http://milan2016.codemotionworld.com\" target=\"_blank\" rel=\"external\">Codemotion Milan 2016</a>. It was a great fun and I was very happy to meet such a big pool of technology enthusiasts and professionals all in one places. I’m already looking forward for the next edition!</p>\n<h2 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h2><p><strong>Update</strong> (12-12-2016): a video recording of the talk has been published by the folks at Codemotion:</p>\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\"><br><iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/9z7k3-Or7EA\" frameborder=\"0\" allowfullscreen></iframe><br></div>\n\n<h2 id=\"Slides-deck\"><a href=\"#Slides-deck\" class=\"headerlink\" title=\"Slides deck\"></a>Slides deck</h2><p>If you are interested in my talk you can find the slides on <a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016\" target=\"_blank\" rel=\"external\">Slides.com</a>:</p>\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\"><br><iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"//slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe><br></div>\n\n\n<h2 id=\"Commentary\"><a href=\"#Commentary\" class=\"headerlink\" title=\"Commentary\"></a>Commentary</h2><p>Here follows also a quite detailed kind of commentary for every slide (from my notes), so you can easily understand all the concepts discussed during the presentation.</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/1\" target=\"_blank\" rel=\"external\">1.</a></h3><p>Hello everybody, I am Luciano (also known as “<a href=\"https://github.com/lmammino\" target=\"_blank\" rel=\"external\">lmammino</a>“ or “<a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">loige</a>“ on GitHub and Twitter).<br>I am a software engineer at <a href=\"http://planet9energy.com\" target=\"_blank\" rel=\"external\">Planet9 Energy</a>, a new electricity provider that is focused<br>on using new technologies to give industrial and consumer customers more visibility over<br>their bills and at the same time enabling new ways to perform energy trading very efficiently.</p>\n<p>Me and my team are currently building most of the infrastructure using a serverless approach<br>and we make heavy use of AWS lambda and the serverless framework. If you are interested<br>in these topics please catch up with me after this talk.</p>\n<p>I am also the co-author of the book “<a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">Node.js Design Patterns Second Edition</a>“ together with <a href=\"https://twitter.com/mariocasciaro\" target=\"_blank\" rel=\"external\">Mario Casciaro</a>. If you are interested in re-enforcing your knowledge of design patterns, and most importantly discover how you can get the best out of them in the Node.js and JavaScript land, this book is probably for you. For what concerns this talk, the book also features an entire chapter about Universal JavaScript.</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/2\" target=\"_blank\" rel=\"external\">2.</a></h3><p>So today we are going to be talking about Universal JavaScript for Web applications.</p>\n<p>First of all we will see what “universal” really means, then we will discuss who is currently using it and why. Then we will move into a quick overview of the main challenges to face when dealing with universal JavaScript applications. Finally, in the second part of this talk, we will see a practical example about how to build a Universal JavaScript Web Application. At first we will build the front-end only version and then by making it “universal”.</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/3\" target=\"_blank\" rel=\"external\">3.</a></h3><p>So, for some time, what we call today Universal JavaScript was recognised as “Isomorphic” JavaScript. After some discussions it seems that the JavaScript community agreed on using the term “Universal” instead. If you are interested in the full story you can read most of it at this link <a href=\"http://bit.ly/universaljs\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p>Anyway, what do we really mean with the term “Universal”? I am going to phrase my own definition here… So please don’t take it as an academic one…</p>\n<blockquote>\n<p>Universal Javascript means writing JavaScript code that can run on different JavaScript runtimes over different contexts. For example on the Browser as well as on the Server.</p>\n</blockquote>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/4\" target=\"_blank\" rel=\"external\">4.</a></h3><p>But that’s not limited only to the web, for example we can talk about Universal JavaScript even when building desktop or mobile applications and some people are even attempting experiments to control hardware devices directly with JavaScript.<br>During the course of this talk we are going to focus only on Web development though.</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/5\" target=\"_blank\" rel=\"external\">5.</a></h3><p>What are the main advantages of Universal JavaScript? First of all it allows you to deal with a JavaScript only development environment. Having JavaScript both on the Browser and on the Server removes the cost of language switching. This of course happens with any Node.js application, even if not Universal. When it gets to universal you are going to have most of the same code shared between frontend and backend, so in that case your code base would probably contain less duplication and thus will result to be more maintainable.<br>Also with universal JavaScript you will achieve better Serach Engines Optimization, because the server will be able to render the full content of you pages and not just that but it will also be able to return proper http codes in any situation, so cases like “page not found” or “redirects” can be resolved correctly by Google and the other crawlers.<br>Finally we will also achieve a better “perceived” load time. This is a side effect of server rendering, because when the browser finish to download the HTML of the page it will have already most of the information needed to render the page, so the classical flickering effect of classic single page applications would be less likely to happen.</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/6\" target=\"_blank\" rel=\"external\">6.</a></h3><p>Just to mention a few, the very first early adopter of Universal JavaScript were Netflix, Airbnb, Wordpress (that used this approach to build the <a href=\"https://github.com/Automattic/wp-calypso\" target=\"_blank\" rel=\"external\">new administration panel for wordpress.com</a>) and Dropbox.</p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/7\" target=\"_blank\" rel=\"external\">7.</a></h3><p>So yes, everything looks great, but if you already heard about it, you probably also heard that it’s very complicated…<br>Let’s see why many people think so…</p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/8\" target=\"_blank\" rel=\"external\">8.</a></h3><p>Well, there are some specific pain point to address when it comes to build a Universal application. First of all you will need to have a nice way to write your code (generally in the form of modules) once and make it available between the backend and the frontend. The two environments, even if similar, are not the same. For example they load files and resources in different ways so we need standards and tools in order to “transform” the code in a way that is loadable and functional in both environments.<br>The current open source solutions are <a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"external\">UMD</a>, which stands for Universal Module Definition, <a href=\"https://github.com/systemjs/systemjs\" target=\"_blank\" rel=\"external\">SystemJS</a> that allows to load modules asynchronously and <a href=\"http://browserify.org\" target=\"_blank\" rel=\"external\">Browserify</a> and <a href=\"https://webpack.github.io\" target=\"_blank\" rel=\"external\">Webpack</a> as module builder for bringing CommonJs/Node.js modules to the browser.</p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/9\" target=\"_blank\" rel=\"external\">9.</a></h3><p>Another issue is universal rendering. When it comes to JavaScript heavy applications we build most of the HTML needed from JavaScript itself (generally using the concept of components). In a regular Single Page Application these components are rendered only by the browser, after the page is fully loaded. With Unviersal JavaScript we want to be able to perform the generation of the full HTML from the server before the page is served to the browser. All the major new framworks like React and Angular 2 supports way to achieve Universal Rendering and there’s a new interesting player in this field called Next.js.</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/10\" target=\"_blank\" rel=\"external\">10.</a></h3><p>A similar problem is universal routing. We want both the browser and the server to be able to render specific view given specific urls. Ideally we don’t want any code duplication, so the same mechanism to define routes and actions should be defined once and should function in a seamless way in both environments.<br>There are several interesting libraries trying to address this problem and one of the most famous, at least in the React land, is React Router.</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/11\" target=\"_blank\" rel=\"external\">11.</a></h3><p>Again a similar problems comes in relation to loading the data (often in the form of an API) needed by the application.<br>In these cases one of the most common solutions is to have an api that is accessible both from the server and the client and load it with an universal code base using a library like Axios or Universal Fetch.</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/12\" target=\"_blank\" rel=\"external\">12.</a></h3><p>Finally one of the last big pain points is Universal State management. There is a tendency to define the full state of an application in a single object generally using libraries like Redux or Cerebral. We want to keep doing this in a way that is fully compatible and functional both on the server and the client.</p>\n<h3 id=\"13\"><a href=\"#13\" class=\"headerlink\" title=\"13.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/13\" target=\"_blank\" rel=\"external\">13.</a></h3><p>And well yes, plain old JavaScript doesn’t seem to be enough these days. We often want to use some high level abstraction or language extension like Flow or JSX or even other new languages able to compile directly to JavaScript like TypeScript or Elm.<br>This is not strictly necessary but it might make the developer experience way better.</p>\n<h3 id=\"14\"><a href=\"#14\" class=\"headerlink\" title=\"14.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/14\" target=\"_blank\" rel=\"external\">14.</a></h3><p>Yeah I know the current JavaScript panorama sounds a bit too broad and scary…</p>\n<h3 id=\"15\"><a href=\"#15\" class=\"headerlink\" title=\"15.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/15\" target=\"_blank\" rel=\"external\">15.</a></h3><p>But let’s stop complaining and let’s build something together… It doesn’t need to be perfect but I will show you that it’s totally possible to build a non trivial Universal application in about 30 minutes.</p>\n<h3 id=\"16\"><a href=\"#16\" class=\"headerlink\" title=\"16.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/16\" target=\"_blank\" rel=\"external\">16.</a></h3><p>The tools that we are going to use for this experiment are Webpack, React, ReactRouter and express.</p>\n<h3 id=\"17\"><a href=\"#17\" class=\"headerlink\" title=\"17.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/17\" target=\"_blank\" rel=\"external\">17.</a></h3><p>I was for years a Judo practitioner and I am still a big fan of this sport, so we are going to build an application called Judo Heroes. I already published a version of this application, you can see the URL here (judo-heroes.herokuapp.com) and I also wrote an entire tutorial based on it on Scotch.io (bit.ly/judo-heroes-tutorial).</p>\n<h3 id=\"18\"><a href=\"#18\" class=\"headerlink\" title=\"18.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/18\" target=\"_blank\" rel=\"external\">18.</a></h3><p>As you can see the application is very simple ad allows us to display some of the best Judo Olympic athletes and read some details about them: their nationality, the year of birth, some pictures and the list of all the medals they won.</p>\n<h3 id=\"19\"><a href=\"#19\" class=\"headerlink\" title=\"19.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/19\" target=\"_blank\" rel=\"external\">19.</a></h3><p>Let’s see how Universal comes into play with this app. If we load a specific athlete page, we can see, using the chrome developer tools all the loaded resources.</p>\n<h3 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/20\" target=\"_blank\" rel=\"external\">20.</a></h3><p>Then, if from the interface we switch to another athlete, the application loads only the new resources. In this case the images for the new athlete.</p>\n<h3 id=\"21\"><a href=\"#21\" class=\"headerlink\" title=\"21.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/21\" target=\"_blank\" rel=\"external\">21.</a></h3><p>And also, if we refresh the page, the server will render the full html for the athlete page straight away. We can see this here with a curl command.</p>\n<h3 id=\"22\"><a href=\"#22\" class=\"headerlink\" title=\"22.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/22\" target=\"_blank\" rel=\"external\">22.</a></h3><p>Ok, let’s start looking at some code. Fist of all let’s see out data set. For the sake of this tutorial we will keep things simple and rely on a JavaScript module that exports an array of athletes. Every athletes is an object which contains all the information we need in order to display an athlete: name, country, birth year, images, list of medals, etc.<br>We can easily require this module everywhere we want to access the data.</p>\n<h3 id=\"23\"><a href=\"#23\" class=\"headerlink\" title=\"23.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/23\" target=\"_blank\" rel=\"external\">23.</a></h3><p>Now let’s build all the React components that define our interface.</p>\n<h3 id=\"24\"><a href=\"#24\" class=\"headerlink\" title=\"24.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/24\" target=\"_blank\" rel=\"external\">24.</a></h3><p>The first component that we are going to see is the <code>Layout</code> component, which has the goal of defining the markup of the global layout we want to use in our application. It contains a static header and a static footer and a variable content.</p>\n<h3 id=\"25\"><a href=\"#25\" class=\"headerlink\" title=\"25.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/25\" target=\"_blank\" rel=\"external\">25.</a></h3><p>This is more or less how a component looks like in React. We basically needs to define a render function that receives some parameters (called props) and returns the markup needed to render the component view. This markup looks like a mix of HTML and JavaScript and it’s called <em>JSX</em>. In this case we expect to see:</p>\n<p>  a. An header section<br>  b. A variable content (notice the variable <code>props.children</code>)<br>  c. And the footer section</p>\n<h3 id=\"26\"><a href=\"#26\" class=\"headerlink\" title=\"26.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/26\" target=\"_blank\" rel=\"external\">26.</a></h3><p>Now let’s move to the <code>IndexPage</code> component page. This component has the goal to show a card based navigation bar that allows us to select an athlete.</p>\n<h3 id=\"27\"><a href=\"#27\" class=\"headerlink\" title=\"27.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/27\" target=\"_blank\" rel=\"external\">27.</a></h3><p>The first thing to notice is that we are importing our data module to get the list of all the athletes. Then inside our render method we iterate over this list and, for every athlete in the list, we reference another component called <code>AthletePreview</code> passing to it all the data representing the current athlete.</p>\n<h3 id=\"28\"><a href=\"#28\" class=\"headerlink\" title=\"28.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/28\" target=\"_blank\" rel=\"external\">28.</a></h3><p>So the <code>AthletePreview</code> component represents a card in the navigation bar of the <code>IndexPage</code>. Let’s jump to the code.</p>\n<h3 id=\"29\"><a href=\"#29\" class=\"headerlink\" title=\"29.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/29\" target=\"_blank\" rel=\"external\">29.</a></h3><p>Let’s use this component to understand better how React and its JSX syntax work.</p>\n<p>  a. As I told you we have a function that has the goal of providing the JSX markup needed by React to render the component.<br>  b. The main <em>tag</em> that we use is <code>Link</code> which represents a React Router component. This will make all the component <em>clickable</em> and will link it to a specific React route. We will see later in greater detail how the routing functionality works. The only important thing you need to notice for now is that the attribute <code>to</code> uses an interpolated variable to build the link reference. We reference here the <code>props</code> object which will contain all the attributes passed to this component by the parent component.<br>  c. Then we display the headshot of the athlete, again we access the object <code>props</code> to fetch the picture for the current athlete.<br>  d. We do the same to display the name of the athlete.<br>  e. Finally we also define the markup to render a little medal icon and the count of the medals won by the athlete.</p>\n<h3 id=\"30\"><a href=\"#30\" class=\"headerlink\" title=\"30.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/30\" target=\"_blank\" rel=\"external\">30.</a></h3><p>Now let’s move to the <code>AthletePage</code> which represents the detail page of an athlete.</p>\n<h3 id=\"31\"><a href=\"#31\" class=\"headerlink\" title=\"31.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/31\" target=\"_blank\" rel=\"external\">31.</a></h3><p>A lot of code here. But don’t worry this is the biggest component we will see today and at the end it’s quite simple. So let’s zoom into the important details.</p>\n<h3 id=\"32\"><a href=\"#32\" class=\"headerlink\" title=\"32.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/32\" target=\"_blank\" rel=\"external\">32.</a></h3><p>This component as well has access to all our data. It receives the id of the current athlete to display in <code>props.params.id</code>, data that will be populate by the routing layer given the current url.</p>\n<p>  a. We use this information to verify if the current id really exists in our little static database object. If not we simply render a <code>NotFoundPage</code> component that we will see later. If the athlete exists we will have all its data in the <code>athlete</code> variable.<br>  b. If we have found the athlete we first render a custom component called <code>AthletesMenu</code>.<br>  c. Then we have the markup that define the header of the page (the one with the big background image and the picture of the current athlete).</p>\n<h3 id=\"33\"><a href=\"#33\" class=\"headerlink\" title=\"33.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/33\" target=\"_blank\" rel=\"external\">33.</a></h3><p>  d. Then we have a the markup needed to render the athlete description.<br>  e. Notice that inside this markup we reference another custom component called <code>Flag</code> which is the one responsible for rendering the flag icon inside the description.<br>  f. In the next section we iterate over all the athlete medals and display them…<br>  g. Using a custom component called <code>Medal</code><br>  h. The last bit is a link that redirects to the index page.</p>\n<h3 id=\"34\"><a href=\"#34\" class=\"headerlink\" title=\"34.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/34\" target=\"_blank\" rel=\"external\">34.</a></h3><p>This is the <code>AthletesMenu</code> component that we referenced in the previous component.</p>\n<h3 id=\"35\"><a href=\"#35\" class=\"headerlink\" title=\"35.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/35\" target=\"_blank\" rel=\"external\">35.</a></h3><p>In its code we access again to our data module and we iterate over it.</p>\n<p>  a. For every athlete we reference a <code>Link</code> component pointing to the athlete page. It’s worth noticing that we use the attribute <code>activeClassName</code>. This is a very handy utility of the ReactRouter module that allows us to apply to the link a specific class to the link tag when the linked route matches the current URL. With this utility get very easy to create some CSS code to style active links differently from the other ones.</p>\n<h3 id=\"36\"><a href=\"#36\" class=\"headerlink\" title=\"36.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/36\" target=\"_blank\" rel=\"external\">36.</a></h3><p>This is the <code>Flag</code> component we mentioned some slides before.</p>\n<h3 id=\"37\"><a href=\"#37\" class=\"headerlink\" title=\"37.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/37\" target=\"_blank\" rel=\"external\">37.</a></h3><p>The code is very simple. We just need to use the <code>props.icon</code> to render the image tag properly. We also have an optional prop called <code>showName</code> that, if set to a <em>truthy</em> value, tells the component to also display the name of the country along the flag icon.</p>\n<h3 id=\"38\"><a href=\"#38\" class=\"headerlink\" title=\"38.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/38\" target=\"_blank\" rel=\"external\">38.</a></h3><p>Finally let’s see our <code>Medal</code> component.</p>\n<h3 id=\"39\"><a href=\"#39\" class=\"headerlink\" title=\"39.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/39\" target=\"_blank\" rel=\"external\">39.</a></h3><p>In this component, before the render function we have a little dictionary object that we use to map medal types ids to it’s literal description (‘G’ for ‘Gold’, ‘S’ for ‘Silver’, etc.). Then we reference all the properties we receive from the parent component to display the medal year, the city, the name of the competition and the category.</p>\n<h3 id=\"40\"><a href=\"#40\" class=\"headerlink\" title=\"40.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/40\" target=\"_blank\" rel=\"external\">40.</a></h3><p>Finally let’s have a look at out super simple <code>NotFoundPage</code> component. This is probably the simplest one as we don’t reference any dynamic property but we just render some markup to display a very simple error page with a link to the index.</p>\n<h3 id=\"41\"><a href=\"#41\" class=\"headerlink\" title=\"41.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/41\" target=\"_blank\" rel=\"external\">41.</a></h3><p>Ok, enough React components! I hope you are not bored already…<br>Let’s move to the routing functionality.</p>\n<h3 id=\"42\"><a href=\"#42\" class=\"headerlink\" title=\"42.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/42\" target=\"_blank\" rel=\"external\">42.</a></h3><p>In our application we will have two different routes:</p>\n<p>  a. The index page, mapped to the main route<br>  b. and the athlete page which uses the athlete <code>id</code> as parameter.</p>\n<h3 id=\"43\"><a href=\"#43\" class=\"headerlink\" title=\"43.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/43\" target=\"_blank\" rel=\"external\">43.</a></h3><p>in our <code>Routes</code> components we define these two routes. Using ReactRouter we can define the routes hierarchy using JSX.</p>\n<ul>\n<li>We have a main route that links the <code>Layout</code> component. This will make sure that every component will use our default layout.</li>\n<li>Then the common index route is associated to our <code>IndexPage</code> component.</li>\n<li>We than map the <code>AthletePage</code> component to the path <code>athlete/:id</code></li>\n<li>And finally we provide a fallback path that matches all the other routers and renders our <code>NotFoundPage</code> component.</li>\n</ul>\n<h3 id=\"44\"><a href=\"#44\" class=\"headerlink\" title=\"44.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/44\" target=\"_blank\" rel=\"external\">44.</a></h3><p>Let’s create the real router component now.</p>\n<p>  a. This component imports our previously defined hierarchy of routes.<br>  b. It uses the hashHistory mechanism to detect the current router. We will see later what this really means.<br>  c. We reference our routing hierarchy through the <code>routes</code> attribute.<br>  d. Finally we use a little function to scroll the page back up every time we move dynamically to a new route. This will make sure that the transition between one page an another looks natural.</p>\n<h3 id=\"45\"><a href=\"#45\" class=\"headerlink\" title=\"45.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/45\" target=\"_blank\" rel=\"external\">45.</a></h3><p>So now we have React components and routing. Let’s combine them together and finalize our client app.</p>\n<h3 id=\"46\"><a href=\"#46\" class=\"headerlink\" title=\"46.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/46\" target=\"_blank\" rel=\"external\">46.</a></h3><p>The app-client represent our browser application.</p>\n<p>  a. It loads our router<br>  b. and renders it inside the tag with id <code>main</code>.</p>\n<h3 id=\"47\"><a href=\"#47\" class=\"headerlink\" title=\"47.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/47\" target=\"_blank\" rel=\"external\">47.</a></h3><p>Let’s see how the main html of our application looks like</p>\n<h3 id=\"48\"><a href=\"#48\" class=\"headerlink\" title=\"48.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/48\" target=\"_blank\" rel=\"external\">48.</a></h3><p>We basically have some regular meta headers and a link to a stylesheet. Then in the body:</p>\n<p>  a. We have our <code>main</code> tag which will contain all our react app<br>  b. The bundled script that contains all the code needed to run our app in the frontend.</p>\n<h3 id=\"49\"><a href=\"#49\" class=\"headerlink\" title=\"49.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/49\" target=\"_blank\" rel=\"external\">49.</a></h3><p>Let’s how we can build this bundle using Babel and Webpack.</p>\n<h3 id=\"50\"><a href=\"#50\" class=\"headerlink\" title=\"50.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/50\" target=\"_blank\" rel=\"external\">50.</a></h3><p>Our Babel config looks extremely simple:</p>\n<p>  a. We just need to specify that we want to transpile react code and EcmaScript 2015 to regular ES5 code.</p>\n<p>Our webpack config is a bit more elaborate:</p>\n<p>  b. First thing we need to specify is the entry point of our app. Webpack will start to crawl through all the used dependencies starting from this file.<br>  c. Then we specify where we want to output the resulting bundled file.<br>  d. And finally we specify that we want to process every file in our source directory using babel.</p>\n<h3 id=\"51\"><a href=\"#51\" class=\"headerlink\" title=\"51.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/51\" target=\"_blank\" rel=\"external\">51.</a></h3><p>To create our bundle we just need to call <code>webpack</code> from the command line.</p>\n<h3 id=\"52\"><a href=\"#52\" class=\"headerlink\" title=\"52.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/52\" target=\"_blank\" rel=\"external\">52.</a></h3><p>The last bit we need before seeing our application working is to write a small server app using Express that allows us to serve the static files that compose our app at this stage. We can do this using the <code>Express.static</code> middleware.</p>\n<h3 id=\"53\"><a href=\"#53\" class=\"headerlink\" title=\"53.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/53\" target=\"_blank\" rel=\"external\">53.</a></h3><p>Let’s finally test our app!</p>\n<p>(Show frontend only app, show routing with hashes, code only rendered on the client and 404 not understood)</p>\n<h3 id=\"54\"><a href=\"#54\" class=\"headerlink\" title=\"54.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/54\" target=\"_blank\" rel=\"external\">54.</a></h3><p>So What we have done so far?</p>\n<ol>\n<li>We defined our views combining a bunch of different React components</li>\n<li>We added routing using React Router</li>\n<li>We compiled our application for the browser using Babel and Webpack</li>\n<li>Then we executed the application served through a static Express server</li>\n</ol>\n<h3 id=\"55\"><a href=\"#55\" class=\"headerlink\" title=\"55.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/55\" target=\"_blank\" rel=\"external\">55.</a></h3><p>Ok nothing so exiting so far, let’s now add Server Side Rendering and Routing!</p>\n<h3 id=\"56\"><a href=\"#56\" class=\"headerlink\" title=\"56.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/56\" target=\"_blank\" rel=\"external\">56.</a></h3><p>When we executed our front-end only application you probably noticed that our URLS were looking a bit weird. The only changing part was prefixed by an hashtag symbol. That’s because we were using the <code>hashHistory</code> mode in our router. This route works very well for frontend-only applications, because it makes shareable link pointing to the right dynamic section, even when in the server you only have an <code>index.html</code> page.</p>\n<p>We need now to switch to full routes (without hashtags) and to do so we can simply change our <code>hashHistory</code> to <code>browserHistory</code>.</p>\n<h3 id=\"57\"><a href=\"#57\" class=\"headerlink\" title=\"57.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/57\" target=\"_blank\" rel=\"external\">57.</a></h3><p>Now we also want to convert our old <code>index.html</code> to a generic <em>ejs</em> template. Our new file looks almost identical, with the only exception that inside our <code>main</code> block we have now an <em>ejs</em> template variable called <code>markup</code> that allows us to inject arbitrary html code into it. We are going to use this to inject the React generated markup when rendering from the server.</p>\n<h3 id=\"58\"><a href=\"#58\" class=\"headerlink\" title=\"58.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/58\" target=\"_blank\" rel=\"external\">58.</a></h3><p>Now the last step is to update our server application to support universal routing and rendering. To do so we need to import some libraries from React, ReactDom e ReactRouter. We also import our routes from our frontend-only app and the <code>NotFoundPage</code> component.</p>\n<p>Finally we also enable the support for <em>ejs</em> templates.</p>\n<h3 id=\"59\"><a href=\"#59\" class=\"headerlink\" title=\"59.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/59\" target=\"_blank\" rel=\"external\">59.</a></h3><p>Now let’s get to the most interesting part, let’s see how the universal routing and rendering works.</p>\n<p>The important part of the code here is the Express route defined with <code>app.get(&#39;*&#39;, (req, res) =&gt; {...})</code>.</p>\n<p>This is an Express <em>catch-all</em> route that will intercept all the <em>GET</em> requests to every URL in the server (not previously matched to a static file). Inside this route, we take care of delegating the routing logic to the React Router <code>match</code> function.</p>\n<p><code>match</code> accepts two parameters: the first one is a configuration object and the second is a callback function. The configuration object must have two keys:</p>\n<ul>\n<li><code>routes</code>: used to pass the React Router routes configuration. Here, we are passing the exact same configuration that we used for the client-side rendering.</li>\n<li><code>location</code>: This is used to specify the currently requested URL.</li>\n</ul>\n<p>The callback function is called at the end of the matching. It will receive three arguments: <code>error</code>, <code>redirectLocation</code> and <code>renderProps</code>. We can use them to determine what exactly the result of the match operation was.</p>\n<p>We can have four different cases that we need to handle:</p>\n<ol>\n<li>The first case is when we have an error during the routing resolution. To handle this case, we simply return a 500 internal server error response to the browser.</li>\n<li>The second case is when we match a route that is a redirect route. In this case, we need to create a server redirect message (302 redirect) to tell the browser to go to the new destination (this is not really happening in our application because we are not using redirect routes in our React Router configuration, but it’s good to have it ready in case we decide to keep evolving our application).</li>\n<li>The third case is when we match a route and we have to render the associated component. In this case, the argument renderProps is an object that contains the data we need to use to render the component. The component we are rendering is RouterContext (contained in the React Router module), which is responsible for rendering the full component tree using the values in renderProps.</li>\n<li>The last case is when the route is not matched, and here we can simply return a 404 not found error to the browser.</li>\n</ol>\n<p>This is the core of our server- side routing mechanism and we use the ReactDOM <code>renderToString</code> function to be able to render the HTML code that represents the component associated to the currently matched route.</p>\n<p>Finally, we inject the resulting HTML into the <code>index.ejs</code> template we defined before to obtain the full HTML page that we send to the browser.</p>\n<h3 id=\"60\"><a href=\"#60\" class=\"headerlink\" title=\"60.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/60\" target=\"_blank\" rel=\"external\">60.</a></h3><p>Let’s test the app again.</p>\n<p>(Show universal routing and rendering working when changing and reloading pages).</p>\n<h3 id=\"61\"><a href=\"#61\" class=\"headerlink\" title=\"61.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/61\" target=\"_blank\" rel=\"external\">61.</a></h3><p>Quick recap about what was done in this presentation:</p>\n<ul>\n<li>Create a Single Page Application with React and React Router</li>\n<li>Add server side routing and rendering using React and React Router libraries in out Express app</li>\n</ul>\n<h3 id=\"62\"><a href=\"#62\" class=\"headerlink\" title=\"62.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/62\" target=\"_blank\" rel=\"external\">62.</a></h3><p>What can we do next to have a fully-fledged Universal app.</p>\n<ul>\n<li>Add Universal Data Retrieval</li>\n<li>Add Universal State Management</li>\n</ul>\n<h3 id=\"63\"><a href=\"#63\" class=\"headerlink\" title=\"63.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/63\" target=\"_blank\" rel=\"external\">63.</a></h3><p>Thanks everybody for being here!</p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p>Big thanks to the organizers of the event for giving me this chance to be there on the stage. Also great thanks to my great friends Alessandro Cinelli (<a href=\"https://twitter.com/cirpo\" target=\"_blank\" rel=\"external\">@cirpo</a>), Andrea Mangano (<a href=\"https://twitter.com/andreaman87\" target=\"_blank\" rel=\"external\">@andreaman87</a>), Aleksandar Čambas and Peter Caulfield (<a href=\"https://twitter.com/quasi_modal\" target=\"_blank\" rel=\"external\">@quasi_modal</a>) for reviewing my slide deck and for giving me tons of advices!</p>\n<h3 id=\"Some-photos-from-Twitter\"><a href=\"#Some-photos-from-Twitter\" class=\"headerlink\" title=\"Some photos from Twitter\"></a>Some photos from Twitter</h3><p>Gigantic thanks also to whoever took pictures and shared them on Twitter, some here:</p>\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">@loige</a> on stage <a href=\"https://twitter.com/hashtag/codemotion?src=hash\" target=\"_blank\" rel=\"external\">#codemotion</a> Milan! Rock on! <a href=\"https://t.co/9Y97YENhIG\" target=\"_blank\" rel=\"external\">pic.twitter.com/9Y97YENhIG</a></p>&mdash; cirpo (@cirpo) <a href=\"https://twitter.com/cirpo/status/802170435425234948\" target=\"_blank\" rel=\"external\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\">It&#39;s time of <a href=\"https://twitter.com/hashtag/universaljs?src=hash\" target=\"_blank\" rel=\"external\">#universaljs</a> <a href=\"https://twitter.com/hashtag/reactjs?src=hash\" target=\"_blank\" rel=\"external\">#reactjs</a> with <a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">@loige</a> <a href=\"https://t.co/2XrAZFOBRe\" target=\"_blank\" rel=\"external\">pic.twitter.com/2XrAZFOBRe</a></p>&mdash; Andrea Mangano (@andreaman87) <a href=\"https://twitter.com/andreaman87/status/802170179379752960\" target=\"_blank\" rel=\"external\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"it\" dir=\"ltr\">Ottimo talk, su <a href=\"https://twitter.com/hashtag/reactjs?src=hash\" target=\"_blank\" rel=\"external\">#reactjs</a>. Forse le più belle slide mai viste. Chiare ed essenziali <a href=\"https://twitter.com/hashtag/Codemotion?src=hash\" target=\"_blank\" rel=\"external\">#Codemotion</a> <a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">@loige</a> <a href=\"https://t.co/DhCRV8NPMX\" target=\"_blank\" rel=\"external\">pic.twitter.com/DhCRV8NPMX</a></p>&mdash; Daniele Montagni (@dmontagni) <a href=\"https://twitter.com/dmontagni/status/802182660189724672\" target=\"_blank\" rel=\"external\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>I hope you liked this article and that you are now somehow confident that building universal JavaScript application is not that hard… you just need to start somewhere!<br>Feel free to leave any question or comment below on the comments box.</p>\n<p>Cheers, see you next time! 🍻</p>\n","excerpt":"","more":"<p>Yesterday (25/11/2016) I had the pleasure of delivering a talk about Universal JavaScript at <a href=\"http://milan2016.codemotionworld.com\">Codemotion Milan 2016</a>. It was a great fun and I was very happy to meet such a big pool of technology enthusiasts and professionals all in one places. I’m already looking forward for the next edition!</p>\n<h2 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h2><p><strong>Update</strong> (12-12-2016): a video recording of the talk has been published by the folks at Codemotion:</p>\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\"><br><iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"https://www.youtube.com/embed/9z7k3-Or7EA\" frameborder=\"0\" allowfullscreen></iframe><br></div>\n\n<h2 id=\"Slides-deck\"><a href=\"#Slides-deck\" class=\"headerlink\" title=\"Slides deck\"></a>Slides deck</h2><p>If you are interested in my talk you can find the slides on <a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016\">Slides.com</a>:</p>\n<div style=\" position: relative; padding-bottom: 56.25%; height: 0; margin-bottom: 5em;\"><br><iframe style=\"position: absolute; top:0; left: 0; width: 100%; height: 100%;\" src=\"//slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe><br></div>\n\n\n<h2 id=\"Commentary\"><a href=\"#Commentary\" class=\"headerlink\" title=\"Commentary\"></a>Commentary</h2><p>Here follows also a quite detailed kind of commentary for every slide (from my notes), so you can easily understand all the concepts discussed during the presentation.</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/1\">1.</a></h3><p>Hello everybody, I am Luciano (also known as “<a href=\"https://github.com/lmammino\">lmammino</a>“ or “<a href=\"https://twitter.com/loige\">loige</a>“ on GitHub and Twitter).<br>I am a software engineer at <a href=\"http://planet9energy.com\">Planet9 Energy</a>, a new electricity provider that is focused<br>on using new technologies to give industrial and consumer customers more visibility over<br>their bills and at the same time enabling new ways to perform energy trading very efficiently.</p>\n<p>Me and my team are currently building most of the infrastructure using a serverless approach<br>and we make heavy use of AWS lambda and the serverless framework. If you are interested<br>in these topics please catch up with me after this talk.</p>\n<p>I am also the co-author of the book “<a href=\"https://www.nodejsdesignpatterns.com\">Node.js Design Patterns Second Edition</a>“ together with <a href=\"https://twitter.com/mariocasciaro\">Mario Casciaro</a>. If you are interested in re-enforcing your knowledge of design patterns, and most importantly discover how you can get the best out of them in the Node.js and JavaScript land, this book is probably for you. For what concerns this talk, the book also features an entire chapter about Universal JavaScript.</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/2\">2.</a></h3><p>So today we are going to be talking about Universal JavaScript for Web applications.</p>\n<p>First of all we will see what “universal” really means, then we will discuss who is currently using it and why. Then we will move into a quick overview of the main challenges to face when dealing with universal JavaScript applications. Finally, in the second part of this talk, we will see a practical example about how to build a Universal JavaScript Web Application. At first we will build the front-end only version and then by making it “universal”.</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/3\">3.</a></h3><p>So, for some time, what we call today Universal JavaScript was recognised as “Isomorphic” JavaScript. After some discussions it seems that the JavaScript community agreed on using the term “Universal” instead. If you are interested in the full story you can read most of it at this link <a href=\"http://bit.ly/universaljs\">here</a>.</p>\n<p>Anyway, what do we really mean with the term “Universal”? I am going to phrase my own definition here… So please don’t take it as an academic one…</p>\n<blockquote>\n<p>Universal Javascript means writing JavaScript code that can run on different JavaScript runtimes over different contexts. For example on the Browser as well as on the Server.</p>\n</blockquote>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/4\">4.</a></h3><p>But that’s not limited only to the web, for example we can talk about Universal JavaScript even when building desktop or mobile applications and some people are even attempting experiments to control hardware devices directly with JavaScript.<br>During the course of this talk we are going to focus only on Web development though.</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/5\">5.</a></h3><p>What are the main advantages of Universal JavaScript? First of all it allows you to deal with a JavaScript only development environment. Having JavaScript both on the Browser and on the Server removes the cost of language switching. This of course happens with any Node.js application, even if not Universal. When it gets to universal you are going to have most of the same code shared between frontend and backend, so in that case your code base would probably contain less duplication and thus will result to be more maintainable.<br>Also with universal JavaScript you will achieve better Serach Engines Optimization, because the server will be able to render the full content of you pages and not just that but it will also be able to return proper http codes in any situation, so cases like “page not found” or “redirects” can be resolved correctly by Google and the other crawlers.<br>Finally we will also achieve a better “perceived” load time. This is a side effect of server rendering, because when the browser finish to download the HTML of the page it will have already most of the information needed to render the page, so the classical flickering effect of classic single page applications would be less likely to happen.</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/6\">6.</a></h3><p>Just to mention a few, the very first early adopter of Universal JavaScript were Netflix, Airbnb, Wordpress (that used this approach to build the <a href=\"https://github.com/Automattic/wp-calypso\">new administration panel for wordpress.com</a>) and Dropbox.</p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/7\">7.</a></h3><p>So yes, everything looks great, but if you already heard about it, you probably also heard that it’s very complicated…<br>Let’s see why many people think so…</p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/8\">8.</a></h3><p>Well, there are some specific pain point to address when it comes to build a Universal application. First of all you will need to have a nice way to write your code (generally in the form of modules) once and make it available between the backend and the frontend. The two environments, even if similar, are not the same. For example they load files and resources in different ways so we need standards and tools in order to “transform” the code in a way that is loadable and functional in both environments.<br>The current open source solutions are <a href=\"https://github.com/umdjs/umd\">UMD</a>, which stands for Universal Module Definition, <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> that allows to load modules asynchronously and <a href=\"http://browserify.org\">Browserify</a> and <a href=\"https://webpack.github.io\">Webpack</a> as module builder for bringing CommonJs/Node.js modules to the browser.</p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/9\">9.</a></h3><p>Another issue is universal rendering. When it comes to JavaScript heavy applications we build most of the HTML needed from JavaScript itself (generally using the concept of components). In a regular Single Page Application these components are rendered only by the browser, after the page is fully loaded. With Unviersal JavaScript we want to be able to perform the generation of the full HTML from the server before the page is served to the browser. All the major new framworks like React and Angular 2 supports way to achieve Universal Rendering and there’s a new interesting player in this field called Next.js.</p>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/10\">10.</a></h3><p>A similar problem is universal routing. We want both the browser and the server to be able to render specific view given specific urls. Ideally we don’t want any code duplication, so the same mechanism to define routes and actions should be defined once and should function in a seamless way in both environments.<br>There are several interesting libraries trying to address this problem and one of the most famous, at least in the React land, is React Router.</p>\n<h3 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/11\">11.</a></h3><p>Again a similar problems comes in relation to loading the data (often in the form of an API) needed by the application.<br>In these cases one of the most common solutions is to have an api that is accessible both from the server and the client and load it with an universal code base using a library like Axios or Universal Fetch.</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/12\">12.</a></h3><p>Finally one of the last big pain points is Universal State management. There is a tendency to define the full state of an application in a single object generally using libraries like Redux or Cerebral. We want to keep doing this in a way that is fully compatible and functional both on the server and the client.</p>\n<h3 id=\"13\"><a href=\"#13\" class=\"headerlink\" title=\"13.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/13\">13.</a></h3><p>And well yes, plain old JavaScript doesn’t seem to be enough these days. We often want to use some high level abstraction or language extension like Flow or JSX or even other new languages able to compile directly to JavaScript like TypeScript or Elm.<br>This is not strictly necessary but it might make the developer experience way better.</p>\n<h3 id=\"14\"><a href=\"#14\" class=\"headerlink\" title=\"14.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/14\">14.</a></h3><p>Yeah I know the current JavaScript panorama sounds a bit too broad and scary…</p>\n<h3 id=\"15\"><a href=\"#15\" class=\"headerlink\" title=\"15.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/15\">15.</a></h3><p>But let’s stop complaining and let’s build something together… It doesn’t need to be perfect but I will show you that it’s totally possible to build a non trivial Universal application in about 30 minutes.</p>\n<h3 id=\"16\"><a href=\"#16\" class=\"headerlink\" title=\"16.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/16\">16.</a></h3><p>The tools that we are going to use for this experiment are Webpack, React, ReactRouter and express.</p>\n<h3 id=\"17\"><a href=\"#17\" class=\"headerlink\" title=\"17.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/17\">17.</a></h3><p>I was for years a Judo practitioner and I am still a big fan of this sport, so we are going to build an application called Judo Heroes. I already published a version of this application, you can see the URL here (judo-heroes.herokuapp.com) and I also wrote an entire tutorial based on it on Scotch.io (bit.ly/judo-heroes-tutorial).</p>\n<h3 id=\"18\"><a href=\"#18\" class=\"headerlink\" title=\"18.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/18\">18.</a></h3><p>As you can see the application is very simple ad allows us to display some of the best Judo Olympic athletes and read some details about them: their nationality, the year of birth, some pictures and the list of all the medals they won.</p>\n<h3 id=\"19\"><a href=\"#19\" class=\"headerlink\" title=\"19.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/19\">19.</a></h3><p>Let’s see how Universal comes into play with this app. If we load a specific athlete page, we can see, using the chrome developer tools all the loaded resources.</p>\n<h3 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/20\">20.</a></h3><p>Then, if from the interface we switch to another athlete, the application loads only the new resources. In this case the images for the new athlete.</p>\n<h3 id=\"21\"><a href=\"#21\" class=\"headerlink\" title=\"21.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/21\">21.</a></h3><p>And also, if we refresh the page, the server will render the full html for the athlete page straight away. We can see this here with a curl command.</p>\n<h3 id=\"22\"><a href=\"#22\" class=\"headerlink\" title=\"22.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/22\">22.</a></h3><p>Ok, let’s start looking at some code. Fist of all let’s see out data set. For the sake of this tutorial we will keep things simple and rely on a JavaScript module that exports an array of athletes. Every athletes is an object which contains all the information we need in order to display an athlete: name, country, birth year, images, list of medals, etc.<br>We can easily require this module everywhere we want to access the data.</p>\n<h3 id=\"23\"><a href=\"#23\" class=\"headerlink\" title=\"23.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/23\">23.</a></h3><p>Now let’s build all the React components that define our interface.</p>\n<h3 id=\"24\"><a href=\"#24\" class=\"headerlink\" title=\"24.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/24\">24.</a></h3><p>The first component that we are going to see is the <code>Layout</code> component, which has the goal of defining the markup of the global layout we want to use in our application. It contains a static header and a static footer and a variable content.</p>\n<h3 id=\"25\"><a href=\"#25\" class=\"headerlink\" title=\"25.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/25\">25.</a></h3><p>This is more or less how a component looks like in React. We basically needs to define a render function that receives some parameters (called props) and returns the markup needed to render the component view. This markup looks like a mix of HTML and JavaScript and it’s called <em>JSX</em>. In this case we expect to see:</p>\n<p>  a. An header section<br>  b. A variable content (notice the variable <code>props.children</code>)<br>  c. And the footer section</p>\n<h3 id=\"26\"><a href=\"#26\" class=\"headerlink\" title=\"26.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/26\">26.</a></h3><p>Now let’s move to the <code>IndexPage</code> component page. This component has the goal to show a card based navigation bar that allows us to select an athlete.</p>\n<h3 id=\"27\"><a href=\"#27\" class=\"headerlink\" title=\"27.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/27\">27.</a></h3><p>The first thing to notice is that we are importing our data module to get the list of all the athletes. Then inside our render method we iterate over this list and, for every athlete in the list, we reference another component called <code>AthletePreview</code> passing to it all the data representing the current athlete.</p>\n<h3 id=\"28\"><a href=\"#28\" class=\"headerlink\" title=\"28.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/28\">28.</a></h3><p>So the <code>AthletePreview</code> component represents a card in the navigation bar of the <code>IndexPage</code>. Let’s jump to the code.</p>\n<h3 id=\"29\"><a href=\"#29\" class=\"headerlink\" title=\"29.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/29\">29.</a></h3><p>Let’s use this component to understand better how React and its JSX syntax work.</p>\n<p>  a. As I told you we have a function that has the goal of providing the JSX markup needed by React to render the component.<br>  b. The main <em>tag</em> that we use is <code>Link</code> which represents a React Router component. This will make all the component <em>clickable</em> and will link it to a specific React route. We will see later in greater detail how the routing functionality works. The only important thing you need to notice for now is that the attribute <code>to</code> uses an interpolated variable to build the link reference. We reference here the <code>props</code> object which will contain all the attributes passed to this component by the parent component.<br>  c. Then we display the headshot of the athlete, again we access the object <code>props</code> to fetch the picture for the current athlete.<br>  d. We do the same to display the name of the athlete.<br>  e. Finally we also define the markup to render a little medal icon and the count of the medals won by the athlete.</p>\n<h3 id=\"30\"><a href=\"#30\" class=\"headerlink\" title=\"30.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/30\">30.</a></h3><p>Now let’s move to the <code>AthletePage</code> which represents the detail page of an athlete.</p>\n<h3 id=\"31\"><a href=\"#31\" class=\"headerlink\" title=\"31.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/31\">31.</a></h3><p>A lot of code here. But don’t worry this is the biggest component we will see today and at the end it’s quite simple. So let’s zoom into the important details.</p>\n<h3 id=\"32\"><a href=\"#32\" class=\"headerlink\" title=\"32.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/32\">32.</a></h3><p>This component as well has access to all our data. It receives the id of the current athlete to display in <code>props.params.id</code>, data that will be populate by the routing layer given the current url.</p>\n<p>  a. We use this information to verify if the current id really exists in our little static database object. If not we simply render a <code>NotFoundPage</code> component that we will see later. If the athlete exists we will have all its data in the <code>athlete</code> variable.<br>  b. If we have found the athlete we first render a custom component called <code>AthletesMenu</code>.<br>  c. Then we have the markup that define the header of the page (the one with the big background image and the picture of the current athlete).</p>\n<h3 id=\"33\"><a href=\"#33\" class=\"headerlink\" title=\"33.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/33\">33.</a></h3><p>  d. Then we have a the markup needed to render the athlete description.<br>  e. Notice that inside this markup we reference another custom component called <code>Flag</code> which is the one responsible for rendering the flag icon inside the description.<br>  f. In the next section we iterate over all the athlete medals and display them…<br>  g. Using a custom component called <code>Medal</code><br>  h. The last bit is a link that redirects to the index page.</p>\n<h3 id=\"34\"><a href=\"#34\" class=\"headerlink\" title=\"34.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/34\">34.</a></h3><p>This is the <code>AthletesMenu</code> component that we referenced in the previous component.</p>\n<h3 id=\"35\"><a href=\"#35\" class=\"headerlink\" title=\"35.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/35\">35.</a></h3><p>In its code we access again to our data module and we iterate over it.</p>\n<p>  a. For every athlete we reference a <code>Link</code> component pointing to the athlete page. It’s worth noticing that we use the attribute <code>activeClassName</code>. This is a very handy utility of the ReactRouter module that allows us to apply to the link a specific class to the link tag when the linked route matches the current URL. With this utility get very easy to create some CSS code to style active links differently from the other ones.</p>\n<h3 id=\"36\"><a href=\"#36\" class=\"headerlink\" title=\"36.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/36\">36.</a></h3><p>This is the <code>Flag</code> component we mentioned some slides before.</p>\n<h3 id=\"37\"><a href=\"#37\" class=\"headerlink\" title=\"37.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/37\">37.</a></h3><p>The code is very simple. We just need to use the <code>props.icon</code> to render the image tag properly. We also have an optional prop called <code>showName</code> that, if set to a <em>truthy</em> value, tells the component to also display the name of the country along the flag icon.</p>\n<h3 id=\"38\"><a href=\"#38\" class=\"headerlink\" title=\"38.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/38\">38.</a></h3><p>Finally let’s see our <code>Medal</code> component.</p>\n<h3 id=\"39\"><a href=\"#39\" class=\"headerlink\" title=\"39.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/39\">39.</a></h3><p>In this component, before the render function we have a little dictionary object that we use to map medal types ids to it’s literal description (‘G’ for ‘Gold’, ‘S’ for ‘Silver’, etc.). Then we reference all the properties we receive from the parent component to display the medal year, the city, the name of the competition and the category.</p>\n<h3 id=\"40\"><a href=\"#40\" class=\"headerlink\" title=\"40.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/40\">40.</a></h3><p>Finally let’s have a look at out super simple <code>NotFoundPage</code> component. This is probably the simplest one as we don’t reference any dynamic property but we just render some markup to display a very simple error page with a link to the index.</p>\n<h3 id=\"41\"><a href=\"#41\" class=\"headerlink\" title=\"41.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/41\">41.</a></h3><p>Ok, enough React components! I hope you are not bored already…<br>Let’s move to the routing functionality.</p>\n<h3 id=\"42\"><a href=\"#42\" class=\"headerlink\" title=\"42.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/42\">42.</a></h3><p>In our application we will have two different routes:</p>\n<p>  a. The index page, mapped to the main route<br>  b. and the athlete page which uses the athlete <code>id</code> as parameter.</p>\n<h3 id=\"43\"><a href=\"#43\" class=\"headerlink\" title=\"43.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/43\">43.</a></h3><p>in our <code>Routes</code> components we define these two routes. Using ReactRouter we can define the routes hierarchy using JSX.</p>\n<ul>\n<li>We have a main route that links the <code>Layout</code> component. This will make sure that every component will use our default layout.</li>\n<li>Then the common index route is associated to our <code>IndexPage</code> component.</li>\n<li>We than map the <code>AthletePage</code> component to the path <code>athlete/:id</code></li>\n<li>And finally we provide a fallback path that matches all the other routers and renders our <code>NotFoundPage</code> component.</li>\n</ul>\n<h3 id=\"44\"><a href=\"#44\" class=\"headerlink\" title=\"44.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/44\">44.</a></h3><p>Let’s create the real router component now.</p>\n<p>  a. This component imports our previously defined hierarchy of routes.<br>  b. It uses the hashHistory mechanism to detect the current router. We will see later what this really means.<br>  c. We reference our routing hierarchy through the <code>routes</code> attribute.<br>  d. Finally we use a little function to scroll the page back up every time we move dynamically to a new route. This will make sure that the transition between one page an another looks natural.</p>\n<h3 id=\"45\"><a href=\"#45\" class=\"headerlink\" title=\"45.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/45\">45.</a></h3><p>So now we have React components and routing. Let’s combine them together and finalize our client app.</p>\n<h3 id=\"46\"><a href=\"#46\" class=\"headerlink\" title=\"46.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/46\">46.</a></h3><p>The app-client represent our browser application.</p>\n<p>  a. It loads our router<br>  b. and renders it inside the tag with id <code>main</code>.</p>\n<h3 id=\"47\"><a href=\"#47\" class=\"headerlink\" title=\"47.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/47\">47.</a></h3><p>Let’s see how the main html of our application looks like</p>\n<h3 id=\"48\"><a href=\"#48\" class=\"headerlink\" title=\"48.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/48\">48.</a></h3><p>We basically have some regular meta headers and a link to a stylesheet. Then in the body:</p>\n<p>  a. We have our <code>main</code> tag which will contain all our react app<br>  b. The bundled script that contains all the code needed to run our app in the frontend.</p>\n<h3 id=\"49\"><a href=\"#49\" class=\"headerlink\" title=\"49.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/49\">49.</a></h3><p>Let’s how we can build this bundle using Babel and Webpack.</p>\n<h3 id=\"50\"><a href=\"#50\" class=\"headerlink\" title=\"50.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/50\">50.</a></h3><p>Our Babel config looks extremely simple:</p>\n<p>  a. We just need to specify that we want to transpile react code and EcmaScript 2015 to regular ES5 code.</p>\n<p>Our webpack config is a bit more elaborate:</p>\n<p>  b. First thing we need to specify is the entry point of our app. Webpack will start to crawl through all the used dependencies starting from this file.<br>  c. Then we specify where we want to output the resulting bundled file.<br>  d. And finally we specify that we want to process every file in our source directory using babel.</p>\n<h3 id=\"51\"><a href=\"#51\" class=\"headerlink\" title=\"51.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/51\">51.</a></h3><p>To create our bundle we just need to call <code>webpack</code> from the command line.</p>\n<h3 id=\"52\"><a href=\"#52\" class=\"headerlink\" title=\"52.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/52\">52.</a></h3><p>The last bit we need before seeing our application working is to write a small server app using Express that allows us to serve the static files that compose our app at this stage. We can do this using the <code>Express.static</code> middleware.</p>\n<h3 id=\"53\"><a href=\"#53\" class=\"headerlink\" title=\"53.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/53\">53.</a></h3><p>Let’s finally test our app!</p>\n<p>(Show frontend only app, show routing with hashes, code only rendered on the client and 404 not understood)</p>\n<h3 id=\"54\"><a href=\"#54\" class=\"headerlink\" title=\"54.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/54\">54.</a></h3><p>So What we have done so far?</p>\n<ol>\n<li>We defined our views combining a bunch of different React components</li>\n<li>We added routing using React Router</li>\n<li>We compiled our application for the browser using Babel and Webpack</li>\n<li>Then we executed the application served through a static Express server</li>\n</ol>\n<h3 id=\"55\"><a href=\"#55\" class=\"headerlink\" title=\"55.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/55\">55.</a></h3><p>Ok nothing so exiting so far, let’s now add Server Side Rendering and Routing!</p>\n<h3 id=\"56\"><a href=\"#56\" class=\"headerlink\" title=\"56.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/56\">56.</a></h3><p>When we executed our front-end only application you probably noticed that our URLS were looking a bit weird. The only changing part was prefixed by an hashtag symbol. That’s because we were using the <code>hashHistory</code> mode in our router. This route works very well for frontend-only applications, because it makes shareable link pointing to the right dynamic section, even when in the server you only have an <code>index.html</code> page.</p>\n<p>We need now to switch to full routes (without hashtags) and to do so we can simply change our <code>hashHistory</code> to <code>browserHistory</code>.</p>\n<h3 id=\"57\"><a href=\"#57\" class=\"headerlink\" title=\"57.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/57\">57.</a></h3><p>Now we also want to convert our old <code>index.html</code> to a generic <em>ejs</em> template. Our new file looks almost identical, with the only exception that inside our <code>main</code> block we have now an <em>ejs</em> template variable called <code>markup</code> that allows us to inject arbitrary html code into it. We are going to use this to inject the React generated markup when rendering from the server.</p>\n<h3 id=\"58\"><a href=\"#58\" class=\"headerlink\" title=\"58.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/58\">58.</a></h3><p>Now the last step is to update our server application to support universal routing and rendering. To do so we need to import some libraries from React, ReactDom e ReactRouter. We also import our routes from our frontend-only app and the <code>NotFoundPage</code> component.</p>\n<p>Finally we also enable the support for <em>ejs</em> templates.</p>\n<h3 id=\"59\"><a href=\"#59\" class=\"headerlink\" title=\"59.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/59\">59.</a></h3><p>Now let’s get to the most interesting part, let’s see how the universal routing and rendering works.</p>\n<p>The important part of the code here is the Express route defined with <code>app.get(&#39;*&#39;, (req, res) =&gt; {...})</code>.</p>\n<p>This is an Express <em>catch-all</em> route that will intercept all the <em>GET</em> requests to every URL in the server (not previously matched to a static file). Inside this route, we take care of delegating the routing logic to the React Router <code>match</code> function.</p>\n<p><code>match</code> accepts two parameters: the first one is a configuration object and the second is a callback function. The configuration object must have two keys:</p>\n<ul>\n<li><code>routes</code>: used to pass the React Router routes configuration. Here, we are passing the exact same configuration that we used for the client-side rendering.</li>\n<li><code>location</code>: This is used to specify the currently requested URL.</li>\n</ul>\n<p>The callback function is called at the end of the matching. It will receive three arguments: <code>error</code>, <code>redirectLocation</code> and <code>renderProps</code>. We can use them to determine what exactly the result of the match operation was.</p>\n<p>We can have four different cases that we need to handle:</p>\n<ol>\n<li>The first case is when we have an error during the routing resolution. To handle this case, we simply return a 500 internal server error response to the browser.</li>\n<li>The second case is when we match a route that is a redirect route. In this case, we need to create a server redirect message (302 redirect) to tell the browser to go to the new destination (this is not really happening in our application because we are not using redirect routes in our React Router configuration, but it’s good to have it ready in case we decide to keep evolving our application).</li>\n<li>The third case is when we match a route and we have to render the associated component. In this case, the argument renderProps is an object that contains the data we need to use to render the component. The component we are rendering is RouterContext (contained in the React Router module), which is responsible for rendering the full component tree using the values in renderProps.</li>\n<li>The last case is when the route is not matched, and here we can simply return a 404 not found error to the browser.</li>\n</ol>\n<p>This is the core of our server- side routing mechanism and we use the ReactDOM <code>renderToString</code> function to be able to render the HTML code that represents the component associated to the currently matched route.</p>\n<p>Finally, we inject the resulting HTML into the <code>index.ejs</code> template we defined before to obtain the full HTML page that we send to the browser.</p>\n<h3 id=\"60\"><a href=\"#60\" class=\"headerlink\" title=\"60.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/60\">60.</a></h3><p>Let’s test the app again.</p>\n<p>(Show universal routing and rendering working when changing and reloading pages).</p>\n<h3 id=\"61\"><a href=\"#61\" class=\"headerlink\" title=\"61.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/61\">61.</a></h3><p>Quick recap about what was done in this presentation:</p>\n<ul>\n<li>Create a Single Page Application with React and React Router</li>\n<li>Add server side routing and rendering using React and React Router libraries in out Express app</li>\n</ul>\n<h3 id=\"62\"><a href=\"#62\" class=\"headerlink\" title=\"62.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/62\">62.</a></h3><p>What can we do next to have a fully-fledged Universal app.</p>\n<ul>\n<li>Add Universal Data Retrieval</li>\n<li>Add Universal State Management</li>\n</ul>\n<h3 id=\"63\"><a href=\"#63\" class=\"headerlink\" title=\"63.\"></a><a href=\"http://slides.com/lucianomammino/universal-js-web-applications-with-react-codemotion-milan-2016#/63\">63.</a></h3><p>Thanks everybody for being here!</p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p>Big thanks to the organizers of the event for giving me this chance to be there on the stage. Also great thanks to my great friends Alessandro Cinelli (<a href=\"https://twitter.com/cirpo\">@cirpo</a>), Andrea Mangano (<a href=\"https://twitter.com/andreaman87\">@andreaman87</a>), Aleksandar Čambas and Peter Caulfield (<a href=\"https://twitter.com/quasi_modal\">@quasi_modal</a>) for reviewing my slide deck and for giving me tons of advices!</p>\n<h3 id=\"Some-photos-from-Twitter\"><a href=\"#Some-photos-from-Twitter\" class=\"headerlink\" title=\"Some photos from Twitter\"></a>Some photos from Twitter</h3><p>Gigantic thanks also to whoever took pictures and shared them on Twitter, some here:</p>\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/loige\">@loige</a> on stage <a href=\"https://twitter.com/hashtag/codemotion?src=hash\">#codemotion</a> Milan! Rock on! <a href=\"https://t.co/9Y97YENhIG\">pic.twitter.com/9Y97YENhIG</a></p>&mdash; cirpo (@cirpo) <a href=\"https://twitter.com/cirpo/status/802170435425234948\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"en\" dir=\"ltr\">It&#39;s time of <a href=\"https://twitter.com/hashtag/universaljs?src=hash\">#universaljs</a> <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> with <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/2XrAZFOBRe\">pic.twitter.com/2XrAZFOBRe</a></p>&mdash; Andrea Mangano (@andreaman87) <a href=\"https://twitter.com/andreaman87/status/802170179379752960\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"it\"><p lang=\"it\" dir=\"ltr\">Ottimo talk, su <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a>. Forse le più belle slide mai viste. Chiare ed essenziali <a href=\"https://twitter.com/hashtag/Codemotion?src=hash\">#Codemotion</a> <a href=\"https://twitter.com/loige\">@loige</a> <a href=\"https://t.co/DhCRV8NPMX\">pic.twitter.com/DhCRV8NPMX</a></p>&mdash; Daniele Montagni (@dmontagni) <a href=\"https://twitter.com/dmontagni/status/802182660189724672\">25 novembre 2016</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>I hope you liked this article and that you are now somehow confident that building universal JavaScript application is not that hard… you just need to start somewhere!<br>Feel free to leave any question or comment below on the comments box.</p>\n<p>Cheers, see you next time! 🍻</p>\n"},{"uuid":"f579dce5-6865-4048-8471-656d02d49066","layout":"post","title":"Simple echo server written in Go, dockerized!","slug":"simple-echo-server-written-in-go-dockerized","subtitle":"How to write a very simple server app written in Go language and use a docker container to launch it ","date":"2014-06-29T14:43:56.000Z","updated":"2015-03-01T13:01:20.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":"Simple server app written in Go lang and docker","meta_description":"How to write a very simple server app written in Go language and use a docker container to launch it ","_content":"\nIn this post we will see how to write a (very) simple **Go server app** and how to put it into a **Docker container** and run it.\n\n![Dockerize a Go application](/content/images/2014/Jun/dockerize-go-app.png)\n\n**Disclaimer**: I'm an absolute beginner with both [Go](http://golang.org) and [Docker](https://docker.com) and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are **very** encouraged to scream at me in the comments ([Comments](#disqus_thread)), I will be extremely thankful ;)\n\n##Introduction\n\nWe are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.\n\n*\"Luciano, you are a PHP developer, why bothering with Go?\"* \n\nNice question! Well, there are at least two reasons for this choice:\n\n- **Experimenting**! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.\n- **Simplicity**! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.\n\nFor those who are not familiar with these two technologies I suggest give the official websites a shot ([Docker.com](https://docker.com) and [Golang.org](http://golang.org)) as I will not provide many specific details about them.\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at [Boot2Docker](https://github.com/boot2docker/boot2docker), it will definitely make your life easier.\n\nBeware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).\n\n##The Go echo server\n\nOk, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that *\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"*.\n\nSo let's just write some code. The following script has been widely inspired by [this one](https://coderwall.com/p/wohavg).\n\n```go\n//server.go\n\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (\n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {\n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -> %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {\n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n  \n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n```\n\nOk, the code is commented at it should be understandable enough. \nLet's try if it works.\n\nJust launch the server with the command:\n\n```bash\ngo run server.go\n```\n\nWe will have our server running and it will print out something like:\n\n```\nListening on :3333\n```\n\nLet's open another terminal window to try to speak with him. We will use [netcat](http://wikipedia.org/wiki/Netcat):\n\n```bash \necho \"Hello server\" | nc localhost 3333\n```\n\nThat's what we should see in the two terminal windows:\n\n![Go echo server terminal windows execution](/content/images/2014/Jun/go-server-output.png)\n\nThe terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a *very useful* response from the server.\n\nThat's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a `CTRL+C`.\n\n\n##Dockerizing the application\n\nOk, now we want to *\"dockerize\"* this simple application. Wait, what does *\"dockerize\"* mean? Well, by *\"dockerizing\"* an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.\n\n\n### Images, Containers and Dockerfile(s)\n\nAn extract from the Docker documentation should make things a bit clearer:\n\n> Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.\n\n\nThere are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"*Dockerfile*\".\n\nA \"*Dockerfile*\" is a file called exactly `Dockerfile` that contains several reproducible instructions to create a Docker *image* from scratch.\n\n*What the hell is an image and how it is different from a container?*\n\nIf you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a [brilliant answer from stackoverflow](http://stackoverflow.com/a/21499102/495177) that should make things a bit clearer:\n\n> An image is the set of layers that are built up and can be moved around. Images are read-only.\n> \n> http://docs.docker.io/en/latest/terms/image/\n> http://docs.docker.io/en/latest/terms/layer/\nA container is an active (or inactive if exited) stateful instantiation of an image.\n>\n> http://docs.docker.io/en/latest/terms/container/\n\nFeel free to visit these links if things are not clear yet.\n\nNow let's get back to our `Dockerfile`. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.\n\n### Let's write the Dockerfile\n\nEnough talking, let's jump to the code:\n\n```\nFROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang\nRUN apt-get update\nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]\n```\n\n**Note:** A reader mentioned in a [comment](#comment-1881765009) that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that's your case you can use a minimal dockerfile optimized for GoLang provided by in the [GoLang blog](https://blog.golang.org/docker#TOC_3.) itself.\n\nLet's analyze all the instructions one by one:\n\n- `FROM ubuntu:12.04` defines the base image from which to start. In this case we will use the `ubuntu:12.04` image, a very lightweight image based on ubuntu 12.04.\n\n- `MAINTAINER Luciano Mammino` isn't it self-explanatory enough? ;)\n\n- `RUN apt-get install -y python-software-properties` installs the `python-software-properties` package to be able to execute `add-apt-repository` next.\n\n- `RUN add-apt-repository ppa:duh/golang`, `RUN apt-get update`, `RUN apt-get install -y golang` and  `RUN apt-get install -y golang`: adds a custom repository for Go and installs it.\n\n- `ADD server.go /var/server/server.go`: copies the file `server.go` into the image (storing it into the `/var/server/` folder)\n\n- `EXPOSE 3333`: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.\n\n- `CMD [\"go\", \"run\", \"/var/server/server.go\"]`: describes the command to execute our Go application when the container is launched (yes, it will execute `go run /var/server/server.go`).\n\n### Let's build!\n\nBefore building the image from our Dockerfile, if you are using `boot2docker`, you need to run it with:\n\n```bash\nboot2docker start\n```\n\nIn case it prints out something like this:\n\n```\n2014/06/29 16:09:32 Started.\n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:\n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375\n```\n\nRun the suggested `export` command. Also take note of the given IP address as we would need to use later to connect to our server.\n\nNow just `cd` into the folder that contains the `Dockerfile` and the `server.go` file and run:\n\n```bash\ndocker build -t goecho .\n```\n\nNotice the `.` that refers to the current folder (yes you got it, it says Docker to look for a `Dockerfile` whitin it).\n\nThe `-t goecho` option is not mandatory and is used to \"give a convenience name\" to the resulting image.\n\nYou will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:\n\n```\nSuccessfully built 713c09526bc1\n```\n\nYou can also execute\n\n```bash\ndocker images\n```\n\nTo list all the available images (you should see our `goecho` on the top of the list).\n\nOur image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.\n\n### Running the container\n\nRunning the image and having a live container is just a matter of running:\n\n```bash\ndocker run -i -t -p 3333:3333 goecho\n```\n\nThe options `-i` and `-t` allows us to execute the container into the interactive mode that allows us to shut it down with `CTRL+C` when needed.\n\nThe option `-p 3333:3333` maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.\n\nNow our container is live and running and our server application is active.\n\nLet's open a new terminal window and try again:\n\n```bash\necho \"Hello server\" | nc <ip> 3333\n```\n\n`<ip>` is `localhost` if you are not using `boot2docker`. If you are using it you need to provide the IP of the intermediade virtual machine provided by `boot2docker`. It is the one we recorded before, but if you can't find it you can simply run `boot2docker ip` to discover it (it's usually `192.168.59.103`).\n\n## Conclusions\n\nThat's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.\n\nThank you\n","source":"_posts/simple-echo-server-written-in-go-dockerized.md","raw":"uuid:             f579dce5-6865-4048-8471-656d02d49066\nlayout:           post\ntitle:            'Simple echo server written in Go, dockerized!'\nslug:             simple-echo-server-written-in-go-dockerized\nsubtitle:         'How to write a very simple server app written in Go language and use a docker container to launch it '\ndate:             '2014-06-29T14:43:56.000Z'\nupdated:          '2015-03-01T13:01:20.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       'Simple server app written in Go lang and docker'\nmeta_description: 'How to write a very simple server app written in Go language and use a docker container to launch it '\ntags:\n  - Server\n  - GoLang\n  - Docker\n\n---\n\nIn this post we will see how to write a (very) simple **Go server app** and how to put it into a **Docker container** and run it.\n\n![Dockerize a Go application](/content/images/2014/Jun/dockerize-go-app.png)\n\n**Disclaimer**: I'm an absolute beginner with both [Go](http://golang.org) and [Docker](https://docker.com) and this is just an experiment I did to start to explore this two interesting technologies. If you'll find something weird or wrong you are **very** encouraged to scream at me in the comments ([Comments](#disqus_thread)), I will be extremely thankful ;)\n\n##Introduction\n\nWe are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.\n\n*\"Luciano, you are a PHP developer, why bothering with Go?\"* \n\nNice question! Well, there are at least two reasons for this choice:\n\n- **Experimenting**! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.\n- **Simplicity**! Writing a server app in Go is just a matter of writing few lines of code in a file, so it's an very simple scenario to test the integration with Docker.\n\nFor those who are not familiar with these two technologies I suggest give the official websites a shot ([Docker.com](https://docker.com) and [Golang.org](http://golang.org)) as I will not provide many specific details about them.\nI assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at [Boot2Docker](https://github.com/boot2docker/boot2docker), it will definitely make your life easier.\n\nBeware that Go on your local machine is needed only if you want to test the application before \"dockerizing\" it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that's infact the real advantage of using Docker).\n\n##The Go echo server\n\nOk, first of all let's write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that *\"Hi, I received your message! It was X bytes long and that's what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!\"*.\n\nSo let's just write some code. The following script has been widely inspired by [this one](https://coderwall.com/p/wohavg).\n\n```go\n//server.go\n\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    \"strconv\"\n    \"bytes\"\n)\n\nconst (\n    CONN_HOST = \"\"\n    CONN_PORT = \"3333\"\n    CONN_TYPE = \"tcp\"\n)\n\nfunc main() {\n    // Listen for incoming connections.\n    l, err := net.Listen(CONN_TYPE, \":\"+CONN_PORT)\n    if err != nil {\n        fmt.Println(\"Error listening:\", err.Error())\n        os.Exit(1)\n    }\n    // Close the listener when the application closes.\n    defer l.Close()\n    fmt.Println(\"Listening on \" + CONN_HOST + \":\" + CONN_PORT)\n    for {\n        // Listen for an incoming connection.\n        conn, err := l.Accept()\n        if err != nil {\n            fmt.Println(\"Error accepting: \", err.Error())\n            os.Exit(1)\n        }\n\n        //logs an incoming message\n        fmt.Printf(\"Received message %s -> %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\n        // Handle connections in a new goroutine.\n        go handleRequest(conn)\n    }\n}\n\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {\n  // Make a buffer to hold incoming data.\n  buf := make([]byte, 1024)\n  // Read the incoming connection into the buffer.\n  reqLen, err := conn.Read(buf)\n  if err != nil {\n    fmt.Println(\"Error reading:\", err.Error())\n  }\n  // Builds the message.\n  message := \"Hi, I received your message! It was \"\n  message += strconv.Itoa(reqLen) \n  message += \" bytes long and that's what it said: \\\"\" \n  n := bytes.Index(buf, []byte{0})\n  message += string(buf[:n-1])\n  message += \"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"\n  \n  // Write the message in the connection channel.\n  conn.Write([]byte(message));\n  // Close the connection when you're done with it.\n  conn.Close()\n}\n```\n\nOk, the code is commented at it should be understandable enough. \nLet's try if it works.\n\nJust launch the server with the command:\n\n```bash\ngo run server.go\n```\n\nWe will have our server running and it will print out something like:\n\n```\nListening on :3333\n```\n\nLet's open another terminal window to try to speak with him. We will use [netcat](http://wikipedia.org/wiki/Netcat):\n\n```bash \necho \"Hello server\" | nc localhost 3333\n```\n\nThat's what we should see in the two terminal windows:\n\n![Go echo server terminal windows execution](/content/images/2014/Jun/go-server-output.png)\n\nThe terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple \"Hello server\" message and received a *very useful* response from the server.\n\nThat's all from the Go side. In the next part of the post we will see how to \"dockerize\" this simple Go app. For now, you can obviously quit the server with a `CTRL+C`.\n\n\n##Dockerizing the application\n\nOk, now we want to *\"dockerize\"* this simple application. Wait, what does *\"dockerize\"* mean? Well, by *\"dockerizing\"* an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.\n\n\n### Images, Containers and Dockerfile(s)\n\nAn extract from the Docker documentation should make things a bit clearer:\n\n> Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.\n\n\nThere are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a \"*Dockerfile*\".\n\nA \"*Dockerfile*\" is a file called exactly `Dockerfile` that contains several reproducible instructions to create a Docker *image* from scratch.\n\n*What the hell is an image and how it is different from a container?*\n\nIf you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a [brilliant answer from stackoverflow](http://stackoverflow.com/a/21499102/495177) that should make things a bit clearer:\n\n> An image is the set of layers that are built up and can be moved around. Images are read-only.\n> \n> http://docs.docker.io/en/latest/terms/image/\n> http://docs.docker.io/en/latest/terms/layer/\nA container is an active (or inactive if exited) stateful instantiation of an image.\n>\n> http://docs.docker.io/en/latest/terms/container/\n\nFeel free to visit these links if things are not clear yet.\n\nNow let's get back to our `Dockerfile`. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to \"install\" all the needed dependencies and describe how to execute the contained application.\n\n### Let's write the Dockerfile\n\nEnough talking, let's jump to the code:\n\n```\nFROM ubuntu:12.04\n\nMAINTAINER Luciano Mammino\n\nRUN apt-get install -y python-software-properties\n\nRUN add-apt-repository ppa:duh/golang\nRUN apt-get update\nRUN apt-get install -y golang\n\nADD server.go /var/server/server.go\n\nEXPOSE 3333\n\nCMD [\"go\", \"run\", \"/var/server/server.go\"]\n```\n\n**Note:** A reader mentioned in a [comment](#comment-1881765009) that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that's your case you can use a minimal dockerfile optimized for GoLang provided by in the [GoLang blog](https://blog.golang.org/docker#TOC_3.) itself.\n\nLet's analyze all the instructions one by one:\n\n- `FROM ubuntu:12.04` defines the base image from which to start. In this case we will use the `ubuntu:12.04` image, a very lightweight image based on ubuntu 12.04.\n\n- `MAINTAINER Luciano Mammino` isn't it self-explanatory enough? ;)\n\n- `RUN apt-get install -y python-software-properties` installs the `python-software-properties` package to be able to execute `add-apt-repository` next.\n\n- `RUN add-apt-repository ppa:duh/golang`, `RUN apt-get update`, `RUN apt-get install -y golang` and  `RUN apt-get install -y golang`: adds a custom repository for Go and installs it.\n\n- `ADD server.go /var/server/server.go`: copies the file `server.go` into the image (storing it into the `/var/server/` folder)\n\n- `EXPOSE 3333`: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.\n\n- `CMD [\"go\", \"run\", \"/var/server/server.go\"]`: describes the command to execute our Go application when the container is launched (yes, it will execute `go run /var/server/server.go`).\n\n### Let's build!\n\nBefore building the image from our Dockerfile, if you are using `boot2docker`, you need to run it with:\n\n```bash\nboot2docker start\n```\n\nIn case it prints out something like this:\n\n```\n2014/06/29 16:09:32 Started.\n2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:\n2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375\n```\n\nRun the suggested `export` command. Also take note of the given IP address as we would need to use later to connect to our server.\n\nNow just `cd` into the folder that contains the `Dockerfile` and the `server.go` file and run:\n\n```bash\ndocker build -t goecho .\n```\n\nNotice the `.` that refers to the current folder (yes you got it, it says Docker to look for a `Dockerfile` whitin it).\n\nThe `-t goecho` option is not mandatory and is used to \"give a convenience name\" to the resulting image.\n\nYou will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:\n\n```\nSuccessfully built 713c09526bc1\n```\n\nYou can also execute\n\n```bash\ndocker images\n```\n\nTo list all the available images (you should see our `goecho` on the top of the list).\n\nOur image is ready to be run and trasformed into a live container. We'll see how to do it in the next part of the post.\n\n### Running the container\n\nRunning the image and having a live container is just a matter of running:\n\n```bash\ndocker run -i -t -p 3333:3333 goecho\n```\n\nThe options `-i` and `-t` allows us to execute the container into the interactive mode that allows us to shut it down with `CTRL+C` when needed.\n\nThe option `-p 3333:3333` maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.\n\nNow our container is live and running and our server application is active.\n\nLet's open a new terminal window and try again:\n\n```bash\necho \"Hello server\" | nc <ip> 3333\n```\n\n`<ip>` is `localhost` if you are not using `boot2docker`. If you are using it you need to provide the IP of the intermediade virtual machine provided by `boot2docker`. It is the one we recorded before, but if you can't find it you can simply run `boot2docker ip` to discover it (it's usually `192.168.59.103`).\n\n## Conclusions\n\nThat's only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.\n\nThank you\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrz10013svvun1s7brf1","content":"<p>In this post we will see how to write a (very) simple <strong>Go server app</strong> and how to put it into a <strong>Docker container</strong> and run it.</p>\n<p><img src=\"/content/images/2014/Jun/dockerize-go-app.png\" alt=\"Dockerize a Go application\"></p>\n<p><strong>Disclaimer</strong>: I’m an absolute beginner with both <a href=\"http://golang.org\" target=\"_blank\" rel=\"external\">Go</a> and <a href=\"https://docker.com\" target=\"_blank\" rel=\"external\">Docker</a> and this is just an experiment I did to start to explore this two interesting technologies. If you’ll find something weird or wrong you are <strong>very</strong> encouraged to scream at me in the comments (<a href=\"#disqus_thread\">Comments</a>), I will be extremely thankful ;)</p>\n<p>##Introduction</p>\n<p>We are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.</p>\n<p><em>“Luciano, you are a PHP developer, why bothering with Go?”</em> </p>\n<p>Nice question! Well, there are at least two reasons for this choice:</p>\n<ul>\n<li><strong>Experimenting</strong>! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.</li>\n<li><strong>Simplicity</strong>! Writing a server app in Go is just a matter of writing few lines of code in a file, so it’s an very simple scenario to test the integration with Docker.</li>\n</ul>\n<p>For those who are not familiar with these two technologies I suggest give the official websites a shot (<a href=\"https://docker.com\" target=\"_blank\" rel=\"external\">Docker.com</a> and <a href=\"http://golang.org\" target=\"_blank\" rel=\"external\">Golang.org</a>) as I will not provide many specific details about them.<br>I assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at <a href=\"https://github.com/boot2docker/boot2docker\" target=\"_blank\" rel=\"external\">Boot2Docker</a>, it will definitely make your life easier.</p>\n<p>Beware that Go on your local machine is needed only if you want to test the application before “dockerizing” it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that’s infact the real advantage of using Docker).</p>\n<p>##The Go echo server</p>\n<p>Ok, first of all let’s write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that <em>“Hi, I received your message! It was X bytes long and that’s what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!”</em>.</p>\n<p>So let’s just write some code. The following script has been widely inspired by <a href=\"https://coderwall.com/p/wohavg\" target=\"_blank\" rel=\"external\">this one</a>.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//server.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"net\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">    <span class=\"string\">\"strconv\"</span></div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">    CONN_HOST = <span class=\"string\">\"\"</span></div><div class=\"line\">    CONN_PORT = <span class=\"string\">\"3333\"</span></div><div class=\"line\">    CONN_TYPE = <span class=\"string\">\"tcp\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Listen for incoming connections.</span></div><div class=\"line\">    l, err := net.Listen(CONN_TYPE, <span class=\"string\">\":\"</span>+CONN_PORT)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"Error listening:\"</span>, err.Error())</div><div class=\"line\">        os.Exit(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Close the listener when the application closes.</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> l.Close()</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Listening on \"</span> + CONN_HOST + <span class=\"string\">\":\"</span> + CONN_PORT)</div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Listen for an incoming connection.</span></div><div class=\"line\">        conn, err := l.Accept()</div><div class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            fmt.Println(<span class=\"string\">\"Error accepting: \"</span>, err.Error())</div><div class=\"line\">            os.Exit(<span class=\"number\">1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//logs an incoming message</span></div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Received message %s -&gt; %s \\n\"</span>, conn.RemoteAddr(), conn.LocalAddr())</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Handle connections in a new goroutine.</span></div><div class=\"line\">        <span class=\"keyword\">go</span> handleRequest(conn)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handles incoming requests.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleRequest</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Make a buffer to hold incoming data.</span></div><div class=\"line\">  buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</div><div class=\"line\">  <span class=\"comment\">// Read the incoming connection into the buffer.</span></div><div class=\"line\">  reqLen, err := conn.Read(buf)</div><div class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Error reading:\"</span>, err.Error())</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Builds the message.</span></div><div class=\"line\">  message := <span class=\"string\">\"Hi, I received your message! It was \"</span></div><div class=\"line\">  message += strconv.Itoa(reqLen) </div><div class=\"line\">  message += <span class=\"string\">\" bytes long and that's what it said: \\\"\"</span> </div><div class=\"line\">  n := bytes.Index(buf, []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  message += <span class=\"keyword\">string</span>(buf[:n<span class=\"number\">-1</span>])</div><div class=\"line\">  message += <span class=\"string\">\"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// Write the message in the connection channel.</span></div><div class=\"line\">  conn.Write([]<span class=\"keyword\">byte</span>(message));</div><div class=\"line\">  <span class=\"comment\">// Close the connection when you're done with it.</span></div><div class=\"line\">  conn.Close()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Ok, the code is commented at it should be understandable enough.<br>Let’s try if it works.</p>\n<p>Just launch the server with the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go run server.go</div></pre></td></tr></table></figure>\n<p>We will have our server running and it will print out something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listening on :3333</div></pre></td></tr></table></figure>\n<p>Let’s open another terminal window to try to speak with him. We will use <a href=\"http://wikipedia.org/wiki/Netcat\" target=\"_blank\" rel=\"external\">netcat</a>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello server\"</span> | nc localhost 3333</div></pre></td></tr></table></figure>\n<p>That’s what we should see in the two terminal windows:</p>\n<p><img src=\"/content/images/2014/Jun/go-server-output.png\" alt=\"Go echo server terminal windows execution\"></p>\n<p>The terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple “Hello server” message and received a <em>very useful</em> response from the server.</p>\n<p>That’s all from the Go side. In the next part of the post we will see how to “dockerize” this simple Go app. For now, you can obviously quit the server with a <code>CTRL+C</code>.</p>\n<p>##Dockerizing the application</p>\n<p>Ok, now we want to <em>“dockerize”</em> this simple application. Wait, what does <em>“dockerize”</em> mean? Well, by <em>“dockerizing”</em> an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.</p>\n<h3 id=\"Images-Containers-and-Dockerfile-s\"><a href=\"#Images-Containers-and-Dockerfile-s\" class=\"headerlink\" title=\"Images, Containers and Dockerfile(s)\"></a>Images, Containers and Dockerfile(s)</h3><p>An extract from the Docker documentation should make things a bit clearer:</p>\n<blockquote>\n<p>Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.</p>\n</blockquote>\n<p>There are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a “<em>Dockerfile</em>“.</p>\n<p>A “<em>Dockerfile</em>“ is a file called exactly <code>Dockerfile</code> that contains several reproducible instructions to create a Docker <em>image</em> from scratch.</p>\n<p><em>What the hell is an image and how it is different from a container?</em></p>\n<p>If you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a <a href=\"http://stackoverflow.com/a/21499102/495177\" target=\"_blank\" rel=\"external\">brilliant answer from stackoverflow</a> that should make things a bit clearer:</p>\n<blockquote>\n<p>An image is the set of layers that are built up and can be moved around. Images are read-only.</p>\n<p><a href=\"http://docs.docker.io/en/latest/terms/image/\" target=\"_blank\" rel=\"external\">http://docs.docker.io/en/latest/terms/image/</a><br><a href=\"http://docs.docker.io/en/latest/terms/layer/\" target=\"_blank\" rel=\"external\">http://docs.docker.io/en/latest/terms/layer/</a><br>A container is an active (or inactive if exited) stateful instantiation of an image.</p>\n<p><a href=\"http://docs.docker.io/en/latest/terms/container/\" target=\"_blank\" rel=\"external\">http://docs.docker.io/en/latest/terms/container/</a></p>\n</blockquote>\n<p>Feel free to visit these links if things are not clear yet.</p>\n<p>Now let’s get back to our <code>Dockerfile</code>. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to “install” all the needed dependencies and describe how to execute the contained application.</p>\n<h3 id=\"Let’s-write-the-Dockerfile\"><a href=\"#Let’s-write-the-Dockerfile\" class=\"headerlink\" title=\"Let’s write the Dockerfile\"></a>Let’s write the Dockerfile</h3><p>Enough talking, let’s jump to the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM ubuntu:12.04</div><div class=\"line\"></div><div class=\"line\">MAINTAINER Luciano Mammino</div><div class=\"line\"></div><div class=\"line\">RUN apt-get install -y python-software-properties</div><div class=\"line\"></div><div class=\"line\">RUN add-apt-repository ppa:duh/golang</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">RUN apt-get install -y golang</div><div class=\"line\"></div><div class=\"line\">ADD server.go /var/server/server.go</div><div class=\"line\"></div><div class=\"line\">EXPOSE 3333</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;go&quot;, &quot;run&quot;, &quot;/var/server/server.go&quot;]</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong> A reader mentioned in a <a href=\"#comment-1881765009\">comment</a> that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that’s your case you can use a minimal dockerfile optimized for GoLang provided by in the <a href=\"https://blog.golang.org/docker#TOC_3.\" target=\"_blank\" rel=\"external\">GoLang blog</a> itself.</p>\n<p>Let’s analyze all the instructions one by one:</p>\n<ul>\n<li><p><code>FROM ubuntu:12.04</code> defines the base image from which to start. In this case we will use the <code>ubuntu:12.04</code> image, a very lightweight image based on ubuntu 12.04.</p>\n</li>\n<li><p><code>MAINTAINER Luciano Mammino</code> isn’t it self-explanatory enough? ;)</p>\n</li>\n<li><p><code>RUN apt-get install -y python-software-properties</code> installs the <code>python-software-properties</code> package to be able to execute <code>add-apt-repository</code> next.</p>\n</li>\n<li><p><code>RUN add-apt-repository ppa:duh/golang</code>, <code>RUN apt-get update</code>, <code>RUN apt-get install -y golang</code> and  <code>RUN apt-get install -y golang</code>: adds a custom repository for Go and installs it.</p>\n</li>\n<li><p><code>ADD server.go /var/server/server.go</code>: copies the file <code>server.go</code> into the image (storing it into the <code>/var/server/</code> folder)</p>\n</li>\n<li><p><code>EXPOSE 3333</code>: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.</p>\n</li>\n<li><p><code>CMD [&quot;go&quot;, &quot;run&quot;, &quot;/var/server/server.go&quot;]</code>: describes the command to execute our Go application when the container is launched (yes, it will execute <code>go run /var/server/server.go</code>).</p>\n</li>\n</ul>\n<h3 id=\"Let’s-build\"><a href=\"#Let’s-build\" class=\"headerlink\" title=\"Let’s build!\"></a>Let’s build!</h3><p>Before building the image from our Dockerfile, if you are using <code>boot2docker</code>, you need to run it with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boot2docker start</div></pre></td></tr></table></figure>\n<p>In case it prints out something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2014/06/29 16:09:32 Started.</div><div class=\"line\">2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:</div><div class=\"line\">2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375</div></pre></td></tr></table></figure>\n<p>Run the suggested <code>export</code> command. Also take note of the given IP address as we would need to use later to connect to our server.</p>\n<p>Now just <code>cd</code> into the folder that contains the <code>Dockerfile</code> and the <code>server.go</code> file and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t goecho .</div></pre></td></tr></table></figure>\n<p>Notice the <code>.</code> that refers to the current folder (yes you got it, it says Docker to look for a <code>Dockerfile</code> whitin it).</p>\n<p>The <code>-t goecho</code> option is not mandatory and is used to “give a convenience name” to the resulting image.</p>\n<p>You will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Successfully built 713c09526bc1</div></pre></td></tr></table></figure>\n<p>You can also execute</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images</div></pre></td></tr></table></figure>\n<p>To list all the available images (you should see our <code>goecho</code> on the top of the list).</p>\n<p>Our image is ready to be run and trasformed into a live container. We’ll see how to do it in the next part of the post.</p>\n<h3 id=\"Running-the-container\"><a href=\"#Running-the-container\" class=\"headerlink\" title=\"Running the container\"></a>Running the container</h3><p>Running the image and having a live container is just a matter of running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -i -t -p 3333:3333 goecho</div></pre></td></tr></table></figure>\n<p>The options <code>-i</code> and <code>-t</code> allows us to execute the container into the interactive mode that allows us to shut it down with <code>CTRL+C</code> when needed.</p>\n<p>The option <code>-p 3333:3333</code> maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.</p>\n<p>Now our container is live and running and our server application is active.</p>\n<p>Let’s open a new terminal window and try again:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello server\"</span> | nc &lt;ip&gt; 3333</div></pre></td></tr></table></figure>\n<p><code>&lt;ip&gt;</code> is <code>localhost</code> if you are not using <code>boot2docker</code>. If you are using it you need to provide the IP of the intermediade virtual machine provided by <code>boot2docker</code>. It is the one we recorded before, but if you can’t find it you can simply run <code>boot2docker ip</code> to discover it (it’s usually <code>192.168.59.103</code>).</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>That’s only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.</p>\n<p>Thank you</p>\n","excerpt":"","more":"<p>In this post we will see how to write a (very) simple <strong>Go server app</strong> and how to put it into a <strong>Docker container</strong> and run it.</p>\n<p><img src=\"/content/images/2014/Jun/dockerize-go-app.png\" alt=\"Dockerize a Go application\"></p>\n<p><strong>Disclaimer</strong>: I’m an absolute beginner with both <a href=\"http://golang.org\">Go</a> and <a href=\"https://docker.com\">Docker</a> and this is just an experiment I did to start to explore this two interesting technologies. If you’ll find something weird or wrong you are <strong>very</strong> encouraged to scream at me in the comments (<a href=\"#disqus_thread\">Comments</a>), I will be extremely thankful ;)</p>\n<p>##Introduction</p>\n<p>We are going to write a simple echo server in Go and then we will pack it into a Docker container for future execution/distribution.</p>\n<p><em>“Luciano, you are a PHP developer, why bothering with Go?”</em> </p>\n<p>Nice question! Well, there are at least two reasons for this choice:</p>\n<ul>\n<li><strong>Experimenting</strong>! Yes Go seems to be the next cool thing in the field and I wanted to have an excuse to try it.</li>\n<li><strong>Simplicity</strong>! Writing a server app in Go is just a matter of writing few lines of code in a file, so it’s an very simple scenario to test the integration with Docker.</li>\n</ul>\n<p>For those who are not familiar with these two technologies I suggest give the official websites a shot (<a href=\"https://docker.com\">Docker.com</a> and <a href=\"http://golang.org\">Golang.org</a>) as I will not provide many specific details about them.<br>I assume you have both technologies installed on your machine. If you are using Windows or a Mac have a look at <a href=\"https://github.com/boot2docker/boot2docker\">Boot2Docker</a>, it will definitely make your life easier.</p>\n<p>Beware that Go on your local machine is needed only if you want to test the application before “dockerizing” it. We will put the Go runtime into the Docker container in the second part of the post and this way we will be able to execute it without having Go installed in our local machine (that’s infact the real advantage of using Docker).</p>\n<p>##The Go echo server</p>\n<p>Ok, first of all let’s write and test our server app. The app should open a socket and listen for TCP requests on a given port. Then when it receives some data it should reply by saying something like that <em>“Hi, I received your message! It was X bytes long and that’s what it said: XXX ! Honestly I have no clue about what to do with your messages, so Bye Bye!”</em>.</p>\n<p>So let’s just write some code. The following script has been widely inspired by <a href=\"https://coderwall.com/p/wohavg\">this one</a>.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//server.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">    <span class=\"string\">\"net\"</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span></div><div class=\"line\">    <span class=\"string\">\"strconv\"</span></div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">    CONN_HOST = <span class=\"string\">\"\"</span></div><div class=\"line\">    CONN_PORT = <span class=\"string\">\"3333\"</span></div><div class=\"line\">    CONN_TYPE = <span class=\"string\">\"tcp\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Listen for incoming connections.</span></div><div class=\"line\">    l, err := net.Listen(CONN_TYPE, <span class=\"string\">\":\"</span>+CONN_PORT)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"Error listening:\"</span>, err.Error())</div><div class=\"line\">        os.Exit(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Close the listener when the application closes.</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> l.Close()</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Listening on \"</span> + CONN_HOST + <span class=\"string\">\":\"</span> + CONN_PORT)</div><div class=\"line\">    <span class=\"keyword\">for</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Listen for an incoming connection.</span></div><div class=\"line\">        conn, err := l.Accept()</div><div class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            fmt.Println(<span class=\"string\">\"Error accepting: \"</span>, err.Error())</div><div class=\"line\">            os.Exit(<span class=\"number\">1</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//logs an incoming message</span></div><div class=\"line\">        fmt.Printf(<span class=\"string\">\"Received message %s -&gt; %s \\n\"</span>, conn.RemoteAddr(), conn.LocalAddr())</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Handle connections in a new goroutine.</span></div><div class=\"line\">        <span class=\"keyword\">go</span> handleRequest(conn)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handles incoming requests.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleRequest</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Make a buffer to hold incoming data.</span></div><div class=\"line\">  buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</div><div class=\"line\">  <span class=\"comment\">// Read the incoming connection into the buffer.</span></div><div class=\"line\">  reqLen, err := conn.Read(buf)</div><div class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Error reading:\"</span>, err.Error())</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Builds the message.</span></div><div class=\"line\">  message := <span class=\"string\">\"Hi, I received your message! It was \"</span></div><div class=\"line\">  message += strconv.Itoa(reqLen) </div><div class=\"line\">  message += <span class=\"string\">\" bytes long and that's what it said: \\\"\"</span> </div><div class=\"line\">  n := bytes.Index(buf, []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;)</div><div class=\"line\">  message += <span class=\"keyword\">string</span>(buf[:n<span class=\"number\">-1</span>])</div><div class=\"line\">  message += <span class=\"string\">\"\\\" ! Honestly I have no clue about what to do with your messages, so Bye Bye!\\n\"</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// Write the message in the connection channel.</span></div><div class=\"line\">  conn.Write([]<span class=\"keyword\">byte</span>(message));</div><div class=\"line\">  <span class=\"comment\">// Close the connection when you're done with it.</span></div><div class=\"line\">  conn.Close()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Ok, the code is commented at it should be understandable enough.<br>Let’s try if it works.</p>\n<p>Just launch the server with the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go run server.go</div></pre></td></tr></table></figure>\n<p>We will have our server running and it will print out something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listening on :3333</div></pre></td></tr></table></figure>\n<p>Let’s open another terminal window to try to speak with him. We will use <a href=\"http://wikipedia.org/wiki/Netcat\">netcat</a>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello server\"</span> | nc localhost 3333</div></pre></td></tr></table></figure>\n<p>That’s what we should see in the two terminal windows:</p>\n<p><img src=\"/content/images/2014/Jun/go-server-output.png\" alt=\"Go echo server terminal windows execution\"></p>\n<p>The terminal window on the top is running our server and it logs all the received requests (by printing the incoming TCP address and the local one), while the second terminal is our client that sent out a simple “Hello server” message and received a <em>very useful</em> response from the server.</p>\n<p>That’s all from the Go side. In the next part of the post we will see how to “dockerize” this simple Go app. For now, you can obviously quit the server with a <code>CTRL+C</code>.</p>\n<p>##Dockerizing the application</p>\n<p>Ok, now we want to <em>“dockerize”</em> this simple application. Wait, what does <em>“dockerize”</em> mean? Well, by <em>“dockerizing”</em> an application we will be able to put the application itself and all its dependencies within a Docker container that can be easily shipped and executed elsewhere.</p>\n<h3 id=\"Images-Containers-and-Dockerfile-s\"><a href=\"#Images-Containers-and-Dockerfile-s\" class=\"headerlink\" title=\"Images, Containers and Dockerfile(s)\"></a>Images, Containers and Dockerfile(s)</h3><p>An extract from the Docker documentation should make things a bit clearer:</p>\n<blockquote>\n<p>Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.</p>\n</blockquote>\n<p>There are several ways to dockerize an application and create a dedicated Docker container. The one I prefer at the moment is by adopting a “<em>Dockerfile</em>“.</p>\n<p>A “<em>Dockerfile</em>“ is a file called exactly <code>Dockerfile</code> that contains several reproducible instructions to create a Docker <em>image</em> from scratch.</p>\n<p><em>What the hell is an image and how it is different from a container?</em></p>\n<p>If you are a noob with Docker (like me) you are probably asking yourself this question. I want to quote a <a href=\"http://stackoverflow.com/a/21499102/495177\">brilliant answer from stackoverflow</a> that should make things a bit clearer:</p>\n<blockquote>\n<p>An image is the set of layers that are built up and can be moved around. Images are read-only.</p>\n<p><a href=\"http://docs.docker.io/en/latest/terms/image/\">http://docs.docker.io/en/latest/terms/image/</a><br><a href=\"http://docs.docker.io/en/latest/terms/layer/\">http://docs.docker.io/en/latest/terms/layer/</a><br>A container is an active (or inactive if exited) stateful instantiation of an image.</p>\n<p><a href=\"http://docs.docker.io/en/latest/terms/container/\">http://docs.docker.io/en/latest/terms/container/</a></p>\n</blockquote>\n<p>Feel free to visit these links if things are not clear yet.</p>\n<p>Now let’s get back to our <code>Dockerfile</code>. Every Dockerfile contains some metadata (base image from which to start, the name of the maintainer, etc.) and a set of instruction used to build the image. These instructions are usually used to “install” all the needed dependencies and describe how to execute the contained application.</p>\n<h3 id=\"Let’s-write-the-Dockerfile\"><a href=\"#Let’s-write-the-Dockerfile\" class=\"headerlink\" title=\"Let’s write the Dockerfile\"></a>Let’s write the Dockerfile</h3><p>Enough talking, let’s jump to the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM ubuntu:12.04</div><div class=\"line\"></div><div class=\"line\">MAINTAINER Luciano Mammino</div><div class=\"line\"></div><div class=\"line\">RUN apt-get install -y python-software-properties</div><div class=\"line\"></div><div class=\"line\">RUN add-apt-repository ppa:duh/golang</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">RUN apt-get install -y golang</div><div class=\"line\"></div><div class=\"line\">ADD server.go /var/server/server.go</div><div class=\"line\"></div><div class=\"line\">EXPOSE 3333</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;go&quot;, &quot;run&quot;, &quot;/var/server/server.go&quot;]</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong> A reader mentioned in a <a href=\"#comment-1881765009\">comment</a> that this dockerfile is no longer working (probably the PPA has beem removed or its temporary unavailable). If that’s your case you can use a minimal dockerfile optimized for GoLang provided by in the <a href=\"https://blog.golang.org/docker#TOC_3.\">GoLang blog</a> itself.</p>\n<p>Let’s analyze all the instructions one by one:</p>\n<ul>\n<li><p><code>FROM ubuntu:12.04</code> defines the base image from which to start. In this case we will use the <code>ubuntu:12.04</code> image, a very lightweight image based on ubuntu 12.04.</p>\n</li>\n<li><p><code>MAINTAINER Luciano Mammino</code> isn’t it self-explanatory enough? ;)</p>\n</li>\n<li><p><code>RUN apt-get install -y python-software-properties</code> installs the <code>python-software-properties</code> package to be able to execute <code>add-apt-repository</code> next.</p>\n</li>\n<li><p><code>RUN add-apt-repository ppa:duh/golang</code>, <code>RUN apt-get update</code>, <code>RUN apt-get install -y golang</code> and  <code>RUN apt-get install -y golang</code>: adds a custom repository for Go and installs it.</p>\n</li>\n<li><p><code>ADD server.go /var/server/server.go</code>: copies the file <code>server.go</code> into the image (storing it into the <code>/var/server/</code> folder)</p>\n</li>\n<li><p><code>EXPOSE 3333</code>: exposes the port 3333 to allow containers launched from this image to listen on this port. We need exactly this port because it is the one used by our Go application.</p>\n</li>\n<li><p><code>CMD [&quot;go&quot;, &quot;run&quot;, &quot;/var/server/server.go&quot;]</code>: describes the command to execute our Go application when the container is launched (yes, it will execute <code>go run /var/server/server.go</code>).</p>\n</li>\n</ul>\n<h3 id=\"Let’s-build\"><a href=\"#Let’s-build\" class=\"headerlink\" title=\"Let’s build!\"></a>Let’s build!</h3><p>Before building the image from our Dockerfile, if you are using <code>boot2docker</code>, you need to run it with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">boot2docker start</div></pre></td></tr></table></figure>\n<p>In case it prints out something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2014/06/29 16:09:32 Started.</div><div class=\"line\">2014/06/29 16:09:32 To connect the Docker client to the Docker daemon, please set:</div><div class=\"line\">2014/06/29 16:09:32     export DOCKER_HOST=tcp://192.168.59.103:2375</div></pre></td></tr></table></figure>\n<p>Run the suggested <code>export</code> command. Also take note of the given IP address as we would need to use later to connect to our server.</p>\n<p>Now just <code>cd</code> into the folder that contains the <code>Dockerfile</code> and the <code>server.go</code> file and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t goecho .</div></pre></td></tr></table></figure>\n<p>Notice the <code>.</code> that refers to the current folder (yes you got it, it says Docker to look for a <code>Dockerfile</code> whitin it).</p>\n<p>The <code>-t goecho</code> option is not mandatory and is used to “give a convenience name” to the resulting image.</p>\n<p>You will see a series of commands being executed (yes the ones we wrote within our Dockerfile) and, if everything goes well, you should see something like this at the end:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Successfully built 713c09526bc1</div></pre></td></tr></table></figure>\n<p>You can also execute</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images</div></pre></td></tr></table></figure>\n<p>To list all the available images (you should see our <code>goecho</code> on the top of the list).</p>\n<p>Our image is ready to be run and trasformed into a live container. We’ll see how to do it in the next part of the post.</p>\n<h3 id=\"Running-the-container\"><a href=\"#Running-the-container\" class=\"headerlink\" title=\"Running the container\"></a>Running the container</h3><p>Running the image and having a live container is just a matter of running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -i -t -p 3333:3333 goecho</div></pre></td></tr></table></figure>\n<p>The options <code>-i</code> and <code>-t</code> allows us to execute the container into the interactive mode that allows us to shut it down with <code>CTRL+C</code> when needed.</p>\n<p>The option <code>-p 3333:3333</code> maps the container port 3333 to the same port on our machine. It will effectively allows us to talk with the echo server using the port 3333.</p>\n<p>Now our container is live and running and our server application is active.</p>\n<p>Let’s open a new terminal window and try again:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello server\"</span> | nc &lt;ip&gt; 3333</div></pre></td></tr></table></figure>\n<p><code>&lt;ip&gt;</code> is <code>localhost</code> if you are not using <code>boot2docker</code>. If you are using it you need to provide the IP of the intermediade virtual machine provided by <code>boot2docker</code>. It is the one we recorded before, but if you can’t find it you can simply run <code>boot2docker ip</code> to discover it (it’s usually <code>192.168.59.103</code>).</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>That’s only the very beginning with Docker, there are a bunch of other interesting features and approaches. I will probably write some other post while I will keep learning and using Docker, so stay tuned and write all your suggestions in the comments.</p>\n<p>Thank you</p>\n"},{"uuid":"f35460e0-938b-41cc-be68-3fb5143ee211","layout":"post","title":"Transparent pixel response with Symfony, how to track email opening","slug":"transparent-pixel-response-with-symfony-how-to-track-email-opening","subtitle":null,"date":"2014-06-13T10:33:04.000Z","updated":"2014-06-17T09:00:17.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIf you have ever heard about \"**transparent pixel**\", \"**1x1 blank pixel**\", \"**tracking pixel**\" or simply \"**tracking image**\" you probably know what we are going to talk about and can just [skip to the implementation](#symfonyimplementation)!\n\n\n###Introduction\n\nTransparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.\n\nOne of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.\n\n\n###Track email opening\n\nThe following image shows the typical tracking flow applied to emails:\n\n![Tracking email opening](/content/images/2014/Jun/email-tracking.png)\n\n  1. A user receives our HTML email. Within the email content there's a \"smart\" tracking image: `<img src=\"http://example.com/track.gif?id=1234\">`. Notice that it points to our server **example.com** and has a parameter `id=1234`.\n\n  2. When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.\n  \n  3. The request is handled by the **example.com** webserver. It does not handle the request as a static image but it executes some logic. It checks the `id` parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!\n  \n  4. Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.\n\n\n### Symfony implementation\n\nNow let's see how to implement this tracking flow using the Symfony framework.\n\nNotice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.\n\nFirst of all, we want to have a dedicated `Response` class to send back a transparent pixel to the client, let's call it `TransparentPixelResponse`:\n\n```php\n<?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino <lucianomammino@gmail.com>\n */\nclass TransparentPixelResponse extends Response\n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n    \n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this->headers->set('Content-Type', self::CONTENT_TYPE);\n        $this->setPrivate();\n        $this->headers->addCacheControlDirective('no-cache', true);\n        $this->headers->addCacheControlDirective('must-revalidate', true);\n    }\n}\n```\n\nThe logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.\n\nNow we can write a controller that will handle the tracking request:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\n\nHere the logic is pretty simple too. \nWe created a controller with a `trackEmail` action. The action has been assigned to the route `/track.gif` using the `Route` annotation (if you prefer you can do it also by using the yaml or the xml convention).\nWithin this action we just read the parameter `id` from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).\nThen we just have to return a new instance of our `TransparentPixelResponse` class.\n\nThat's it! Pretty simple, isn't it?\n\n####Improve performance\n\n**UPDATE 2014-06-16**: A comment from [Lumbendil](http://disqus.com/Lumbendil) pointed out that it would be possible to do the \"heavy logic\" within a `kernel.terminate` event listener. So let's refactor our code to follow this good suggestion:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n        \t$dispatcher = $this->get('event_dispatcher');\n            $dispatcher->addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\nNotice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the [`kernel.terminate`](http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate) event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.\n\nObviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.\n\nKeep in mind that the `kernel.terminate` event is optional, and should only be called if your kernel implements `TerminableInterface` (it should work if you are using the  Symfony Standard Edition).\n\n[Lumbendil](http://disqus.com/Lumbendil) also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as [RabbitMq](http://www.rabbitmq.com), [Gearman](http://gearman.org) or [Beanstalkd](http://kr.github.io/beanstalkd). These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).\n\n### Considerations\n\nYou can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript).\nAnyway, regarding tracking email opening, you should be aware that **some e-mail clients block images loading** when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.\n\n**UPDATE 2014-06-17**: [Jelte Steijaert](http://disqus.com/jeltesteijaert/) reported that using email authentication systems such as [DKIM](http://www.dkim.org/) or [SPF](http://www.openspf.org/) will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! \n\nIf you have some other consideration you are very welcome to write a comment, as always!\n","source":"_posts/transparent-pixel-response-with-symfony-how-to-track-email-opening.md","raw":"uuid:             f35460e0-938b-41cc-be68-3fb5143ee211\nlayout:           post\ntitle:            'Transparent pixel response with Symfony, how to track email opening'\nslug:             transparent-pixel-response-with-symfony-how-to-track-email-opening\nsubtitle:         null\ndate:             '2014-06-13T10:33:04.000Z'\nupdated:          '2014-06-17T09:00:17.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Php\n  - Symfony\n  - Http\n  - Tracking\n  - Email\n\n---\n\nIf you have ever heard about \"**transparent pixel**\", \"**1x1 blank pixel**\", \"**tracking pixel**\" or simply \"**tracking image**\" you probably know what we are going to talk about and can just [skip to the implementation](#symfonyimplementation)!\n\n\n###Introduction\n\nTransparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can't use javascript.\n\nOne of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected... So there's something we can do? Of course there is, let's jump into a concrete example.\n\n\n###Track email opening\n\nThe following image shows the typical tracking flow applied to emails:\n\n![Tracking email opening](/content/images/2014/Jun/email-tracking.png)\n\n  1. A user receives our HTML email. Within the email content there's a \"smart\" tracking image: `<img src=\"http://example.com/track.gif?id=1234\">`. Notice that it points to our server **example.com** and has a parameter `id=1234`.\n\n  2. When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.\n  \n  3. The request is handled by the **example.com** webserver. It does not handle the request as a static image but it executes some logic. It checks the `id` parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!\n  \n  4. Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.\n\n\n### Symfony implementation\n\nNow let's see how to implement this tracking flow using the Symfony framework.\n\nNotice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.\n\nFirst of all, we want to have a dedicated `Response` class to send back a transparent pixel to the client, let's call it `TransparentPixelResponse`:\n\n```php\n<?php\n\nnamespace LMammino\\Http;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class TransparentPixelResponse\n * @package LMammino\\Http\n * @author Luciano Mammino <lucianomammino@gmail.com>\n */\nclass TransparentPixelResponse extends Response\n{\n    /**\n     * Base 64 encoded contents for 1px transparent gif and png\n     * @var string\n     */\n    const IMAGE_CONTENT = \n        'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='\n    ;\n    \n    /**\n     * The response content type\n     * @var string\n     */\n    const CONTENT_TYPE = 'image/gif';\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $content = base64_decode(self::IMAGE_CONTENT);\n        parent::__construct($content);\n        $this->headers->set('Content-Type', self::CONTENT_TYPE);\n        $this->setPrivate();\n        $this->headers->addCacheControlDirective('no-cache', true);\n        $this->headers->addCacheControlDirective('must-revalidate', true);\n    }\n}\n```\n\nThe logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.\nWe use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.\n\nNow we can write a controller that will handle the tracking request:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n            //... executes some logic to retrieve the email and mark it as opened\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\n\nHere the logic is pretty simple too. \nWe created a controller with a `trackEmail` action. The action has been assigned to the route `/track.gif` using the `Route` annotation (if you prefer you can do it also by using the yaml or the xml convention).\nWithin this action we just read the parameter `id` from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).\nThen we just have to return a new instance of our `TransparentPixelResponse` class.\n\nThat's it! Pretty simple, isn't it?\n\n####Improve performance\n\n**UPDATE 2014-06-16**: A comment from [Lumbendil](http://disqus.com/Lumbendil) pointed out that it would be possible to do the \"heavy logic\" within a `kernel.terminate` event listener. So let's refactor our code to follow this good suggestion:\n\n```php\n<?php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpKernel\\Event\\KernelEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\n\nuse LMammino\\Http\\TransparentPixelResponse;\n\nclass TrackingController extends Controller\n{\n\t/**\n     * @Route('/track.gif')\n     */\n    public function trackEmailAction(Request $request)\n    {\n    \t$id = $request->query->get('id');\n        if (null !== $id) {\n        \t$dispatcher = $this->get('event_dispatcher');\n            $dispatcher->addListener(KernelEvents::TERMINATE, \n                function(KernelEvent $event) use ($id){\n                   //... executes some logic to retrieve \n                   // the email and mark it as opened\n                }\n            );\n        }\n        return new TransparentPixelResponse();\n    }\n}\n```\nNotice that we have \"wrapped\" our potentially heavy logic within a callable function that gets executed when the [`kernel.terminate`](http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate) event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.\n\nObviously, from the point of view of the server, we are not \"really\" improving performance. The code is not executed faster, but only in a different order. There's only an apparent performance improvement for the web client who receives the response quicker and doesn't care about the processing logic that will keep running on the server side.\n\nKeep in mind that the `kernel.terminate` event is optional, and should only be called if your kernel implements `TerminableInterface` (it should work if you are using the  Symfony Standard Edition).\n\n[Lumbendil](http://disqus.com/Lumbendil) also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as [RabbitMq](http://www.rabbitmq.com), [Gearman](http://gearman.org) or [Beanstalkd](http://kr.github.io/beanstalkd). These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).\n\n### Considerations\n\nYou can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can't or don't want to use javascript).\nAnyway, regarding tracking email opening, you should be aware that **some e-mail clients block images loading** when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.\n\n**UPDATE 2014-06-17**: [Jelte Steijaert](http://disqus.com/jeltesteijaert/) reported that using email authentication systems such as [DKIM](http://www.dkim.org/) or [SPF](http://www.openspf.org/) will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! \n\nIf you have some other consideration you are very welcome to write a comment, as always!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrz50015svvuahw62evl","content":"<p>If you have ever heard about “<strong>transparent pixel</strong>“, “<strong>1x1 blank pixel</strong>“, “<strong>tracking pixel</strong>“ or simply “<strong>tracking image</strong>“ you probably know what we are going to talk about and can just <a href=\"#symfonyimplementation\">skip to the implementation</a>!</p>\n<p>###Introduction</p>\n<p>Transparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can’t use javascript.</p>\n<p>One of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected… So there’s something we can do? Of course there is, let’s jump into a concrete example.</p>\n<p>###Track email opening</p>\n<p>The following image shows the typical tracking flow applied to emails:</p>\n<p><img src=\"/content/images/2014/Jun/email-tracking.png\" alt=\"Tracking email opening\"></p>\n<ol>\n<li><p>A user receives our HTML email. Within the email content there’s a “smart” tracking image: <code>&lt;img src=&quot;http://example.com/track.gif?id=1234&quot;&gt;</code>. Notice that it points to our server <strong>example.com</strong> and has a parameter <code>id=1234</code>.</p>\n</li>\n<li><p>When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.</p>\n</li>\n<li><p>The request is handled by the <strong>example.com</strong> webserver. It does not handle the request as a static image but it executes some logic. It checks the <code>id</code> parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!</p>\n</li>\n<li><p>Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.</p>\n</li>\n</ol>\n<h3 id=\"Symfony-implementation\"><a href=\"#Symfony-implementation\" class=\"headerlink\" title=\"Symfony implementation\"></a>Symfony implementation</h3><p>Now let’s see how to implement this tracking flow using the Symfony framework.</p>\n<p>Notice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.</p>\n<p>First of all, we want to have a dedicated <code>Response</code> class to send back a transparent pixel to the client, let’s call it <code>TransparentPixelResponse</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Response</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Class TransparentPixelResponse</div><div class=\"line\"> * <span class=\"doctag\">@package</span> LMammino\\Http</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Luciano Mammino &lt;lucianomammino<span class=\"doctag\">@gmail</span>.com&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransparentPixelResponse</span> <span class=\"keyword\">extends</span> <span class=\"title\">Response</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Base 64 encoded contents for 1px transparent gif and png</div><div class=\"line\">     * <span class=\"doctag\">@var</span> string</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">const</span> IMAGE_CONTENT = </div><div class=\"line\">        <span class=\"string\">'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='</span></div><div class=\"line\">    ;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * The response content type</div><div class=\"line\">     * <span class=\"doctag\">@var</span> string</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">const</span> CONTENT_TYPE = <span class=\"string\">'image/gif'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Constructor</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $content = base64_decode(<span class=\"keyword\">self</span>::IMAGE_CONTENT);</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($content);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;set(<span class=\"string\">'Content-Type'</span>, <span class=\"keyword\">self</span>::CONTENT_TYPE);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrivate();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;addCacheControlDirective(<span class=\"string\">'no-cache'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;addCacheControlDirective(<span class=\"string\">'must-revalidate'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.<br>We use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.</p>\n<p>Now we can write a controller that will handle the tracking request:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkBundle</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">Controller</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Request</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Sensio</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkExtraBundle</span>\\<span class=\"title\">Configuration</span>\\<span class=\"title\">Route</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">TransparentPixelResponse</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@Route</span>('/track.gif')</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trackEmailAction</span><span class=\"params\">(Request $request)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$id = $request-&gt;query-&gt;get(<span class=\"string\">'id'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $id) &#123;</div><div class=\"line\">            <span class=\"comment\">//... executes some logic to retrieve the email and mark it as opened</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransparentPixelResponse();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here the logic is pretty simple too.<br>We created a controller with a <code>trackEmail</code> action. The action has been assigned to the route <code>/track.gif</code> using the <code>Route</code> annotation (if you prefer you can do it also by using the yaml or the xml convention).<br>Within this action we just read the parameter <code>id</code> from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).<br>Then we just have to return a new instance of our <code>TransparentPixelResponse</code> class.</p>\n<p>That’s it! Pretty simple, isn’t it?</p>\n<p>####Improve performance</p>\n<p><strong>UPDATE 2014-06-16</strong>: A comment from <a href=\"http://disqus.com/Lumbendil\" target=\"_blank\" rel=\"external\">Lumbendil</a> pointed out that it would be possible to do the “heavy logic” within a <code>kernel.terminate</code> event listener. So let’s refactor our code to follow this good suggestion:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkBundle</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">Controller</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">Event</span>\\<span class=\"title\">KernelEvent</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">KernelEvents</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Request</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Sensio</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkExtraBundle</span>\\<span class=\"title\">Configuration</span>\\<span class=\"title\">Route</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">TransparentPixelResponse</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@Route</span>('/track.gif')</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trackEmailAction</span><span class=\"params\">(Request $request)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$id = $request-&gt;query-&gt;get(<span class=\"string\">'id'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $id) &#123;</div><div class=\"line\">        \t$dispatcher = <span class=\"keyword\">$this</span>-&gt;get(<span class=\"string\">'event_dispatcher'</span>);</div><div class=\"line\">            $dispatcher-&gt;addListener(KernelEvents::TERMINATE, </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(KernelEvent $event)</span> <span class=\"title\">use</span> <span class=\"params\">($id)</span></span>&#123;</div><div class=\"line\">                   <span class=\"comment\">//... executes some logic to retrieve </span></div><div class=\"line\">                   <span class=\"comment\">// the email and mark it as opened</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransparentPixelResponse();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that we have “wrapped” our potentially heavy logic within a callable function that gets executed when the <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate\" target=\"_blank\" rel=\"external\"><code>kernel.terminate</code></a> event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.</p>\n<p>Obviously, from the point of view of the server, we are not “really” improving performance. The code is not executed faster, but only in a different order. There’s only an apparent performance improvement for the web client who receives the response quicker and doesn’t care about the processing logic that will keep running on the server side.</p>\n<p>Keep in mind that the <code>kernel.terminate</code> event is optional, and should only be called if your kernel implements <code>TerminableInterface</code> (it should work if you are using the  Symfony Standard Edition).</p>\n<p><a href=\"http://disqus.com/Lumbendil\" target=\"_blank\" rel=\"external\">Lumbendil</a> also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as <a href=\"http://www.rabbitmq.com\" target=\"_blank\" rel=\"external\">RabbitMq</a>, <a href=\"http://gearman.org\" target=\"_blank\" rel=\"external\">Gearman</a> or <a href=\"http://kr.github.io/beanstalkd\" target=\"_blank\" rel=\"external\">Beanstalkd</a>. These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).</p>\n<h3 id=\"Considerations\"><a href=\"#Considerations\" class=\"headerlink\" title=\"Considerations\"></a>Considerations</h3><p>You can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can’t or don’t want to use javascript).<br>Anyway, regarding tracking email opening, you should be aware that <strong>some e-mail clients block images loading</strong> when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.</p>\n<p><strong>UPDATE 2014-06-17</strong>: <a href=\"http://disqus.com/jeltesteijaert/\" target=\"_blank\" rel=\"external\">Jelte Steijaert</a> reported that using email authentication systems such as <a href=\"http://www.dkim.org/\" target=\"_blank\" rel=\"external\">DKIM</a> or <a href=\"http://www.openspf.org/\" target=\"_blank\" rel=\"external\">SPF</a> will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! </p>\n<p>If you have some other consideration you are very welcome to write a comment, as always!</p>\n","excerpt":"","more":"<p>If you have ever heard about “<strong>transparent pixel</strong>“, “<strong>1x1 blank pixel</strong>“, “<strong>tracking pixel</strong>“ or simply “<strong>tracking image</strong>“ you probably know what we are going to talk about and can just <a href=\"#symfonyimplementation\">skip to the implementation</a>!</p>\n<p>###Introduction</p>\n<p>Transparent pixel image is a technique often used to track some user behavior (often visits or views to a certain online content) in scenarios where you can’t use javascript.</p>\n<p>One of the most common scenarios is probably email opening tracking. Can you put Google Analytics into an email? Well, probably it would not work as expected… So there’s something we can do? Of course there is, let’s jump into a concrete example.</p>\n<p>###Track email opening</p>\n<p>The following image shows the typical tracking flow applied to emails:</p>\n<p><img src=\"/content/images/2014/Jun/email-tracking.png\" alt=\"Tracking email opening\"></p>\n<ol>\n<li><p>A user receives our HTML email. Within the email content there’s a “smart” tracking image: <code>&lt;img src=&quot;http://example.com/track.gif?id=1234&quot;&gt;</code>. Notice that it points to our server <strong>example.com</strong> and has a parameter <code>id=1234</code>.</p>\n</li>\n<li><p>When the user opens the email, his email client will start to download all the resources linked into the HTML code (usually images) and it will trigger a request to download the tracking image.</p>\n</li>\n<li><p>The request is handled by the <strong>example.com</strong> webserver. It does not handle the request as a static image but it executes some logic. It checks the <code>id</code> parameter and uses it to determine which email has triggered the request. Then it marks that email as opened in its own database for future reports. The mail client is still waiting for an answer and it expects an image. So the webserver generates on the fly the most small image possible: a 1x1 transparent image!</p>\n</li>\n<li><p>Then the image is sent back to the client that will render it on the screen. Anyway the image is trasparent and so small that the user will barely notice it.</p>\n</li>\n</ol>\n<h3 id=\"Symfony-implementation\"><a href=\"#Symfony-implementation\" class=\"headerlink\" title=\"Symfony implementation\"></a>Symfony implementation</h3><p>Now let’s see how to implement this tracking flow using the Symfony framework.</p>\n<p>Notice that you should have your own logic to generate emails, to store and send them. I will not cover these parts, but only the one related to the tracking flow explained before.</p>\n<p>First of all, we want to have a dedicated <code>Response</code> class to send back a transparent pixel to the client, let’s call it <code>TransparentPixelResponse</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Response</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Class TransparentPixelResponse</div><div class=\"line\"> * <span class=\"doctag\">@package</span> LMammino\\Http</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Luciano Mammino &lt;lucianomammino<span class=\"doctag\">@gmail</span>.com&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransparentPixelResponse</span> <span class=\"keyword\">extends</span> <span class=\"title\">Response</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Base 64 encoded contents for 1px transparent gif and png</div><div class=\"line\">     * <span class=\"doctag\">@var</span> string</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">const</span> IMAGE_CONTENT = </div><div class=\"line\">        <span class=\"string\">'R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw=='</span></div><div class=\"line\">    ;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * The response content type</div><div class=\"line\">     * <span class=\"doctag\">@var</span> string</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">const</span> CONTENT_TYPE = <span class=\"string\">'image/gif'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Constructor</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $content = base64_decode(<span class=\"keyword\">self</span>::IMAGE_CONTENT);</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($content);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;set(<span class=\"string\">'Content-Type'</span>, <span class=\"keyword\">self</span>::CONTENT_TYPE);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setPrivate();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;addCacheControlDirective(<span class=\"string\">'no-cache'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;headers-&gt;addCacheControlDirective(<span class=\"string\">'must-revalidate'</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The logic is very simple here. We have hardcoded the content of a 1x1 transparent gif image using a base64 encoded string.<br>We use this string to set the content of the response object. We also set some cache headers to mark the response as not cacheable.</p>\n<p>Now we can write a controller that will handle the tracking request:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkBundle</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">Controller</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Request</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Sensio</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkExtraBundle</span>\\<span class=\"title\">Configuration</span>\\<span class=\"title\">Route</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">TransparentPixelResponse</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@Route</span>('/track.gif')</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trackEmailAction</span><span class=\"params\">(Request $request)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">    \t$id = $request-&gt;query-&gt;get(<span class=\"string\">'id'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $id) &#123;</div><div class=\"line\">            <span class=\"comment\">//... executes some logic to retrieve the email and mark it as opened</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransparentPixelResponse();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here the logic is pretty simple too.<br>We created a controller with a <code>trackEmail</code> action. The action has been assigned to the route <code>/track.gif</code> using the <code>Route</code> annotation (if you prefer you can do it also by using the yaml or the xml convention).<br>Within this action we just read the parameter <code>id</code> from the request and used it to execute the persistence logic to retrive the email record and mark it as opened (skipped in the example).<br>Then we just have to return a new instance of our <code>TransparentPixelResponse</code> class.</p>\n<p>That’s it! Pretty simple, isn’t it?</p>\n<p>####Improve performance</p>\n<p><strong>UPDATE 2014-06-16</strong>: A comment from <a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> pointed out that it would be possible to do the “heavy logic” within a <code>kernel.terminate</code> event listener. So let’s refactor our code to follow this good suggestion:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkBundle</span>\\<span class=\"title\">Controller</span>\\<span class=\"title\">Controller</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">Event</span>\\<span class=\"title\">KernelEvent</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">KernelEvents</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpFoundation</span>\\<span class=\"title\">Request</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Sensio</span>\\<span class=\"title\">Bundle</span>\\<span class=\"title\">FrameworkExtraBundle</span>\\<span class=\"title\">Configuration</span>\\<span class=\"title\">Route</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">TransparentPixelResponse</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@Route</span>('/track.gif')</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trackEmailAction</span><span class=\"params\">(Request $request)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">    \t$id = $request-&gt;query-&gt;get(<span class=\"string\">'id'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $id) &#123;</div><div class=\"line\">        \t$dispatcher = <span class=\"keyword\">$this</span>-&gt;get(<span class=\"string\">'event_dispatcher'</span>);</div><div class=\"line\">            $dispatcher-&gt;addListener(KernelEvents::TERMINATE, </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(KernelEvent $event)</span> <span class=\"title\">use</span> <span class=\"params\">($id)</span></span>&#123;</div><div class=\"line\">                   <span class=\"comment\">//... executes some logic to retrieve </span></div><div class=\"line\">                   <span class=\"comment\">// the email and mark it as opened</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransparentPixelResponse();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that we have “wrapped” our potentially heavy logic within a callable function that gets executed when the <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate\"><code>kernel.terminate</code></a> event is fired. This way the response is returned immediatly (before executing all the heavy logic) and the requesting client will not have to wait for processing.</p>\n<p>Obviously, from the point of view of the server, we are not “really” improving performance. The code is not executed faster, but only in a different order. There’s only an apparent performance improvement for the web client who receives the response quicker and doesn’t care about the processing logic that will keep running on the server side.</p>\n<p>Keep in mind that the <code>kernel.terminate</code> event is optional, and should only be called if your kernel implements <code>TerminableInterface</code> (it should work if you are using the  Symfony Standard Edition).</p>\n<p><a href=\"http://disqus.com/Lumbendil\">Lumbendil</a> also pointed out that this solution is not the only one possible. You can also rely on some messaging/queue system such as <a href=\"http://www.rabbitmq.com\">RabbitMq</a>, <a href=\"http://gearman.org\">Gearman</a> or <a href=\"http://kr.github.io/beanstalkd\">Beanstalkd</a>. These are great tools but they add new dependencies and a whole new layer of complexity to the  web infrastructure, so I will suggest to use one of them only if your logic is very complex or heavy (or if you are designing you whole infrastructure from scratch to leverage a work queue system).</p>\n<h3 id=\"Considerations\"><a href=\"#Considerations\" class=\"headerlink\" title=\"Considerations\"></a>Considerations</h3><p>You can apply this method to track email opening or views on other online contents such as Html webpages (in cases where you can’t or don’t want to use javascript).<br>Anyway, regarding tracking email opening, you should be aware that <strong>some e-mail clients block images loading</strong> when you open an e-mail from an unknown sender. Yes, they do it not only to save your bandwidth, but mostly to avoid triggering tracking images! So in this cases you will not able to track the email opening, unless the user authorizes its client to load all the images in that specific email.</p>\n<p><strong>UPDATE 2014-06-17</strong>: <a href=\"http://disqus.com/jeltesteijaert/\">Jelte Steijaert</a> reported that using email authentication systems such as <a href=\"http://www.dkim.org/\">DKIM</a> or <a href=\"http://www.openspf.org/\">SPF</a> will increase chances for images to get autoloaded by email clients. This authentication methods are also very useful to save your emails from ending up into the spam folder, so they are very recommended! </p>\n<p>If you have some other consideration you are very welcome to write a comment, as always!</p>\n"},{"uuid":"7f08c58e-6898-490b-9b6f-a4680ab114a9","layout":"post","title":"Symfony security: authentication made simple (well, maybe!)","slug":"symfony-security-authentication-made-simple","subtitle":null,"date":"2014-02-14T00:34:23.000Z","updated":"2014-03-13T14:54:05.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nThe [Symfony2 security component](http://symfony.com/doc/current/components/security/introduction.html) has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.\n\nI am in the process of writing an [OAuth bundle](https://github.com/Oryzone/OryzoneOauthBundle) and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!\n\nGoing back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. \n\nSo in this post I will try to collect few interesting resources that helped me understanding it better and a [graph](#symfony-authentication-graph) I drawn to resume what I learned.\n\n## Interesting links:\n\nI highly suggest you to read them in the proposed order.\n\n- [Symfony Security component documentation](http://symfony.com/doc/current/components/security/introduction.html): must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!\n- [Diving into security layer](http://www.screenfony.com/blog/symfony-custom-authentication-provider): a great blog post from [Francesco Tassi](http://www.ftassi.com/) of [Screenfony](http://www.screenfony.com/). It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.\n- [Love and Loss: A Symfony Security Play](http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play): slides by the great [Kris Wallsmith](http://kriswallsmith.net/) from the Symfony Live 2013 in Portland. Also a [Video](http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony) is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!\n- [Symfony2: Introduction to The Security Component Part I](http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/), [Part II](http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/) & [Part III](http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/): a series of articles by [Matthias Noback](http://php-and-symfony.matthiasnoback.nl/) that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.\n- [Security in real life](http://symfony.com/video/1/security-in-real-life/English): A video from the Symfony Live Paris 2012 by [Johannes Schmitt](http://jmsyst.com/blog/). Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.\n- [Custom authentication provider](http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html): a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!\n- [How to Authenticate Users with API Keys](http://symfony.com/doc/current/cookbook/security/api_key_authentication.html): another great cookbook article that will shed some light on the topic by providing a simple example.\n- [How to Create a Custom Form Password Authenticator](http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html): yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.\n- [Code of the RememberMe Listener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php): the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.\n\n## Symfony Authentication graph\n\nNotice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a `Request` object and you should check if it can be used to produce an `AuthenticatedToken` according to some authentication logic.\n\n[![Symfony Authentication chart](/content/images/2014/Feb/symfony_security_component_authentication_flow.png)](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing)\n\nGet the image in [full resolution on Google Drive](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing) (you can also propose edits with comments if you want) or [Download the PDF](/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf).\n\nThat's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.\n","source":"_posts/symfony-security-authentication-made-simple.md","raw":"uuid:             7f08c58e-6898-490b-9b6f-a4680ab114a9\nlayout:           post\ntitle:            'Symfony security: authentication made simple (well, maybe!)'\nslug:             symfony-security-authentication-made-simple\nsubtitle:         null\ndate:             '2014-02-14T00:34:23.000Z'\nupdated:          '2014-03-13T14:54:05.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Php\n  - Symfony\n  - Security\n\n---\n\nThe [Symfony2 security component](http://symfony.com/doc/current/components/security/introduction.html) has the fame of being one of the most complex in the framework. I tend to believe that's partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.\n\nI am in the process of writing an [OAuth bundle](https://github.com/Oryzone/OryzoneOauthBundle) and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.\nNotice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!\n\nGoing back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. \n\nSo in this post I will try to collect few interesting resources that helped me understanding it better and a [graph](#symfony-authentication-graph) I drawn to resume what I learned.\n\n## Interesting links:\n\nI highly suggest you to read them in the proposed order.\n\n- [Symfony Security component documentation](http://symfony.com/doc/current/components/security/introduction.html): must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!\n- [Diving into security layer](http://www.screenfony.com/blog/symfony-custom-authentication-provider): a great blog post from [Francesco Tassi](http://www.ftassi.com/) of [Screenfony](http://www.screenfony.com/). It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.\n- [Love and Loss: A Symfony Security Play](http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play): slides by the great [Kris Wallsmith](http://kriswallsmith.net/) from the Symfony Live 2013 in Portland. Also a [Video](http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony) is available. That's a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!\n- [Symfony2: Introduction to The Security Component Part I](http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/), [Part II](http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/) & [Part III](http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/): a series of articles by [Matthias Noback](http://php-and-symfony.matthiasnoback.nl/) that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.\n- [Security in real life](http://symfony.com/video/1/security-in-real-life/English): A video from the Symfony Live Paris 2012 by [Johannes Schmitt](http://jmsyst.com/blog/). Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.\n- [Custom authentication provider](http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html): a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!\n- [How to Authenticate Users with API Keys](http://symfony.com/doc/current/cookbook/security/api_key_authentication.html): another great cookbook article that will shed some light on the topic by providing a simple example.\n- [How to Create a Custom Form Password Authenticator](http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html): yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.\n- [Code of the RememberMe Listener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php): the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.\n\n## Symfony Authentication graph\n\nNotice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a `Request` object and you should check if it can be used to produce an `AuthenticatedToken` according to some authentication logic.\n\n[![Symfony Authentication chart](/content/images/2014/Feb/symfony_security_component_authentication_flow.png)](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing)\n\nGet the image in [full resolution on Google Drive](https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing) (you can also propose edits with comments if you want) or [Download the PDF](/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf).\n\nThat's all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrz60017svvuk3erfayc","content":"<p>The <a href=\"http://symfony.com/doc/current/components/security/introduction.html\" target=\"_blank\" rel=\"external\">Symfony2 security component</a> has the fame of being one of the most complex in the framework. I tend to believe that’s partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.</p>\n<p>I am in the process of writing an <a href=\"https://github.com/Oryzone/OryzoneOauthBundle\" target=\"_blank\" rel=\"external\">OAuth bundle</a> and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.<br>Notice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great <a href=\"https://github.com/hwi/HWIOAuthBundle\" target=\"_blank\" rel=\"external\">HWIOAuthBundle</a> to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!</p>\n<p>Going back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. </p>\n<p>So in this post I will try to collect few interesting resources that helped me understanding it better and a <a href=\"#symfony-authentication-graph\">graph</a> I drawn to resume what I learned.</p>\n<h2 id=\"Interesting-links\"><a href=\"#Interesting-links\" class=\"headerlink\" title=\"Interesting links:\"></a>Interesting links:</h2><p>I highly suggest you to read them in the proposed order.</p>\n<ul>\n<li><a href=\"http://symfony.com/doc/current/components/security/introduction.html\" target=\"_blank\" rel=\"external\">Symfony Security component documentation</a>: must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!</li>\n<li><a href=\"http://www.screenfony.com/blog/symfony-custom-authentication-provider\" target=\"_blank\" rel=\"external\">Diving into security layer</a>: a great blog post from <a href=\"http://www.ftassi.com/\" target=\"_blank\" rel=\"external\">Francesco Tassi</a> of <a href=\"http://www.screenfony.com/\" target=\"_blank\" rel=\"external\">Screenfony</a>. It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.</li>\n<li><a href=\"http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play\" target=\"_blank\" rel=\"external\">Love and Loss: A Symfony Security Play</a>: slides by the great <a href=\"http://kriswallsmith.net/\" target=\"_blank\" rel=\"external\">Kris Wallsmith</a> from the Symfony Live 2013 in Portland. Also a <a href=\"http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony\" target=\"_blank\" rel=\"external\">Video</a> is available. That’s a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!</li>\n<li><a href=\"http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/\" target=\"_blank\" rel=\"external\">Symfony2: Introduction to The Security Component Part I</a>, <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/\" target=\"_blank\" rel=\"external\">Part II</a> &amp; <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/\" target=\"_blank\" rel=\"external\">Part III</a>: a series of articles by <a href=\"http://php-and-symfony.matthiasnoback.nl/\" target=\"_blank\" rel=\"external\">Matthias Noback</a> that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.</li>\n<li><a href=\"http://symfony.com/video/1/security-in-real-life/English\" target=\"_blank\" rel=\"external\">Security in real life</a>: A video from the Symfony Live Paris 2012 by <a href=\"http://jmsyst.com/blog/\" target=\"_blank\" rel=\"external\">Johannes Schmitt</a>. Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html\" target=\"_blank\" rel=\"external\">Custom authentication provider</a>: a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/api_key_authentication.html\" target=\"_blank\" rel=\"external\">How to Authenticate Users with API Keys</a>: another great cookbook article that will shed some light on the topic by providing a simple example.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html\" target=\"_blank\" rel=\"external\">How to Create a Custom Form Password Authenticator</a>: yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.</li>\n<li><a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php\" target=\"_blank\" rel=\"external\">Code of the RememberMe Listener</a>: the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.</li>\n</ul>\n<h2 id=\"Symfony-Authentication-graph\"><a href=\"#Symfony-Authentication-graph\" class=\"headerlink\" title=\"Symfony Authentication graph\"></a>Symfony Authentication graph</h2><p>Notice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a <code>Request</code> object and you should check if it can be used to produce an <code>AuthenticatedToken</code> according to some authentication logic.</p>\n<p><a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.png\" alt=\"Symfony Authentication chart\"></a></p>\n<p>Get the image in <a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\" target=\"_blank\" rel=\"external\">full resolution on Google Drive</a> (you can also propose edits with comments if you want) or <a href=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf\">Download the PDF</a>.</p>\n<p>That’s all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.</p>\n","excerpt":"","more":"<p>The <a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony2 security component</a> has the fame of being one of the most complex in the framework. I tend to believe that’s partially true, not because the component is really that complex, but because there are (really) a lot of concepts involved and it may be difficoult to understand them all at once and have a clear vision as a whole.</p>\n<p>I am in the process of writing an <a href=\"https://github.com/Oryzone/OryzoneOauthBundle\">OAuth bundle</a> and I faced the need to  deeply understand how the authentication process work in Symfony2 to being able to integrate the OAuth protocol with the Symfony authentication component.<br>Notice that I know there are a lot of great and stable OAuth bundles out there (have a look at the great <a href=\"https://github.com/hwi/HWIOAuthBundle\">HWIOAuthBundle</a> to which I had chance to submit small contributions in the past). My intention is not to build a better one, but I want to build my own bundle with some peculiar features and use it as a way to experiment and learn new things. But I am getting off topic!</p>\n<p>Going back to the Symfony2 security component, the point is that I found out difficult at first glance to get a clear idea of what is going on behind the scenes and what I need to write to create a custom authentication mechanism. </p>\n<p>So in this post I will try to collect few interesting resources that helped me understanding it better and a <a href=\"#symfony-authentication-graph\">graph</a> I drawn to resume what I learned.</p>\n<h2 id=\"Interesting-links\"><a href=\"#Interesting-links\" class=\"headerlink\" title=\"Interesting links:\"></a>Interesting links:</h2><p>I highly suggest you to read them in the proposed order.</p>\n<ul>\n<li><a href=\"http://symfony.com/doc/current/components/security/introduction.html\">Symfony Security component documentation</a>: must read! The official documentation about the security component. It covers both authentication and authorization. Be warned that it will probably not make things clear at first, but I believe you must start your learning from there!</li>\n<li><a href=\"http://www.screenfony.com/blog/symfony-custom-authentication-provider\">Diving into security layer</a>: a great blog post from <a href=\"http://www.ftassi.com/\">Francesco Tassi</a> of <a href=\"http://www.screenfony.com/\">Screenfony</a>. It carefully describes which classes and interfaces are involved in the authentication layer and how they are wired togheter. He does not present any example of code, but in my opinion this is one of the most interesting and clarifying post about this topic.</li>\n<li><a href=\"http://www.slideshare.net/kriswallsmith/love-and-loss-a-symfony-security-play\">Love and Loss: A Symfony Security Play</a>: slides by the great <a href=\"http://kriswallsmith.net/\">Kris Wallsmith</a> from the Symfony Live 2013 in Portland. Also a <a href=\"http://kriswallsmith.net/post/56350579294/video-of-the-tech-talk-love-loss-a-symfony\">Video</a> is available. That’s a great resource because Kris tries to explain with visual graphs how the various components are tied togheter and how the whole flow goes from request to response. Very clarifying!</li>\n<li><a href=\"http://php-and-symfony.matthiasnoback.nl/2012/07/symfony2-introduction-to-the-security-component-part-i/\">Symfony2: Introduction to The Security Component Part I</a>, <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/08/symfony2-introduction-to-the-security-component-part-ii/\">Part II</a> &amp; <a href=\"http://php-and-symfony.matthiasnoback.nl/2012/09/symfony2-introduction-to-the-security-component-part-iii/\">Part III</a>: a series of articles by <a href=\"http://php-and-symfony.matthiasnoback.nl/\">Matthias Noback</a> that cover the various aspect of the Symfony security (both about authentication and authorization). They have been merged to the official documentation, so read it fast as a good way to recap ideas.</li>\n<li><a href=\"http://symfony.com/video/1/security-in-real-life/English\">Security in real life</a>: A video from the Symfony Live Paris 2012 by <a href=\"http://jmsyst.com/blog/\">Johannes Schmitt</a>. Johannes explains some common problems people face with the symfony security component. He also provides a great introduction describing the most important classes and how they are tied together.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_authentication_provider.html\">Custom authentication provider</a>: a cookbook article from the official documentation that presents a code example on how to write a custom authenticatin provider to integrate the WSSE protocol in Symfony. Great code example!</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/api_key_authentication.html\">How to Authenticate Users with API Keys</a>: another great cookbook article that will shed some light on the topic by providing a simple example.</li>\n<li><a href=\"http://symfony.com/doc/current/cookbook/security/custom_password_authenticator.html\">How to Create a Custom Form Password Authenticator</a>: yet another intersting cookbook article with a code example on how to modify the authentication logic behind the form (username/password) based authenticator.</li>\n<li><a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/RememberMeListener.php\">Code of the RememberMe Listener</a>: the code of the RememberMeListener class. A great and simple example on how to write a security authentication listener.</li>\n</ul>\n<h2 id=\"Symfony-Authentication-graph\"><a href=\"#Symfony-Authentication-graph\" class=\"headerlink\" title=\"Symfony Authentication graph\"></a>Symfony Authentication graph</h2><p>Notice that the following graph tries to represent the classical schema available in the Symfony Standard Edition. As the framework is extensible at any given point you are free to change the whole logic. The generic idea is that you start with a <code>Request</code> object and you should check if it can be used to produce an <code>AuthenticatedToken</code> according to some authentication logic.</p>\n<p><a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\"><img src=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.png\" alt=\"Symfony Authentication chart\"></a></p>\n<p>Get the image in <a href=\"https://docs.google.com/drawings/d/1uTA7gQZ5IEV51Nv-HKR98sKWQNBUhEm0PPueJcoRW7c/edit?usp=sharing\">full resolution on Google Drive</a> (you can also propose edits with comments if you want) or <a href=\"/content/images/2014/Feb/symfony_security_component_authentication_flow.pdf\">Download the PDF</a>.</p>\n<p>That’s all, I hope this post has been useful. If you have interesting link related to this topic feel free to add them in the comment box and I will add them into the article.</p>\n"},{"uuid":"80c5a713-60e0-4176-a0a0-e7d063bd4f2e","layout":"post","title":"Symfony, edit the Response globally using the Kernel Response event","slug":"symfony-edit-the-response-globally-using-the-kernel-response-event","subtitle":null,"date":"2015-02-21T01:12:00.000Z","updated":"2015-03-02T23:19:32.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg","status":"published","language":"en_US","meta_title":"","meta_description":null,"_content":"\nOne of the things I like most of the Symfony framework is its [Http Kernel component](https://packagist.org/packages/symfony/http-kernel). Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through [events](http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener).\n\n[![Symfony Http Kernel component overview](/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png)](http://symfony.com/doc/current/components/http_kernel/introduction.html)\n\nThis approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).\n\n\n## The Kernel Response event\nOne event that I’ve been using a lot lately is the  [Kernel Response event](http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html) which allows you to edit the response after it has been generated.\n\nThanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.\n\nI will present two different real case scenarios to show how useful (and simple) it is.\n\n### Example 1. Add custom Http headers to notify remaining api calls\nLet's suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API.\nIt seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: `X-RateLimit-Limit` (maximum number of requests per period), `X-RateLimit-Remaining` (remaining requests in the current period) and `X-RateLimit-Reset` (the timestamp on which the current period ends).\n\nAs I don't want to implement a fully working solution here let's assume we have already written a rate limit checker service registered as `rate_limit_checker` that implements the following interface:\n\n```php\ninterface RateLimitCheckerInterface\n{\n\tpublic function getRateLimit();\n\n\tpublic function getRateLimitRemaining();\n    \n    public function getRateLimitReset();\n}\n```\n\nLet's now write our `RateLimitHeadersListener`:\n\n```php\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nfinal class RateLimitHeadersListener\n{\n\tprivate $rateLimitChecker;\n\n\tpublic function __construct(\n    \tRateLimitCheckerInterface $rateLimitChecker\n    ){\n    \t$this->rateLimitChecker = $rateLimitChecker;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {   \n        $headers = $event->getResponse()->headers;\n\n        $headers->set(\n        \t'X-RateLimit-Limit',\n            $this->rateLimitChecker->getRateLimit()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Remaining',\n            $this->rateLimitChecker->getRateLimitRemaining()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Reset',\n            $this->rateLimitChecker->getRateLimitReset()\n        );\n    }   \n}\n```\n\nNow we need to register the listener as a tagged service:\n\n```yaml\n#services.yml\nrate_limit_listener:\n    class: RateLimitHeadersListener\n    arguments: [\"@rate_limit_checker\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nThat's it. Really straightforward, isn't it?\nShould be clear now that, by using this event based approach, we don't have to touch the logic of every single controller.\n\nTake a small break and get ready to jump to another example.\n\n### Example 2. Create a cookie to track referrals\n\nWell, now imagine that we have to build an affiliate program based on referral links ([I did it](https://sbaam.com/affiliates?_r=9oj) lately). \n\nThe general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them.\nDoing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate.\nTo write a more formal specification we have to:\n\n  1. Allow any of our affiliates to share links with a special referral code as query parameter: `?_ref=<REF_ID>` (where `REF_ID` is the unique id of the affiliate).\n  2. Intercept visitor referred by affiliates through the referral parameter and identify the referral\n  3. Create a cookie to track the referred visitor for 30 days\n\nAgain we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a `affiliate_repository` service which implementats of the following interface:\n\n```php\ninterface AffiliateRepositoryInterface\n{\n\tpublic function findOneById($id);\n}\n```\n\nNow let's write our listener to intercept clicks on referral links:\n\n```php\nfinal class AffiliateLinkClickListener\n{\n\tprivate $affiliateRepository;\n    \n    public function __construct(\n    \tAffiliateRepositoryInterface $affiliateRepository\n    ){\n    \t$this->affiliateRepository = $affiliateRepository;\n    }\n    \n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n    \t$request = $event->getRequest();\n        $response = $event->getResponse();\n        \n        // 1.\n        if ($request->query->has('_ref')) {\n        \t$affiliateId = $request->query->get('_ref');\n            // 2.\n            if (null !== $this->affiliateRepository->findOneById($affiliateId)) {\n            \t// 3.\n                $cookie = new Cookie('_ref', $affiliateId, new \\DateTime('+30 days'));\n                $response->headers->setCookie($cookie);\n            }\n        }\n    }\n}\n```\n\nThe code is pretty simple here:\n\n  1. We check if there's a `_ref` parameter in the current request\n  2. If so we check if we have an affiliate with the id found in the `_ref` parameter\n  3. If that's the case we create a cookie that will allow us to keep track of the referral for 30 days.\n  \nObviously don't forget to register the listener as a tagged service:\n\n```yaml\n#services.yml\naffiliate_link_click_listener:\n    class: AffiliateLinkClickListener\n    arguments: [\"@affiliate_repository\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nAs I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.\n\n## Conclusion\n\nAs in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.\n\nLet me know what you think with a comment ([comments](#disqus_thread)) and feel free to suggest other real-life use cases for the Kernel Response Event.\n\nThanks!\n\nPS: Huge thanks to [@AxelLessio](http://twitter.com/AxelLessio) and [@JavierEguiluz](http://twitter.com/javiereguiluz) for taking the time to review my very bad english ;)\n","source":"_posts/symfony-edit-the-response-globally-using-the-kernel-response-event.md","raw":"uuid:             80c5a713-60e0-4176-a0a0-e7d063bd4f2e\nlayout:           post\ntitle:            'Symfony, edit the Response globally using the Kernel Response event'\nslug:             symfony-edit-the-response-globally-using-the-kernel-response-event\nsubtitle:         null\ndate:             '2015-02-21T01:12:00.000Z'\nupdated:          '2015-03-02T23:19:32.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/02/symfony-edit-the-response-globally-using-the-kernel-response-event.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       \"\"\nmeta_description: null\ntags:\n  - Php\n  - Symfony\n  - Http\n\n---\n\nOne of the things I like most of the Symfony framework is its [Http Kernel component](https://packagist.org/packages/symfony/http-kernel). Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through [events](http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener).\n\n[![Symfony Http Kernel component overview](/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png)](http://symfony.com/doc/current/components/http_kernel/introduction.html)\n\nThis approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).\n\n\n## The Kernel Response event\nOne event that I’ve been using a lot lately is the  [Kernel Response event](http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html) which allows you to edit the response after it has been generated.\n\nThanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.\n\nI will present two different real case scenarios to show how useful (and simple) it is.\n\n### Example 1. Add custom Http headers to notify remaining api calls\nLet's suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API.\nIt seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: `X-RateLimit-Limit` (maximum number of requests per period), `X-RateLimit-Remaining` (remaining requests in the current period) and `X-RateLimit-Reset` (the timestamp on which the current period ends).\n\nAs I don't want to implement a fully working solution here let's assume we have already written a rate limit checker service registered as `rate_limit_checker` that implements the following interface:\n\n```php\ninterface RateLimitCheckerInterface\n{\n\tpublic function getRateLimit();\n\n\tpublic function getRateLimitRemaining();\n    \n    public function getRateLimitReset();\n}\n```\n\nLet's now write our `RateLimitHeadersListener`:\n\n```php\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nfinal class RateLimitHeadersListener\n{\n\tprivate $rateLimitChecker;\n\n\tpublic function __construct(\n    \tRateLimitCheckerInterface $rateLimitChecker\n    ){\n    \t$this->rateLimitChecker = $rateLimitChecker;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {   \n        $headers = $event->getResponse()->headers;\n\n        $headers->set(\n        \t'X-RateLimit-Limit',\n            $this->rateLimitChecker->getRateLimit()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Remaining',\n            $this->rateLimitChecker->getRateLimitRemaining()\n        );\n        \n        $headers->set(\n        \t'X-RateLimit-Reset',\n            $this->rateLimitChecker->getRateLimitReset()\n        );\n    }   \n}\n```\n\nNow we need to register the listener as a tagged service:\n\n```yaml\n#services.yml\nrate_limit_listener:\n    class: RateLimitHeadersListener\n    arguments: [\"@rate_limit_checker\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nThat's it. Really straightforward, isn't it?\nShould be clear now that, by using this event based approach, we don't have to touch the logic of every single controller.\n\nTake a small break and get ready to jump to another example.\n\n### Example 2. Create a cookie to track referrals\n\nWell, now imagine that we have to build an affiliate program based on referral links ([I did it](https://sbaam.com/affiliates?_r=9oj) lately). \n\nThe general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them.\nDoing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate.\nTo write a more formal specification we have to:\n\n  1. Allow any of our affiliates to share links with a special referral code as query parameter: `?_ref=<REF_ID>` (where `REF_ID` is the unique id of the affiliate).\n  2. Intercept visitor referred by affiliates through the referral parameter and identify the referral\n  3. Create a cookie to track the referred visitor for 30 days\n\nAgain we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a `affiliate_repository` service which implementats of the following interface:\n\n```php\ninterface AffiliateRepositoryInterface\n{\n\tpublic function findOneById($id);\n}\n```\n\nNow let's write our listener to intercept clicks on referral links:\n\n```php\nfinal class AffiliateLinkClickListener\n{\n\tprivate $affiliateRepository;\n    \n    public function __construct(\n    \tAffiliateRepositoryInterface $affiliateRepository\n    ){\n    \t$this->affiliateRepository = $affiliateRepository;\n    }\n    \n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n    \t$request = $event->getRequest();\n        $response = $event->getResponse();\n        \n        // 1.\n        if ($request->query->has('_ref')) {\n        \t$affiliateId = $request->query->get('_ref');\n            // 2.\n            if (null !== $this->affiliateRepository->findOneById($affiliateId)) {\n            \t// 3.\n                $cookie = new Cookie('_ref', $affiliateId, new \\DateTime('+30 days'));\n                $response->headers->setCookie($cookie);\n            }\n        }\n    }\n}\n```\n\nThe code is pretty simple here:\n\n  1. We check if there's a `_ref` parameter in the current request\n  2. If so we check if we have an affiliate with the id found in the `_ref` parameter\n  3. If that's the case we create a cookie that will allow us to keep track of the referral for 30 days.\n  \nObviously don't forget to register the listener as a tagged service:\n\n```yaml\n#services.yml\naffiliate_link_click_listener:\n    class: AffiliateLinkClickListener\n    arguments: [\"@affiliate_repository\"]\n    tags:\n       - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n```\n\nAs I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.\n\n## Conclusion\n\nAs in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.\n\nLet me know what you think with a comment ([comments](#disqus_thread)) and feel free to suggest other real-life use cases for the Kernel Response Event.\n\nThanks!\n\nPS: Huge thanks to [@AxelLessio](http://twitter.com/AxelLessio) and [@JavierEguiluz](http://twitter.com/javiereguiluz) for taking the time to review my very bad english ;)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrz9001asvvuegriapty","content":"<p>One of the things I like most of the Symfony framework is its <a href=\"https://packagist.org/packages/symfony/http-kernel\" target=\"_blank\" rel=\"external\">Http Kernel component</a>. Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener\" target=\"_blank\" rel=\"external\">events</a>.</p>\n<p><a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png\" alt=\"Symfony Http Kernel component overview\"></a></p>\n<p>This approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).</p>\n<h2 id=\"The-Kernel-Response-event\"><a href=\"#The-Kernel-Response-event\" class=\"headerlink\" title=\"The Kernel Response event\"></a>The Kernel Response event</h2><p>One event that I’ve been using a lot lately is the  <a href=\"http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html\" target=\"_blank\" rel=\"external\">Kernel Response event</a> which allows you to edit the response after it has been generated.</p>\n<p>Thanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.</p>\n<p>I will present two different real case scenarios to show how useful (and simple) it is.</p>\n<h3 id=\"Example-1-Add-custom-Http-headers-to-notify-remaining-api-calls\"><a href=\"#Example-1-Add-custom-Http-headers-to-notify-remaining-api-calls\" class=\"headerlink\" title=\"Example 1. Add custom Http headers to notify remaining api calls\"></a>Example 1. Add custom Http headers to notify remaining api calls</h3><p>Let’s suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API.<br>It seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: <code>X-RateLimit-Limit</code> (maximum number of requests per period), <code>X-RateLimit-Remaining</code> (remaining requests in the current period) and <code>X-RateLimit-Reset</code> (the timestamp on which the current period ends).</p>\n<p>As I don’t want to implement a fully working solution here let’s assume we have already written a rate limit checker service registered as <code>rate_limit_checker</code> that implements the following interface:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RateLimitCheckerInterface</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimit</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimitRemaining</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimitReset</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Let’s now write our <code>RateLimitHeadersListener</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">Event</span>\\<span class=\"title\">FilterResponseEvent</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RateLimitHeadersListener</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $rateLimitChecker;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(</span></span></div><div class=\"line\">    \tRateLimitCheckerInterface $rateLimitChecker</div><div class=\"line\">    )&#123;</div><div class=\"line\">    \t<span class=\"keyword\">$this</span>-&gt;rateLimitChecker = $rateLimitChecker;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKernelResponse</span><span class=\"params\">(FilterResponseEvent $event)</span></span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        $headers = $event-&gt;getResponse()-&gt;headers;</div><div class=\"line\"></div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Limit'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimit()</div><div class=\"line\">        );</div><div class=\"line\">        </div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Remaining'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimitRemaining()</div><div class=\"line\">        );</div><div class=\"line\">        </div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Reset'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimitReset()</div><div class=\"line\">        );</div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now we need to register the listener as a tagged service:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#services.yml</span></div><div class=\"line\"><span class=\"attr\">rate_limit_listener:</span></div><div class=\"line\"><span class=\"attr\">    class:</span> RateLimitHeadersListener</div><div class=\"line\"><span class=\"attr\">    arguments:</span> [<span class=\"string\">\"@rate_limit_checker\"</span>]</div><div class=\"line\"><span class=\"attr\">    tags:</span></div><div class=\"line\"><span class=\"bullet\">       -</span> &#123; name: kernel.event_listener, event: kernel.response, method: onKernelResponse &#125;</div></pre></td></tr></table></figure>\n<p>That’s it. Really straightforward, isn’t it?<br>Should be clear now that, by using this event based approach, we don’t have to touch the logic of every single controller.</p>\n<p>Take a small break and get ready to jump to another example.</p>\n<h3 id=\"Example-2-Create-a-cookie-to-track-referrals\"><a href=\"#Example-2-Create-a-cookie-to-track-referrals\" class=\"headerlink\" title=\"Example 2. Create a cookie to track referrals\"></a>Example 2. Create a cookie to track referrals</h3><p>Well, now imagine that we have to build an affiliate program based on referral links (<a href=\"https://sbaam.com/affiliates?_r=9oj\" target=\"_blank\" rel=\"external\">I did it</a> lately). </p>\n<p>The general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them.<br>Doing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate.<br>To write a more formal specification we have to:</p>\n<ol>\n<li>Allow any of our affiliates to share links with a special referral code as query parameter: <code>?_ref=&lt;REF_ID&gt;</code> (where <code>REF_ID</code> is the unique id of the affiliate).</li>\n<li>Intercept visitor referred by affiliates through the referral parameter and identify the referral</li>\n<li>Create a cookie to track the referred visitor for 30 days</li>\n</ol>\n<p>Again we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a <code>affiliate_repository</code> service which implementats of the following interface:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AffiliateRepositoryInterface</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findOneById</span><span class=\"params\">($id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now let’s write our listener to intercept clicks on referral links:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AffiliateLinkClickListener</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $affiliateRepository;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(</span></span></div><div class=\"line\">    \tAffiliateRepositoryInterface $affiliateRepository</div><div class=\"line\">    )&#123;</div><div class=\"line\">    \t<span class=\"keyword\">$this</span>-&gt;affiliateRepository = $affiliateRepository;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKernelResponse</span><span class=\"params\">(FilterResponseEvent $event)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$request = $event-&gt;getRequest();</div><div class=\"line\">        $response = $event-&gt;getResponse();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 1.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ($request-&gt;query-&gt;has(<span class=\"string\">'_ref'</span>)) &#123;</div><div class=\"line\">        \t$affiliateId = $request-&gt;query-&gt;get(<span class=\"string\">'_ref'</span>);</div><div class=\"line\">            <span class=\"comment\">// 2.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">$this</span>-&gt;affiliateRepository-&gt;findOneById($affiliateId)) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 3.</span></div><div class=\"line\">                $cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">'_ref'</span>, $affiliateId, <span class=\"keyword\">new</span> \\DateTime(<span class=\"string\">'+30 days'</span>));</div><div class=\"line\">                $response-&gt;headers-&gt;setCookie($cookie);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code is pretty simple here:</p>\n<ol>\n<li>We check if there’s a <code>_ref</code> parameter in the current request</li>\n<li>If so we check if we have an affiliate with the id found in the <code>_ref</code> parameter</li>\n<li>If that’s the case we create a cookie that will allow us to keep track of the referral for 30 days.</li>\n</ol>\n<p>Obviously don’t forget to register the listener as a tagged service:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#services.yml</span></div><div class=\"line\"><span class=\"attr\">affiliate_link_click_listener:</span></div><div class=\"line\"><span class=\"attr\">    class:</span> AffiliateLinkClickListener</div><div class=\"line\"><span class=\"attr\">    arguments:</span> [<span class=\"string\">\"@affiliate_repository\"</span>]</div><div class=\"line\"><span class=\"attr\">    tags:</span></div><div class=\"line\"><span class=\"bullet\">       -</span> &#123; name: kernel.event_listener, event: kernel.response, method: onKernelResponse &#125;</div></pre></td></tr></table></figure>\n<p>As I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.</p>\n<p>Let me know what you think with a comment (<a href=\"#disqus_thread\">comments</a>) and feel free to suggest other real-life use cases for the Kernel Response Event.</p>\n<p>Thanks!</p>\n<p>PS: Huge thanks to <a href=\"http://twitter.com/AxelLessio\" target=\"_blank\" rel=\"external\">@AxelLessio</a> and <a href=\"http://twitter.com/javiereguiluz\" target=\"_blank\" rel=\"external\">@JavierEguiluz</a> for taking the time to review my very bad english ;)</p>\n","excerpt":"","more":"<p>One of the things I like most of the Symfony framework is its <a href=\"https://packagist.org/packages/symfony/http-kernel\">Http Kernel component</a>. Not only it does offer a very straightforward abstraction to handle requests and responses in an object-oriented way but it also allows you to interact with the whole response generation process through <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener\">events</a>.</p>\n<p><a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html\"><img src=\"/content/images/2015/02/symfony-http-kernel-component-overview-scheme.png\" alt=\"Symfony Http Kernel component overview\"></a></p>\n<p>This approach is very convenient and flexible and in fact the Http Kernel component is the foundation of the Symfony framework but also of several other famous frameworks (Silex, Laravel) and CMSes (Drupal, BackBee CMS).</p>\n<h2 id=\"The-Kernel-Response-event\"><a href=\"#The-Kernel-Response-event\" class=\"headerlink\" title=\"The Kernel Response event\"></a>The Kernel Response event</h2><p>One event that I’ve been using a lot lately is the  <a href=\"http://api.symfony.com/master/Symfony/Component/HttpKernel/Event/FilterResponseEvent.html\">Kernel Response event</a> which allows you to edit the response after it has been generated.</p>\n<p>Thanks to this event you can easily modify the response object (cookies, headers, content, etc.) before it gets sent out to the user without affecting the specific logic of every controller thus avoiding code cluttering and duplication.</p>\n<p>I will present two different real case scenarios to show how useful (and simple) it is.</p>\n<h3 id=\"Example-1-Add-custom-Http-headers-to-notify-remaining-api-calls\"><a href=\"#Example-1-Add-custom-Http-headers-to-notify-remaining-api-calls\" class=\"headerlink\" title=\"Example 1. Add custom Http headers to notify remaining api calls\"></a>Example 1. Add custom Http headers to notify remaining api calls</h3><p>Let’s suppose we developed a wonderful rate limited api and now we want to add some custom headers to notify the user about how much he is using the API.<br>It seems a good idea to copy the approach adopted by the GitHub APIs and add three custome headers: <code>X-RateLimit-Limit</code> (maximum number of requests per period), <code>X-RateLimit-Remaining</code> (remaining requests in the current period) and <code>X-RateLimit-Reset</code> (the timestamp on which the current period ends).</p>\n<p>As I don’t want to implement a fully working solution here let’s assume we have already written a rate limit checker service registered as <code>rate_limit_checker</code> that implements the following interface:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RateLimitCheckerInterface</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimit</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimitRemaining</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRateLimitReset</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Let’s now write our <code>RateLimitHeadersListener</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">HttpKernel</span>\\<span class=\"title\">Event</span>\\<span class=\"title\">FilterResponseEvent</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RateLimitHeadersListener</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $rateLimitChecker;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(</div><div class=\"line\">    \tRateLimitCheckerInterface $rateLimitChecker</div><div class=\"line\">    )</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">$this</span>-&gt;rateLimitChecker = $rateLimitChecker;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKernelResponse</span><span class=\"params\">(FilterResponseEvent $event)</span></div><div class=\"line\">    </span>&#123;   </div><div class=\"line\">        $headers = $event-&gt;getResponse()-&gt;headers;</div><div class=\"line\"></div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Limit'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimit()</div><div class=\"line\">        );</div><div class=\"line\">        </div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Remaining'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimitRemaining()</div><div class=\"line\">        );</div><div class=\"line\">        </div><div class=\"line\">        $headers-&gt;set(</div><div class=\"line\">        \t<span class=\"string\">'X-RateLimit-Reset'</span>,</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;rateLimitChecker-&gt;getRateLimitReset()</div><div class=\"line\">        );</div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now we need to register the listener as a tagged service:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#services.yml</span></div><div class=\"line\"><span class=\"attr\">rate_limit_listener:</span></div><div class=\"line\"><span class=\"attr\">    class:</span> RateLimitHeadersListener</div><div class=\"line\"><span class=\"attr\">    arguments:</span> [<span class=\"string\">\"@rate_limit_checker\"</span>]</div><div class=\"line\"><span class=\"attr\">    tags:</span></div><div class=\"line\"><span class=\"bullet\">       -</span> &#123; name: kernel.event_listener, event: kernel.response, method: onKernelResponse &#125;</div></pre></td></tr></table></figure>\n<p>That’s it. Really straightforward, isn’t it?<br>Should be clear now that, by using this event based approach, we don’t have to touch the logic of every single controller.</p>\n<p>Take a small break and get ready to jump to another example.</p>\n<h3 id=\"Example-2-Create-a-cookie-to-track-referrals\"><a href=\"#Example-2-Create-a-cookie-to-track-referrals\" class=\"headerlink\" title=\"Example 2. Create a cookie to track referrals\"></a>Example 2. Create a cookie to track referrals</h3><p>Well, now imagine that we have to build an affiliate program based on referral links (<a href=\"https://sbaam.com/affiliates?_r=9oj\">I did it</a> lately). </p>\n<p>The general idea is that our affiliates are identified by an ID that they can attach to every url of the website as query parameter. This way every URL of our website can be an entry point for our visitors and our affiliates are free to promote the content that is more relevant for them.<br>Doing so we need to verify every possibile request to check for the referrral parameter and keep track of the whole session of the visitor (or even better monitor him for a given amount of days) to see if his visits converts into some kind of action for which we have to reward the affiliate.<br>To write a more formal specification we have to:</p>\n<ol>\n<li>Allow any of our affiliates to share links with a special referral code as query parameter: <code>?_ref=&lt;REF_ID&gt;</code> (where <code>REF_ID</code> is the unique id of the affiliate).</li>\n<li>Intercept visitor referred by affiliates through the referral parameter and identify the referral</li>\n<li>Create a cookie to track the referred visitor for 30 days</li>\n</ol>\n<p>Again we can use the Kernel Response Event and create a dedicated listener for this task. Before doing so suppose we have already developed a mechanism to store our affiliates and that we have coded a <code>affiliate_repository</code> service which implementats of the following interface:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AffiliateRepositoryInterface</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findOneById</span><span class=\"params\">($id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now let’s write our listener to intercept clicks on referral links:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AffiliateLinkClickListener</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> $affiliateRepository;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(</div><div class=\"line\">    \tAffiliateRepositoryInterface $affiliateRepository</div><div class=\"line\">    )</span></span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">$this</span>-&gt;affiliateRepository = $affiliateRepository;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKernelResponse</span><span class=\"params\">(FilterResponseEvent $event)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">    \t$request = $event-&gt;getRequest();</div><div class=\"line\">        $response = $event-&gt;getResponse();</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 1.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ($request-&gt;query-&gt;has(<span class=\"string\">'_ref'</span>)) &#123;</div><div class=\"line\">        \t$affiliateId = $request-&gt;query-&gt;get(<span class=\"string\">'_ref'</span>);</div><div class=\"line\">            <span class=\"comment\">// 2.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== <span class=\"keyword\">$this</span>-&gt;affiliateRepository-&gt;findOneById($affiliateId)) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 3.</span></div><div class=\"line\">                $cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">'_ref'</span>, $affiliateId, <span class=\"keyword\">new</span> \\DateTime(<span class=\"string\">'+30 days'</span>));</div><div class=\"line\">                $response-&gt;headers-&gt;setCookie($cookie);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code is pretty simple here:</p>\n<ol>\n<li>We check if there’s a <code>_ref</code> parameter in the current request</li>\n<li>If so we check if we have an affiliate with the id found in the <code>_ref</code> parameter</li>\n<li>If that’s the case we create a cookie that will allow us to keep track of the referral for 30 days.</li>\n</ol>\n<p>Obviously don’t forget to register the listener as a tagged service:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#services.yml</span></div><div class=\"line\"><span class=\"attr\">affiliate_link_click_listener:</span></div><div class=\"line\"><span class=\"attr\">    class:</span> AffiliateLinkClickListener</div><div class=\"line\"><span class=\"attr\">    arguments:</span> [<span class=\"string\">\"@affiliate_repository\"</span>]</div><div class=\"line\"><span class=\"attr\">    tags:</span></div><div class=\"line\"><span class=\"bullet\">       -</span> &#123; name: kernel.event_listener, event: kernel.response, method: onKernelResponse &#125;</div></pre></td></tr></table></figure>\n<p>As I said, this mechanisms allows you to track the reference but you also need to track any conversion and check the cookie to see if it has been generated by some affiliate.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As in every tutorial, bear in mind that the code is just a sample to give you a general idea about an approach you can follow to solve some generic problem. You need to adapt it to your use case and consider relevant factors such as security, testing, etc.</p>\n<p>Let me know what you think with a comment (<a href=\"#disqus_thread\">comments</a>) and feel free to suggest other real-life use cases for the Kernel Response Event.</p>\n<p>Thanks!</p>\n<p>PS: Huge thanks to <a href=\"http://twitter.com/AxelLessio\">@AxelLessio</a> and <a href=\"http://twitter.com/javiereguiluz\">@JavierEguiluz</a> for taking the time to review my very bad english ;)</p>\n"},{"uuid":"9f4d82ed-4a42-4563-9884-fd85634947c7","layout":"post","title":"To promise or to callback? That is the question...","slug":"to-promise-or-to-callback-that-is-the-question","subtitle":null,"date":"2016-02-14T13:32:00.000Z","updated":"2016-02-14T15:58:56.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/02/to-promise-or-to-callback-this-is-the-problem-loige-amlet-arnold-schwarzenegger-javascript.png","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nYou are building the next cool [Javascript](/tag/javascript) or [NodeJs](/tag/node-js) module with a lot of asynchronous functions and you are very happy about it. At some point a terrible doubt assaults you:\n\n> Should my API offer support for callbacks or should it be promise based?\n\nIn this article we are going to show a very simple way to add support for both promises and callbacks in our asynchronous modules, this way we can make everyone happy and our libraries much more flexible.\n\n## The problem\n\nPromises can be used as a nice replacement for callbacks, that's a well know fact in the JavaScript world today. Promises turn out to be very useful in making our code more readable and easy to reason about. \nBut while promises bring many advantages, they also require the developer to understand many non-trivial concepts in order to use them correctly and proficiently. For this and other reasons, in some cases it might be more practical to prefer callbacks over promises.\n\nNow let’s imagine for a moment that we want to build a public library that performs asynchronous operations. What do we do? Do we create a *callback oriented* API or a *promise oriented* one? Do we need to be opinionated on one side or another or there are ways to support both and make everyone happy?\n\nThere are at least 2 approaches to face this question, let's see how they work!\n\n\n##1. The \"I don't fu**in' care\" approach\n\n![I don't care gif animation Judy Garland](http://i.giphy.com/on45FojvYvnsQ.gif)\n\nThe first approach, used for instance by libraries like [request](https://www.npmjs.com/package/request), [redis](https://www.npmjs.com/package/redis) and [mysql](https://www.npmjs.com/package/mysql) as well as all the node native async functions, consists in offering a simple API based only on callbacks and leave the developer the option to *promisify* the exposed functions if needed.\nSome of these libraries are a bit more elaborated and they provide helpers to be able to *promisify* all the asynchronous functions they offer at once, but the developer still needs to someway “convert” the exposed API to be able to use promises.\nThat's why I believe this approach feels a bit rude like: \n\n> Do you want to use Promise? I don't care, it's your problem... just promisify what you want and leave me alone!\n\nThere are a number of modules out there that can help to promisify a callback based function. The first two that come in my mind are [Bluebird](http://bluebirdjs.com/) with its [`Promise.promisify()`](http://bluebirdjs.com/docs/api/promise.promisify.html) method and [es6-promisify](https://www.npmjs.com/package/es6-promisify) which adopts ES2015 promises.\n\nLet's see a quick example of this approach with **es6-promisify**. In the following snippet of code we are going to promisify the native `fs.readFile()` function:\n\n```javascript\n\"use strict\";\n\nconst fs = require('fs');\nconst promisify = require('es6-promisify');\n\nlet readFile = promisify(fs.readFile);\n\nreadFile('last_action_hero.txt', 'utf-8')\n  .then((content) => console.log(content))\n  .catch((err) => console.error(err))\n;\n```\n\nThe example is very straightforward, we just have to call `promisify(fs.readFile)` to obtain a promisified version of the `readFile` function. As we might expect we can invoke this function without passing the `callback` argument and we get a `Promise` object as output, so we can immediately use it and call the handy `then` and `catch` methods.\n\nUnfortunately the new `Promise` implementation of ES2015 does not offer a built-in *promisify* mechanism (yet...).\n\n\n## 2. The \"No strong feelings\" way\n\n![I have no strong feeling either way futurama gif animation](http://i.giphy.com/7U7oEJkAiP5Xq.gif)\n\nThis approach is more transparent and I would say more... \"polite\"!\nIt is also based on the concept of offering a simple callback oriented API, but **it makes the callback argument optional**.\nWhenever the callback is passed as an argument the function will behave normally executing the callback on completion or on failure. Instead **when the callback is not passed to the function, it will immediately return a Promise object**.\n\nThis approach effectively combines callbacks and promises in a way that allows the developer to choose at call time what interface to adopt, without any need to promisify the function in advance. Many libraries like [mongoose](https://www.npmjs.com/package/mongoose) and [sequelize](https://www.npmjs.com/package/sequelize) are supporting this approach. \n\nLet’s see a simple implementation of this approach with an example. Let’s assume we want to implement a dummy module that executes divisions asynchronously:\n\n```javascript\nmodule.exports = function asyncDivision (dividend, divisor, cb) {\n  return new Promise((resolve, reject) => {      // [1]\n\n    process.nextTick(() => {\n      if (\n        typeof dividend !== 'number' ||\n        typeof divisor !== 'number' ||\n        divisor === 0\n      ){\n        let error = new Error('Invalid operands');\n        if (cb) { cb(error); }                  // [2]\n        reject(error);\n      }\n\n      var result = dividend/divisor;\n      if (cb) { cb(null, result); }             // [3]\n      resolve(result);\n    });\n\n  });\n};\n```\n\nThe code of the module is very simple, but there are some details (marked with a number in square brackets) that are worth to be underlined:\n\n  1. First, we return a new promise created using the ES2015 `Promise` constructor. We define the whole logic inside the function passed as argument to the constructor.\n  2. In case of error, we reject the promise, but if the callback was passed at call time we also execute the callback to propagate the error.\n  3. After we calculate the result we resolve the promise, but again, if there’s a callback, we propagate the result to the callback as well.\n\nNow to complete the example, let’s see now how we can use this module with both callbacks and promises:\n\n```javascript\n// callback oriented usage\nasyncDivision(10, 2, (error, result) => {\n  if (error) {\n    return console.error(error);\n  }\n  console.log(result);\n});\n\n// promise oriented usage\nasyncDivision(22, 11)\n  .then(result => console.log(result))\n  .catch(error => console.error(error))\n;\n```\n\nIt should be clear that with very little effort, the developers who are going to use our new module will be able to easily choose the style that best suits their needs without having to introduce an external “promisification” function whenever they want to leverage promises.\n\n\n## Conclusion\n\nAs usual I hope this article has been useful and that it will ignite some interesting conversation.\n\nI think from the tone of the article it's quite clear that I prefer to opt for the \"polite\" approach, but I am very curious to know what are your opinions about this topic and if you are a \"I don't care\" or a \"whatever\" person when you create your asynchronous functions in your modules.\n\nLet me know your thoughts in the comments.\n\nUntil next time! :)\n\n","source":"_posts/to-promise-or-to-callback-that-is-the-question.md","raw":"uuid:             9f4d82ed-4a42-4563-9884-fd85634947c7\nlayout:           post\ntitle:            'To promise or to callback? That is the question...'\nslug:             to-promise-or-to-callback-that-is-the-question\nsubtitle:         null\ndate:             '2016-02-14T13:32:00.000Z'\nupdated:          '2016-02-14T15:58:56.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/02/to-promise-or-to-callback-this-is-the-problem-loige-amlet-arnold-schwarzenegger-javascript.png\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - JavaScript\n  - Node.js\n\n---\n\nYou are building the next cool [Javascript](/tag/javascript) or [NodeJs](/tag/node-js) module with a lot of asynchronous functions and you are very happy about it. At some point a terrible doubt assaults you:\n\n> Should my API offer support for callbacks or should it be promise based?\n\nIn this article we are going to show a very simple way to add support for both promises and callbacks in our asynchronous modules, this way we can make everyone happy and our libraries much more flexible.\n\n## The problem\n\nPromises can be used as a nice replacement for callbacks, that's a well know fact in the JavaScript world today. Promises turn out to be very useful in making our code more readable and easy to reason about. \nBut while promises bring many advantages, they also require the developer to understand many non-trivial concepts in order to use them correctly and proficiently. For this and other reasons, in some cases it might be more practical to prefer callbacks over promises.\n\nNow let’s imagine for a moment that we want to build a public library that performs asynchronous operations. What do we do? Do we create a *callback oriented* API or a *promise oriented* one? Do we need to be opinionated on one side or another or there are ways to support both and make everyone happy?\n\nThere are at least 2 approaches to face this question, let's see how they work!\n\n\n##1. The \"I don't fu**in' care\" approach\n\n![I don't care gif animation Judy Garland](http://i.giphy.com/on45FojvYvnsQ.gif)\n\nThe first approach, used for instance by libraries like [request](https://www.npmjs.com/package/request), [redis](https://www.npmjs.com/package/redis) and [mysql](https://www.npmjs.com/package/mysql) as well as all the node native async functions, consists in offering a simple API based only on callbacks and leave the developer the option to *promisify* the exposed functions if needed.\nSome of these libraries are a bit more elaborated and they provide helpers to be able to *promisify* all the asynchronous functions they offer at once, but the developer still needs to someway “convert” the exposed API to be able to use promises.\nThat's why I believe this approach feels a bit rude like: \n\n> Do you want to use Promise? I don't care, it's your problem... just promisify what you want and leave me alone!\n\nThere are a number of modules out there that can help to promisify a callback based function. The first two that come in my mind are [Bluebird](http://bluebirdjs.com/) with its [`Promise.promisify()`](http://bluebirdjs.com/docs/api/promise.promisify.html) method and [es6-promisify](https://www.npmjs.com/package/es6-promisify) which adopts ES2015 promises.\n\nLet's see a quick example of this approach with **es6-promisify**. In the following snippet of code we are going to promisify the native `fs.readFile()` function:\n\n```javascript\n\"use strict\";\n\nconst fs = require('fs');\nconst promisify = require('es6-promisify');\n\nlet readFile = promisify(fs.readFile);\n\nreadFile('last_action_hero.txt', 'utf-8')\n  .then((content) => console.log(content))\n  .catch((err) => console.error(err))\n;\n```\n\nThe example is very straightforward, we just have to call `promisify(fs.readFile)` to obtain a promisified version of the `readFile` function. As we might expect we can invoke this function without passing the `callback` argument and we get a `Promise` object as output, so we can immediately use it and call the handy `then` and `catch` methods.\n\nUnfortunately the new `Promise` implementation of ES2015 does not offer a built-in *promisify* mechanism (yet...).\n\n\n## 2. The \"No strong feelings\" way\n\n![I have no strong feeling either way futurama gif animation](http://i.giphy.com/7U7oEJkAiP5Xq.gif)\n\nThis approach is more transparent and I would say more... \"polite\"!\nIt is also based on the concept of offering a simple callback oriented API, but **it makes the callback argument optional**.\nWhenever the callback is passed as an argument the function will behave normally executing the callback on completion or on failure. Instead **when the callback is not passed to the function, it will immediately return a Promise object**.\n\nThis approach effectively combines callbacks and promises in a way that allows the developer to choose at call time what interface to adopt, without any need to promisify the function in advance. Many libraries like [mongoose](https://www.npmjs.com/package/mongoose) and [sequelize](https://www.npmjs.com/package/sequelize) are supporting this approach. \n\nLet’s see a simple implementation of this approach with an example. Let’s assume we want to implement a dummy module that executes divisions asynchronously:\n\n```javascript\nmodule.exports = function asyncDivision (dividend, divisor, cb) {\n  return new Promise((resolve, reject) => {      // [1]\n\n    process.nextTick(() => {\n      if (\n        typeof dividend !== 'number' ||\n        typeof divisor !== 'number' ||\n        divisor === 0\n      ){\n        let error = new Error('Invalid operands');\n        if (cb) { cb(error); }                  // [2]\n        reject(error);\n      }\n\n      var result = dividend/divisor;\n      if (cb) { cb(null, result); }             // [3]\n      resolve(result);\n    });\n\n  });\n};\n```\n\nThe code of the module is very simple, but there are some details (marked with a number in square brackets) that are worth to be underlined:\n\n  1. First, we return a new promise created using the ES2015 `Promise` constructor. We define the whole logic inside the function passed as argument to the constructor.\n  2. In case of error, we reject the promise, but if the callback was passed at call time we also execute the callback to propagate the error.\n  3. After we calculate the result we resolve the promise, but again, if there’s a callback, we propagate the result to the callback as well.\n\nNow to complete the example, let’s see now how we can use this module with both callbacks and promises:\n\n```javascript\n// callback oriented usage\nasyncDivision(10, 2, (error, result) => {\n  if (error) {\n    return console.error(error);\n  }\n  console.log(result);\n});\n\n// promise oriented usage\nasyncDivision(22, 11)\n  .then(result => console.log(result))\n  .catch(error => console.error(error))\n;\n```\n\nIt should be clear that with very little effort, the developers who are going to use our new module will be able to easily choose the style that best suits their needs without having to introduce an external “promisification” function whenever they want to leverage promises.\n\n\n## Conclusion\n\nAs usual I hope this article has been useful and that it will ignite some interesting conversation.\n\nI think from the tone of the article it's quite clear that I prefer to opt for the \"polite\" approach, but I am very curious to know what are your opinions about this topic and if you are a \"I don't care\" or a \"whatever\" person when you create your asynchronous functions in your modules.\n\nLet me know your thoughts in the comments.\n\nUntil next time! :)\n\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrza001csvvub1l90mzk","content":"<p>You are building the next cool <a href=\"/tag/javascript\">Javascript</a> or <a href=\"/tag/node-js\">NodeJs</a> module with a lot of asynchronous functions and you are very happy about it. At some point a terrible doubt assaults you:</p>\n<blockquote>\n<p>Should my API offer support for callbacks or should it be promise based?</p>\n</blockquote>\n<p>In this article we are going to show a very simple way to add support for both promises and callbacks in our asynchronous modules, this way we can make everyone happy and our libraries much more flexible.</p>\n<h2 id=\"The-problem\"><a href=\"#The-problem\" class=\"headerlink\" title=\"The problem\"></a>The problem</h2><p>Promises can be used as a nice replacement for callbacks, that’s a well know fact in the JavaScript world today. Promises turn out to be very useful in making our code more readable and easy to reason about.<br>But while promises bring many advantages, they also require the developer to understand many non-trivial concepts in order to use them correctly and proficiently. For this and other reasons, in some cases it might be more practical to prefer callbacks over promises.</p>\n<p>Now let’s imagine for a moment that we want to build a public library that performs asynchronous operations. What do we do? Do we create a <em>callback oriented</em> API or a <em>promise oriented</em> one? Do we need to be opinionated on one side or another or there are ways to support both and make everyone happy?</p>\n<p>There are at least 2 approaches to face this question, let’s see how they work!</p>\n<p>##1. The “I don’t fu**in’ care” approach</p>\n<p><img src=\"http://i.giphy.com/on45FojvYvnsQ.gif\" alt=\"I don&#39;t care gif animation Judy Garland\"></p>\n<p>The first approach, used for instance by libraries like <a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">request</a>, <a href=\"https://www.npmjs.com/package/redis\" target=\"_blank\" rel=\"external\">redis</a> and <a href=\"https://www.npmjs.com/package/mysql\" target=\"_blank\" rel=\"external\">mysql</a> as well as all the node native async functions, consists in offering a simple API based only on callbacks and leave the developer the option to <em>promisify</em> the exposed functions if needed.<br>Some of these libraries are a bit more elaborated and they provide helpers to be able to <em>promisify</em> all the asynchronous functions they offer at once, but the developer still needs to someway “convert” the exposed API to be able to use promises.<br>That’s why I believe this approach feels a bit rude like: </p>\n<blockquote>\n<p>Do you want to use Promise? I don’t care, it’s your problem… just promisify what you want and leave me alone!</p>\n</blockquote>\n<p>There are a number of modules out there that can help to promisify a callback based function. The first two that come in my mind are <a href=\"http://bluebirdjs.com/\" target=\"_blank\" rel=\"external\">Bluebird</a> with its <a href=\"http://bluebirdjs.com/docs/api/promise.promisify.html\" target=\"_blank\" rel=\"external\"><code>Promise.promisify()</code></a> method and <a href=\"https://www.npmjs.com/package/es6-promisify\" target=\"_blank\" rel=\"external\">es6-promisify</a> which adopts ES2015 promises.</p>\n<p>Let’s see a quick example of this approach with <strong>es6-promisify</strong>. In the following snippet of code we are going to promisify the native <code>fs.readFile()</code> function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'es6-promisify'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> readFile = promisify(fs.readFile);</div><div class=\"line\"></div><div class=\"line\">readFile(<span class=\"string\">'last_action_hero.txt'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(content))</div><div class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.error(err))</div><div class=\"line\">;</div></pre></td></tr></table></figure>\n<p>The example is very straightforward, we just have to call <code>promisify(fs.readFile)</code> to obtain a promisified version of the <code>readFile</code> function. As we might expect we can invoke this function without passing the <code>callback</code> argument and we get a <code>Promise</code> object as output, so we can immediately use it and call the handy <code>then</code> and <code>catch</code> methods.</p>\n<p>Unfortunately the new <code>Promise</code> implementation of ES2015 does not offer a built-in <em>promisify</em> mechanism (yet…).</p>\n<h2 id=\"2-The-“No-strong-feelings”-way\"><a href=\"#2-The-“No-strong-feelings”-way\" class=\"headerlink\" title=\"2. The “No strong feelings” way\"></a>2. The “No strong feelings” way</h2><p><img src=\"http://i.giphy.com/7U7oEJkAiP5Xq.gif\" alt=\"I have no strong feeling either way futurama gif animation\"></p>\n<p>This approach is more transparent and I would say more… “polite”!<br>It is also based on the concept of offering a simple callback oriented API, but <strong>it makes the callback argument optional</strong>.<br>Whenever the callback is passed as an argument the function will behave normally executing the callback on completion or on failure. Instead <strong>when the callback is not passed to the function, it will immediately return a Promise object</strong>.</p>\n<p>This approach effectively combines callbacks and promises in a way that allows the developer to choose at call time what interface to adopt, without any need to promisify the function in advance. Many libraries like <a href=\"https://www.npmjs.com/package/mongoose\" target=\"_blank\" rel=\"external\">mongoose</a> and <a href=\"https://www.npmjs.com/package/sequelize\" target=\"_blank\" rel=\"external\">sequelize</a> are supporting this approach. </p>\n<p>Let’s see a simple implementation of this approach with an example. Let’s assume we want to implement a dummy module that executes divisions asynchronously:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncDivision</span> (<span class=\"params\">dividend, divisor, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;      <span class=\"comment\">// [1]</span></div><div class=\"line\"></div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (</div><div class=\"line\">        <span class=\"keyword\">typeof</span> dividend !== <span class=\"string\">'number'</span> ||</div><div class=\"line\">        <span class=\"keyword\">typeof</span> divisor !== <span class=\"string\">'number'</span> ||</div><div class=\"line\">        divisor === <span class=\"number\">0</span></div><div class=\"line\">      )&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Invalid operands'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cb) &#123; cb(error); &#125;                  <span class=\"comment\">// [2]</span></div><div class=\"line\">        reject(error);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> result = dividend/divisor;</div><div class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123; cb(<span class=\"literal\">null</span>, result); &#125;             <span class=\"comment\">// [3]</span></div><div class=\"line\">      resolve(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The code of the module is very simple, but there are some details (marked with a number in square brackets) that are worth to be underlined:</p>\n<ol>\n<li>First, we return a new promise created using the ES2015 <code>Promise</code> constructor. We define the whole logic inside the function passed as argument to the constructor.</li>\n<li>In case of error, we reject the promise, but if the callback was passed at call time we also execute the callback to propagate the error.</li>\n<li>After we calculate the result we resolve the promise, but again, if there’s a callback, we propagate the result to the callback as well.</li>\n</ol>\n<p>Now to complete the example, let’s see now how we can use this module with both callbacks and promises:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// callback oriented usage</span></div><div class=\"line\">asyncDivision(<span class=\"number\">10</span>, <span class=\"number\">2</span>, (error, result) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// promise oriented usage</span></div><div class=\"line\">asyncDivision(<span class=\"number\">22</span>, <span class=\"number\">11</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error))</div><div class=\"line\">;</div></pre></td></tr></table></figure>\n<p>It should be clear that with very little effort, the developers who are going to use our new module will be able to easily choose the style that best suits their needs without having to introduce an external “promisification” function whenever they want to leverage promises.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As usual I hope this article has been useful and that it will ignite some interesting conversation.</p>\n<p>I think from the tone of the article it’s quite clear that I prefer to opt for the “polite” approach, but I am very curious to know what are your opinions about this topic and if you are a “I don’t care” or a “whatever” person when you create your asynchronous functions in your modules.</p>\n<p>Let me know your thoughts in the comments.</p>\n<p>Until next time! :)</p>\n","excerpt":"","more":"<p>You are building the next cool <a href=\"/tag/javascript\">Javascript</a> or <a href=\"/tag/node-js\">NodeJs</a> module with a lot of asynchronous functions and you are very happy about it. At some point a terrible doubt assaults you:</p>\n<blockquote>\n<p>Should my API offer support for callbacks or should it be promise based?</p>\n</blockquote>\n<p>In this article we are going to show a very simple way to add support for both promises and callbacks in our asynchronous modules, this way we can make everyone happy and our libraries much more flexible.</p>\n<h2 id=\"The-problem\"><a href=\"#The-problem\" class=\"headerlink\" title=\"The problem\"></a>The problem</h2><p>Promises can be used as a nice replacement for callbacks, that’s a well know fact in the JavaScript world today. Promises turn out to be very useful in making our code more readable and easy to reason about.<br>But while promises bring many advantages, they also require the developer to understand many non-trivial concepts in order to use them correctly and proficiently. For this and other reasons, in some cases it might be more practical to prefer callbacks over promises.</p>\n<p>Now let’s imagine for a moment that we want to build a public library that performs asynchronous operations. What do we do? Do we create a <em>callback oriented</em> API or a <em>promise oriented</em> one? Do we need to be opinionated on one side or another or there are ways to support both and make everyone happy?</p>\n<p>There are at least 2 approaches to face this question, let’s see how they work!</p>\n<p>##1. The “I don’t fu**in’ care” approach</p>\n<p><img src=\"http://i.giphy.com/on45FojvYvnsQ.gif\" alt=\"I don&#39;t care gif animation Judy Garland\"></p>\n<p>The first approach, used for instance by libraries like <a href=\"https://www.npmjs.com/package/request\">request</a>, <a href=\"https://www.npmjs.com/package/redis\">redis</a> and <a href=\"https://www.npmjs.com/package/mysql\">mysql</a> as well as all the node native async functions, consists in offering a simple API based only on callbacks and leave the developer the option to <em>promisify</em> the exposed functions if needed.<br>Some of these libraries are a bit more elaborated and they provide helpers to be able to <em>promisify</em> all the asynchronous functions they offer at once, but the developer still needs to someway “convert” the exposed API to be able to use promises.<br>That’s why I believe this approach feels a bit rude like: </p>\n<blockquote>\n<p>Do you want to use Promise? I don’t care, it’s your problem… just promisify what you want and leave me alone!</p>\n</blockquote>\n<p>There are a number of modules out there that can help to promisify a callback based function. The first two that come in my mind are <a href=\"http://bluebirdjs.com/\">Bluebird</a> with its <a href=\"http://bluebirdjs.com/docs/api/promise.promisify.html\"><code>Promise.promisify()</code></a> method and <a href=\"https://www.npmjs.com/package/es6-promisify\">es6-promisify</a> which adopts ES2015 promises.</p>\n<p>Let’s see a quick example of this approach with <strong>es6-promisify</strong>. In the following snippet of code we are going to promisify the native <code>fs.readFile()</code> function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'es6-promisify'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> readFile = promisify(fs.readFile);</div><div class=\"line\"></div><div class=\"line\">readFile(<span class=\"string\">'last_action_hero.txt'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(content))</div><div class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.error(err))</div><div class=\"line\">;</div></pre></td></tr></table></figure>\n<p>The example is very straightforward, we just have to call <code>promisify(fs.readFile)</code> to obtain a promisified version of the <code>readFile</code> function. As we might expect we can invoke this function without passing the <code>callback</code> argument and we get a <code>Promise</code> object as output, so we can immediately use it and call the handy <code>then</code> and <code>catch</code> methods.</p>\n<p>Unfortunately the new <code>Promise</code> implementation of ES2015 does not offer a built-in <em>promisify</em> mechanism (yet…).</p>\n<h2 id=\"2-The-“No-strong-feelings”-way\"><a href=\"#2-The-“No-strong-feelings”-way\" class=\"headerlink\" title=\"2. The “No strong feelings” way\"></a>2. The “No strong feelings” way</h2><p><img src=\"http://i.giphy.com/7U7oEJkAiP5Xq.gif\" alt=\"I have no strong feeling either way futurama gif animation\"></p>\n<p>This approach is more transparent and I would say more… “polite”!<br>It is also based on the concept of offering a simple callback oriented API, but <strong>it makes the callback argument optional</strong>.<br>Whenever the callback is passed as an argument the function will behave normally executing the callback on completion or on failure. Instead <strong>when the callback is not passed to the function, it will immediately return a Promise object</strong>.</p>\n<p>This approach effectively combines callbacks and promises in a way that allows the developer to choose at call time what interface to adopt, without any need to promisify the function in advance. Many libraries like <a href=\"https://www.npmjs.com/package/mongoose\">mongoose</a> and <a href=\"https://www.npmjs.com/package/sequelize\">sequelize</a> are supporting this approach. </p>\n<p>Let’s see a simple implementation of this approach with an example. Let’s assume we want to implement a dummy module that executes divisions asynchronously:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncDivision</span> (<span class=\"params\">dividend, divisor, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;      <span class=\"comment\">// [1]</span></div><div class=\"line\"></div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (</div><div class=\"line\">        <span class=\"keyword\">typeof</span> dividend !== <span class=\"string\">'number'</span> ||</div><div class=\"line\">        <span class=\"keyword\">typeof</span> divisor !== <span class=\"string\">'number'</span> ||</div><div class=\"line\">        divisor === <span class=\"number\">0</span></div><div class=\"line\">      )&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Invalid operands'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cb) &#123; cb(error); &#125;                  <span class=\"comment\">// [2]</span></div><div class=\"line\">        reject(error);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> result = dividend/divisor;</div><div class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123; cb(<span class=\"literal\">null</span>, result); &#125;             <span class=\"comment\">// [3]</span></div><div class=\"line\">      resolve(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The code of the module is very simple, but there are some details (marked with a number in square brackets) that are worth to be underlined:</p>\n<ol>\n<li>First, we return a new promise created using the ES2015 <code>Promise</code> constructor. We define the whole logic inside the function passed as argument to the constructor.</li>\n<li>In case of error, we reject the promise, but if the callback was passed at call time we also execute the callback to propagate the error.</li>\n<li>After we calculate the result we resolve the promise, but again, if there’s a callback, we propagate the result to the callback as well.</li>\n</ol>\n<p>Now to complete the example, let’s see now how we can use this module with both callbacks and promises:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// callback oriented usage</span></div><div class=\"line\">asyncDivision(<span class=\"number\">10</span>, <span class=\"number\">2</span>, (error, result) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// promise oriented usage</span></div><div class=\"line\">asyncDivision(<span class=\"number\">22</span>, <span class=\"number\">11</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error))</div><div class=\"line\">;</div></pre></td></tr></table></figure>\n<p>It should be clear that with very little effort, the developers who are going to use our new module will be able to easily choose the style that best suits their needs without having to introduce an external “promisification” function whenever they want to leverage promises.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As usual I hope this article has been useful and that it will ignite some interesting conversation.</p>\n<p>I think from the tone of the article it’s quite clear that I prefer to opt for the “polite” approach, but I am very curious to know what are your opinions about this topic and if you are a “I don’t care” or a “whatever” person when you create your asynchronous functions in your modules.</p>\n<p>Let me know your thoughts in the comments.</p>\n<p>Until next time! :)</p>\n"},{"uuid":"b68a45ad-ded6-453a-a773-3e0e5a9a75e3","layout":"post","title":"Two Interviews about Node.Js, JavaScript and being a book author","slug":"two-interviews-about-node-js-javascript-and-being-a-book-author","subtitle":null,"date":"2016-09-25T13:24:08.000Z","updated":"2016-10-02T08:24:23.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/10/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn the last month I had the pleasure to seeing published two interviews regarding my life as developer with [Node.Js](/tag/node-js) and [JavaScript](/tag/javascript) and about being a book author with [Node.Js design patterns second edition](https://www.nodejsdesignpatterns.com).\n\nThe first interview was made with the **Packt Publishing team** and it was published in their own website: \n\n**[With Node.js, it’s easy to get things done](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done)**\n\n[![With Node.js, it’s easy to get things done interview image](/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png)](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done)\n\n\nThe second interview was made by [Thomas Peham](https://twitter.com/tompeham), marketing manager at [UserSnap](http://usersnap.com/blog/): \n\n**[Meet the community: Luciano Mammino, software developer from Sicily](http://usersnap.com/blog/developer-community-luciano-mammino/)**\n\n[![Meet the community: Luciano Mammino, software developer from Sicily interview image](/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png)](http://usersnap.com/blog/developer-community-luciano-mammino/)\n\nI think both interviews turned out to be pretty cool, especially because I had a chance to express my vision about the future of JavaScript and Node.Js, technologies on which I am investing most of my time.\n\nFeel more than welcome to let me know if you share my vision or not here in the comments.\n\nUntil next time!\n","source":"_posts/two-interviews-about-node-js-javascript-and-being-a-book-author.md","raw":"uuid:             b68a45ad-ded6-453a-a773-3e0e5a9a75e3\nlayout:           post\ntitle:            'Two Interviews about Node.Js, JavaScript and being a book author'\nslug:             two-interviews-about-node-js-javascript-and-being-a-book-author\nsubtitle:         null\ndate:             '2016-09-25T13:24:08.000Z'\nupdated:          '2016-10-02T08:24:23.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/10/two-interviews-about-node-js-javascript-and-being-a-book-author.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Collaboration\n  - Node.js\n  - JavaScript\n\n---\n\nIn the last month I had the pleasure to seeing published two interviews regarding my life as developer with [Node.Js](/tag/node-js) and [JavaScript](/tag/javascript) and about being a book author with [Node.Js design patterns second edition](https://www.nodejsdesignpatterns.com).\n\nThe first interview was made with the **Packt Publishing team** and it was published in their own website: \n\n**[With Node.js, it’s easy to get things done](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done)**\n\n[![With Node.js, it’s easy to get things done interview image](/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png)](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done)\n\n\nThe second interview was made by [Thomas Peham](https://twitter.com/tompeham), marketing manager at [UserSnap](http://usersnap.com/blog/): \n\n**[Meet the community: Luciano Mammino, software developer from Sicily](http://usersnap.com/blog/developer-community-luciano-mammino/)**\n\n[![Meet the community: Luciano Mammino, software developer from Sicily interview image](/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png)](http://usersnap.com/blog/developer-community-luciano-mammino/)\n\nI think both interviews turned out to be pretty cool, especially because I had a chance to express my vision about the future of JavaScript and Node.Js, technologies on which I am investing most of my time.\n\nFeel more than welcome to let me know if you share my vision or not here in the comments.\n\nUntil next time!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrzb001fsvvuewuut8u6","content":"<p>In the last month I had the pleasure to seeing published two interviews regarding my life as developer with <a href=\"/tag/node-js\">Node.Js</a> and <a href=\"/tag/javascript\">JavaScript</a> and about being a book author with <a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">Node.Js design patterns second edition</a>.</p>\n<p>The first interview was made with the <strong>Packt Publishing team</strong> and it was published in their own website: </p>\n<p><strong><a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\" target=\"_blank\" rel=\"external\">With Node.js, it’s easy to get things done</a></strong></p>\n<p><a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png\" alt=\"With Node.js, it’s easy to get things done interview image\"></a></p>\n<p>The second interview was made by <a href=\"https://twitter.com/tompeham\" target=\"_blank\" rel=\"external\">Thomas Peham</a>, marketing manager at <a href=\"http://usersnap.com/blog/\" target=\"_blank\" rel=\"external\">UserSnap</a>: </p>\n<p><strong><a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\" target=\"_blank\" rel=\"external\">Meet the community: Luciano Mammino, software developer from Sicily</a></strong></p>\n<p><a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png\" alt=\"Meet the community: Luciano Mammino, software developer from Sicily interview image\"></a></p>\n<p>I think both interviews turned out to be pretty cool, especially because I had a chance to express my vision about the future of JavaScript and Node.Js, technologies on which I am investing most of my time.</p>\n<p>Feel more than welcome to let me know if you share my vision or not here in the comments.</p>\n<p>Until next time!</p>\n","excerpt":"","more":"<p>In the last month I had the pleasure to seeing published two interviews regarding my life as developer with <a href=\"/tag/node-js\">Node.Js</a> and <a href=\"/tag/javascript\">JavaScript</a> and about being a book author with <a href=\"https://www.nodejsdesignpatterns.com\">Node.Js design patterns second edition</a>.</p>\n<p>The first interview was made with the <strong>Packt Publishing team</strong> and it was published in their own website: </p>\n<p><strong><a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\">With Node.js, it’s easy to get things done</a></strong></p>\n<p><a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\"><img src=\"/content/images/2016/09/nodejs-its-easy-get-things-done-packt-interview-luciano-mammino.png\" alt=\"With Node.js, it’s easy to get things done interview image\"></a></p>\n<p>The second interview was made by <a href=\"https://twitter.com/tompeham\">Thomas Peham</a>, marketing manager at <a href=\"http://usersnap.com/blog/\">UserSnap</a>: </p>\n<p><strong><a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\">Meet the community: Luciano Mammino, software developer from Sicily</a></strong></p>\n<p><a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\"><img src=\"/content/images/2016/09/developer-community-luciano-mammino-usersnap-interview.png\" alt=\"Meet the community: Luciano Mammino, software developer from Sicily interview image\"></a></p>\n<p>I think both interviews turned out to be pretty cool, especially because I had a chance to express my vision about the future of JavaScript and Node.Js, technologies on which I am investing most of my time.</p>\n<p>Feel more than welcome to let me know if you share my vision or not here in the comments.</p>\n<p>Until next time!</p>\n"},{"uuid":"96e492f6-2f10-4d11-844c-fa2b14e38b16","layout":"post","title":"Versioning and deploying a static website with Git, Flightplan and Nginx","slug":"versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx","subtitle":null,"date":"2015-09-08T22:16:27.000Z","updated":"2015-09-14T22:15:27.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nDo you ever wondered how to manage the **versioning** and **deployment** process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions.\nIn a recent collaboration with [Usersnap](http://usersnap.com/) I had the pleasure to write a very detailed article for their blog that proposes a solution based on **[Flightplan.js](https://github.com/pstadler/flightplan)**, **Git** and **Nginx**.\n\nMy solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it's easy to customize and extend for more complex requirements.\n\nWithout further ado I really advice you to go and read the article on the Usersnap blog: \n\n[A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\n[![A beginner's guide to deploying static websites](/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg)](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\nIf you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.\n\nCheers :)\n","source":"_posts/versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.md","raw":"uuid:             96e492f6-2f10-4d11-844c-fa2b14e38b16\nlayout:           post\ntitle:            'Versioning and deploying a static website with Git, Flightplan and Nginx'\nslug:             versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx\nsubtitle:         null\ndate:             '2015-09-08T22:16:27.000Z'\nupdated:          '2015-09-14T22:15:27.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2015/09/Versioning-and-deploying-a-static-website-with-git-flightplan-and-nginx.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - JavaScript\n  - Server\n  - Node.js\n  - Nginx\n  - Git\n  - Flightplan\n  - Collaboration\n\n---\n\nDo you ever wondered how to manage the **versioning** and **deployment** process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions.\nIn a recent collaboration with [Usersnap](http://usersnap.com/) I had the pleasure to write a very detailed article for their blog that proposes a solution based on **[Flightplan.js](https://github.com/pstadler/flightplan)**, **Git** and **Nginx**.\n\nMy solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it's easy to customize and extend for more complex requirements.\n\nWithout further ado I really advice you to go and read the article on the Usersnap blog: \n\n[A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\n[![A beginner's guide to deploying static websites](/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg)](http://usersnap.com/blog/deploying-static-websites-flightplan/)\n\nIf you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.\n\nCheers :)\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrzc001hsvvufqyf9dfi","content":"<p>Do you ever wondered how to manage the <strong>versioning</strong> and <strong>deployment</strong> process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions.<br>In a recent collaboration with <a href=\"http://usersnap.com/\" target=\"_blank\" rel=\"external\">Usersnap</a> I had the pleasure to write a very detailed article for their blog that proposes a solution based on <strong><a href=\"https://github.com/pstadler/flightplan\" target=\"_blank\" rel=\"external\">Flightplan.js</a></strong>, <strong>Git</strong> and <strong>Nginx</strong>.</p>\n<p>My solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it’s easy to customize and extend for more complex requirements.</p>\n<p>Without further ado I really advice you to go and read the article on the Usersnap blog: </p>\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\" target=\"_blank\" rel=\"external\">A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan</a></p>\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg\" alt=\"A beginner&#39;s guide to deploying static websites\"></a></p>\n<p>If you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.</p>\n<p>Cheers :)</p>\n","excerpt":"","more":"<p>Do you ever wondered how to manage the <strong>versioning</strong> and <strong>deployment</strong> process of a website? It seems to be a very interesting yet complex topic for which there are already thousands of different solutions.<br>In a recent collaboration with <a href=\"http://usersnap.com/\">Usersnap</a> I had the pleasure to write a very detailed article for their blog that proposes a solution based on <strong><a href=\"https://github.com/pstadler/flightplan\">Flightplan.js</a></strong>, <strong>Git</strong> and <strong>Nginx</strong>.</p>\n<p>My solution is very simple, it requires very few dependencies on your system (Git and NodeJs) and it has been thought to give you the basics of how to define a minimal yet complete setup that it’s easy to customize and extend for more complex requirements.</p>\n<p>Without further ado I really advice you to go and read the article on the Usersnap blog: </p>\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\">A beginner’s guide to deploying static sites with versioning and rollbacks using Flightplan</a></p>\n<p><a href=\"http://usersnap.com/blog/deploying-static-websites-flightplan/\"><img src=\"/content/images/2015/09/a-beginner-s-guide-to-deploying-static-websites-1.jpg\" alt=\"A beginner&#39;s guide to deploying static websites\"></a></p>\n<p>If you like the article or you have any question or comment, please use the comment box on the Usersnap blog post.</p>\n<p>Cheers :)</p>\n"},{"uuid":"c59c1d51-e429-4617-90d0-ff1d3ca71234","layout":"post","title":"Write a console application using Symfony and Pimple","slug":"write-a-console-application-using-symfony-and-pimple","subtitle":null,"date":"2014-03-15T02:16:20.000Z","updated":"2014-03-16T16:50:57.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn this article I will show you how to set up a stand alone command line application by using the [Symfony Console component](https://github.com/symfony/console) and [Pimple](http://pimple.sensiolabs.org/).\n\n![Sample command line app](/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png)\n\nWriting console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).\n\nAnyway I discovered that writing stand alone command line applications using only the [Symfony/Console](https://github.com/symfony/console) component is a lot more easy and enjoyable and that a lot of famous command line applications uses it ([Composer](https://getcomposer.org/) and [Laravel/Artisan](http://laravel.com/docs/commands) just to name a few). Furthermore by using Symfony I became a great fan of the *Dependency Injection* and *Inversion of Control (IoC)* [design pattern](http://martinfowler.com/articles/injection.html) and, as my dependencies started to grow, I wanted to put some sort of *container* in my command line apps. I decided to go with [Pimple](http://pimple.sensiolabs.org/): a really simple dependency injection container written by [Fabien Potencier](http://fabien.potencier.org/), the notorious head behind the Symfony framework and Sensio.\n\n###Let's start\nI will demonstrate my approach by creating a simple \"hello *$name*\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated [GitHub repository](https://github.com/lmammino/SymfonyConsolePimple).\n\nSo we will be able to run\n\n```bash\napp/console greet Alice\n```\n\nand it will print out \n\n```bash\nHello Alice\n(First time!)\n```\n\nYes, intentionally simple! ;)\n\nLet's start by creating our *composer.json* file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).\n\n```json\n{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n```\n\nYes, let's run `composer update` to download all the libraries.\n\n### Folder structure\n\nLet's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:\n\n- app\n- src\n- vendors\n\nThe **app** folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.\n\n### The Greeter service\n\nLet's just define our core service by Writing the `Greeter` class. This class defines the business logic of our greeting application.\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter\n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this->file = $file;\n        if (file_exists($file)) {\n            $this->greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this->greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this->file, Yaml::dump($this->greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            $this->greetings[$name] = 1;\n        } else {\n            $this->greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            return 0;\n        }\n\n        return $this->greetings[$name];\n    }\n}\n```\n\nThe class is really simple. The main methods are `greet` and `countGreetings` that allows you to build the greet string for someone and to count how many times you have greet someone.\n\nNote that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.\n\n### The GreetCommand\n\nNow we have a service with the main business logic, let's just write a Symfony command to run it:\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this->greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this->setName('greet')\n            ->setDescription('Greet someone')\n            ->addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            ->addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $yell = $input->getOption('yell');\n\n        $output->writeln($this->greeter->greet($name, $yell));\n        if (1 === ($count = $this->greeter->countGreetings($name))) {\n            $output->writeln('(First time!)');\n        } else {\n            $output->writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n```\n\nThe command is totally self explainatory! It just defines the *greet* command offering a *name* argument and a *yell* option (both optional). The point here is that our command has a dependency on the `Greeter` class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).\n\n### Ladies and gents, the Pimple container!\n\nFinally it's time to write our Pimple container. Before getting to the code let's recap things a bit.\nWe have a parameter (the name of the greetings count file) and two services (the `Greeter` service and the `GreetCommand`).\nWe will create a `app/config/container.php` file to define our parameters and services with Pimple:\n\n```php\n<?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' => 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application->addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;\n```\n\nIf you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.\nLet's check our definitions one by one:\n\n- `$c['parameters']` contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)\n- `$c['greeter']` defines the construction of our `Greeter` service\n- `$c['command.greet']` defines the construction of our *greet* command\n- `$c['commands']` is an helper definition that returns an array with all the commands that we want to add in our application\n- `$c['application']` defines the creation of our command line application\n\nOk, we are almost done. We just need to write our bootstrap file and our console executable file.\n\n### The bootstrap file\n\nThe file `app/bootstrap.php` is used to load the composer autoloader class and our container:\n\n```php\n<?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n```\n\n`set_time_limit(0)` ensures that our script will not be killed after a certain amount of seconds (if your *php.ini* wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).\n\n### The executable console file\n\nThe last step needed to make our application executable is to write the `app/console` file. This is a php file that can be executed from the command line (you need to `chmod +x` it).\n\n```php\n#!/usr/bin/env php\n<?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application->run();\n```\n\nBy using a container it just need to load our \"application\" service and call `run()` on it.\n\nNote that the first \"[shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29)\" line (`#!/usr/bin/env php`) allows us to run this file by calling `app/console` (so that you can avoid to call the php interpreter explicitly).\n\n### Conclusions\n\nThis app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.\n\nJust to make a final recap I think this approach guarantees several benefits:\n\n- Write **\"container agnostic\" commands** (they does not know the container, but have only the required dependencies injected)\n- **Attach new commands from configuration**: you just need to add them to the `$container['commands']` array\n- Help you a lot to write **thin commands** (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command\n- Allow you to have **parameters and configuration** (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)\n\nThat should be all. Feel free to comment this post or to contribute to the [sample app repository](https://github.com/lmammino/SymfonyConsolePimple) if you feel that this approach can be tweaked.\n\n**UPDATE** (March 16, 2014):  \n[Javier Egiluz](https://twitter.com/javiereguiluz), great Symfony evangelist, pointed out that one of his command line applications, [easybook](http://easybook-project.org/), uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the [easybook code base](https://github.com/javiereguiluz/easybook).\n\nHave a nice weekend!\n","source":"_posts/write-a-console-application-using-symfony-and-pimple.md","raw":"uuid:             c59c1d51-e429-4617-90d0-ff1d3ca71234\nlayout:           post\ntitle:            'Write a console application using Symfony and Pimple'\nslug:             write-a-console-application-using-symfony-and-pimple\nsubtitle:         null\ndate:             '2014-03-15T02:16:20.000Z'\nupdated:          '2014-03-16T16:50:57.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Php\n  - Symfony\n  - Console\n  - Pimple\n\n---\n\nIn this article I will show you how to set up a stand alone command line application by using the [Symfony Console component](https://github.com/symfony/console) and [Pimple](http://pimple.sensiolabs.org/).\n\n![Sample command line app](/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png)\n\nWriting console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).\n\nAnyway I discovered that writing stand alone command line applications using only the [Symfony/Console](https://github.com/symfony/console) component is a lot more easy and enjoyable and that a lot of famous command line applications uses it ([Composer](https://getcomposer.org/) and [Laravel/Artisan](http://laravel.com/docs/commands) just to name a few). Furthermore by using Symfony I became a great fan of the *Dependency Injection* and *Inversion of Control (IoC)* [design pattern](http://martinfowler.com/articles/injection.html) and, as my dependencies started to grow, I wanted to put some sort of *container* in my command line apps. I decided to go with [Pimple](http://pimple.sensiolabs.org/): a really simple dependency injection container written by [Fabien Potencier](http://fabien.potencier.org/), the notorious head behind the Symfony framework and Sensio.\n\n###Let's start\nI will demonstrate my approach by creating a simple \"hello *$name*\" command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated [GitHub repository](https://github.com/lmammino/SymfonyConsolePimple).\n\nSo we will be able to run\n\n```bash\napp/console greet Alice\n```\n\nand it will print out \n\n```bash\nHello Alice\n(First time!)\n```\n\nYes, intentionally simple! ;)\n\nLet's start by creating our *composer.json* file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).\n\n```json\n{\n    \"name\": \"lmammino/symfony-console-pimple\",\n    \"description\": \"A sample Symfony Console app using Pimple\",\n    \"require\": {\n        \"symfony/console\": \"dev-master\",\n        \"pimple/pimple\": \"dev-master\",\n        \"symfony/yaml\": \"dev-master\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Luciano Mammino\",\n            \"email\": \"lmammino@oryzone.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"LMammino\\\\ConsoleApp\\\\\": \"src/\"\n        }\n    }\n}\n```\n\nYes, let's run `composer update` to download all the libraries.\n\n### Folder structure\n\nLet's structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:\n\n- app\n- src\n- vendors\n\nThe **app** folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.\n\n### The Greeter service\n\nLet's just define our core service by Writing the `Greeter` class. This class defines the business logic of our greeting application.\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp;\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Greeter\n{\n    /**\n     * @var string $file\n     */\n    protected $file;\n\n    /**\n     * @var array $greetings\n     */\n    protected $greetings;\n\n    /**\n     * Constructor\n     *\n     * @param string $file\n     */\n    public function __construct($file)\n    {\n        $this->file = $file;\n        if (file_exists($file)) {\n            $this->greetings = Yaml::parse(file_get_contents($file));\n        } else {\n            $this->greetings = array();\n        }\n    }\n\n    /**\n     * Destructor\n     */\n    public function __destruct()\n    {\n        file_put_contents($this->file, Yaml::dump($this->greetings));\n    }\n\n    /**\n     * Builds the greeting for someone (you can yell on it if you want!)\n     *\n     * @param  string $name\n     * @param  bool   $yell wanna yell?\n     * @return string\n     */\n    public function greet($name, $yell = false)\n    {\n        $output = sprintf('Hello %s', $name);\n        if ($yell) {\n            $output = strtoupper($output);\n        }\n\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            $this->greetings[$name] = 1;\n        } else {\n            $this->greetings[$name]++;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Will tell you how many times you greet someone\n     *\n     * @param  string $name\n     * @return int\n     */\n    public function countGreetings($name)\n    {\n        $name = strtolower($name);\n        if (!isset($this->greetings[$name])) {\n            return 0;\n        }\n\n        return $this->greetings[$name];\n    }\n}\n```\n\nThe class is really simple. The main methods are `greet` and `countGreetings` that allows you to build the greet string for someone and to count how many times you have greet someone.\n\nNote that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.\n\n### The GreetCommand\n\nNow we have a service with the main business logic, let's just write a Symfony command to run it:\n\n```php\n<?php\n\nnamespace LMammino\\ConsoleApp\\Command;\n\nuse LMammino\\ConsoleApp\\Greeter;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    /**\n     * @var \\LMammino\\ConsoleApp\\Greeter $greeter\n     */\n    protected $greeter;\n\n    /**\n     * Constructor\n     *\n     * @param Greeter $greeter\n     */\n    public function __construct(Greeter $greeter)\n    {\n        parent::__construct();\n        $this->greeter = $greeter;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function configure()\n    {\n        $this->setName('greet')\n            ->setDescription('Greet someone')\n            ->addArgument('name', InputArgument::OPTIONAL, 'The name of the one you want to greet', 'World')\n            ->addOption('yell', 'Y', InputOption::VALUE_NONE, 'If set will scream out the greeting. Use with caution!');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $yell = $input->getOption('yell');\n\n        $output->writeln($this->greeter->greet($name, $yell));\n        if (1 === ($count = $this->greeter->countGreetings($name))) {\n            $output->writeln('(First time!)');\n        } else {\n            $output->writeln(sprintf('(%d times)', $count));\n        }\n    }\n}\n```\n\nThe command is totally self explainatory! It just defines the *greet* command offering a *name* argument and a *yell* option (both optional). The point here is that our command has a dependency on the `Greeter` class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).\n\n### Ladies and gents, the Pimple container!\n\nFinally it's time to write our Pimple container. Before getting to the code let's recap things a bit.\nWe have a parameter (the name of the greetings count file) and two services (the `Greeter` service and the `GreetCommand`).\nWe will create a `app/config/container.php` file to define our parameters and services with Pimple:\n\n```php\n<?php\n\n$c = new Pimple();\n\n$c['parameters'] = array(\n    'greetings.file' => 'greetings.yaml'\n);\n\n$c['greeter'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Greeter($c['parameters']['greetings.file']);\n};\n\n$c['command.greet'] = function($c) {\n    return new \\LMammino\\ConsoleApp\\Command\\GreetCommand($c['greeter']);\n};\n\n$c['commands'] = function($c) {\n    return array(\n        $c['command.greet']\n    );\n};\n\n$c['application'] = function($c) {\n    $application = new \\Symfony\\Component\\Console\\Application();\n    $application->addCommands($c['commands']);\n    return $application;\n};\n\nreturn $c;\n```\n\nIf you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this \"array\" we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.\nLet's check our definitions one by one:\n\n- `$c['parameters']` contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)\n- `$c['greeter']` defines the construction of our `Greeter` service\n- `$c['command.greet']` defines the construction of our *greet* command\n- `$c['commands']` is an helper definition that returns an array with all the commands that we want to add in our application\n- `$c['application']` defines the creation of our command line application\n\nOk, we are almost done. We just need to write our bootstrap file and our console executable file.\n\n### The bootstrap file\n\nThe file `app/bootstrap.php` is used to load the composer autoloader class and our container:\n\n```php\n<?php\n\nset_time_limit(0);\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = require(__DIR__ . '/config/container.php');\n```\n\n`set_time_limit(0)` ensures that our script will not be killed after a certain amount of seconds (if your *php.ini* wants so). It's almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).\n\n### The executable console file\n\nThe last step needed to make our application executable is to write the `app/console` file. This is a php file that can be executed from the command line (you need to `chmod +x` it).\n\n```php\n#!/usr/bin/env php\n<?php\n\nrequire __DIR__ . '/bootstrap.php';\n\n$application = $container['application'];\n$application->run();\n```\n\nBy using a container it just need to load our \"application\" service and call `run()` on it.\n\nNote that the first \"[shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29)\" line (`#!/usr/bin/env php`) allows us to run this file by calling `app/console` (so that you can avoid to call the php interpreter explicitly).\n\n### Conclusions\n\nThis app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.\nI recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.\n\nJust to make a final recap I think this approach guarantees several benefits:\n\n- Write **\"container agnostic\" commands** (they does not know the container, but have only the required dependencies injected)\n- **Attach new commands from configuration**: you just need to add them to the `$container['commands']` array\n- Help you a lot to write **thin commands** (yes, I think commands acts like controllers and they should be \"thin\" too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command\n- Allow you to have **parameters and configuration** (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)\n\nThat should be all. Feel free to comment this post or to contribute to the [sample app repository](https://github.com/lmammino/SymfonyConsolePimple) if you feel that this approach can be tweaked.\n\n**UPDATE** (March 16, 2014):  \n[Javier Egiluz](https://twitter.com/javiereguiluz), great Symfony evangelist, pointed out that one of his command line applications, [easybook](http://easybook-project.org/), uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the [easybook code base](https://github.com/javiereguiluz/easybook).\n\nHave a nice weekend!\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrzd001ksvvulj1ocudt","content":"<p>In this article I will show you how to set up a stand alone command line application by using the <a href=\"https://github.com/symfony/console\" target=\"_blank\" rel=\"external\">Symfony Console component</a> and <a href=\"http://pimple.sensiolabs.org/\" target=\"_blank\" rel=\"external\">Pimple</a>.</p>\n<p><img src=\"/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png\" alt=\"Sample command line app\"></p>\n<p>Writing console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).</p>\n<p>Anyway I discovered that writing stand alone command line applications using only the <a href=\"https://github.com/symfony/console\" target=\"_blank\" rel=\"external\">Symfony/Console</a> component is a lot more easy and enjoyable and that a lot of famous command line applications uses it (<a href=\"https://getcomposer.org/\" target=\"_blank\" rel=\"external\">Composer</a> and <a href=\"http://laravel.com/docs/commands\" target=\"_blank\" rel=\"external\">Laravel/Artisan</a> just to name a few). Furthermore by using Symfony I became a great fan of the <em>Dependency Injection</em> and <em>Inversion of Control (IoC)</em> <a href=\"http://martinfowler.com/articles/injection.html\" target=\"_blank\" rel=\"external\">design pattern</a> and, as my dependencies started to grow, I wanted to put some sort of <em>container</em> in my command line apps. I decided to go with <a href=\"http://pimple.sensiolabs.org/\" target=\"_blank\" rel=\"external\">Pimple</a>: a really simple dependency injection container written by <a href=\"http://fabien.potencier.org/\" target=\"_blank\" rel=\"external\">Fabien Potencier</a>, the notorious head behind the Symfony framework and Sensio.</p>\n<p>###Let’s start<br>I will demonstrate my approach by creating a simple “hello <em>$name</em>“ command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated <a href=\"https://github.com/lmammino/SymfonyConsolePimple\" target=\"_blank\" rel=\"external\">GitHub repository</a>.</p>\n<p>So we will be able to run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/console greet Alice</div></pre></td></tr></table></figure>\n<p>and it will print out </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello Alice</div><div class=\"line\">(First time!)</div></pre></td></tr></table></figure>\n<p>Yes, intentionally simple! ;)</p>\n<p>Let’s start by creating our <em>composer.json</em> file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"lmammino/symfony-console-pimple\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A sample Symfony Console app using Pimple\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"symfony/console\"</span>: <span class=\"string\">\"dev-master\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"pimple/pimple\"</span>: <span class=\"string\">\"dev-master\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"symfony/yaml\"</span>: <span class=\"string\">\"dev-master\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luciano Mammino\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"lmammino@oryzone.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"LMammino\\\\ConsoleApp\\\\\"</span>: <span class=\"string\">\"src/\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Yes, let’s run <code>composer update</code> to download all the libraries.</p>\n<h3 id=\"Folder-structure\"><a href=\"#Folder-structure\" class=\"headerlink\" title=\"Folder structure\"></a>Folder structure</h3><p>Let’s structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:</p>\n<ul>\n<li>app</li>\n<li>src</li>\n<li>vendors</li>\n</ul>\n<p>The <strong>app</strong> folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.</p>\n<h3 id=\"The-Greeter-service\"><a href=\"#The-Greeter-service\" class=\"headerlink\" title=\"The Greeter service\"></a>The Greeter service</h3><p>Let’s just define our core service by Writing the <code>Greeter</code> class. This class defines the business logic of our greeting application.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Yaml</span>\\<span class=\"title\">Yaml</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@var</span> string $file</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">protected</span> $file;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@var</span> array $greetings</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">protected</span> $greetings;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Constructor</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> string $file</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($file)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = $file;</div><div class=\"line\">        <span class=\"keyword\">if</span> (file_exists($file)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings = Yaml::parse(file_get_contents($file));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings = <span class=\"keyword\">array</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Destructor</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        file_put_contents(<span class=\"keyword\">$this</span>-&gt;file, Yaml::dump(<span class=\"keyword\">$this</span>-&gt;greetings));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Builds the greeting for someone (you can yell on it if you want!)</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  string $name</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  bool   $yell wanna yell?</div><div class=\"line\">     * <span class=\"doctag\">@return</span> string</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span><span class=\"params\">($name, $yell = false)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $output = sprintf(<span class=\"string\">'Hello %s'</span>, $name);</div><div class=\"line\">        <span class=\"keyword\">if</span> ($yell) &#123;</div><div class=\"line\">            $output = strtoupper($output);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $name = strtolower($name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;greetings[$name])) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings[$name] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings[$name]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> $output;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Will tell you how many times you greet someone</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  string $name</div><div class=\"line\">     * <span class=\"doctag\">@return</span> int</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countGreetings</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $name = strtolower($name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;greetings[$name])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;greetings[$name];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The class is really simple. The main methods are <code>greet</code> and <code>countGreetings</code> that allows you to build the greet string for someone and to count how many times you have greet someone.</p>\n<p>Note that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.</p>\n<h3 id=\"The-GreetCommand\"><a href=\"#The-GreetCommand\" class=\"headerlink\" title=\"The GreetCommand\"></a>The GreetCommand</h3><p>Now we have a service with the main business logic, let’s just write a Symfony command to run it:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>\\<span class=\"title\">Command</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>\\<span class=\"title\">Greeter</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>\\<span class=\"title\">Command</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputArgument</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputInterface</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputOption</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Output</span>\\<span class=\"title\">OutputInterface</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@var</span> \\LMammino\\ConsoleApp\\Greeter $greeter</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">protected</span> $greeter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Constructor</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Greeter $greeter</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Greeter $greeter)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;greeter = $greeter;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configure</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setName(<span class=\"string\">'greet'</span>)</div><div class=\"line\">            -&gt;setDescription(<span class=\"string\">'Greet someone'</span>)</div><div class=\"line\">            -&gt;addArgument(<span class=\"string\">'name'</span>, InputArgument::OPTIONAL, <span class=\"string\">'The name of the one you want to greet'</span>, <span class=\"string\">'World'</span>)</div><div class=\"line\">            -&gt;addOption(<span class=\"string\">'yell'</span>, <span class=\"string\">'Y'</span>, InputOption::VALUE_NONE, <span class=\"string\">'If set will scream out the greeting. Use with caution!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">(InputInterface $input, OutputInterface $output)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $name = $input-&gt;getArgument(<span class=\"string\">'name'</span>);</div><div class=\"line\">        $yell = $input-&gt;getOption(<span class=\"string\">'yell'</span>);</div><div class=\"line\"></div><div class=\"line\">        $output-&gt;writeln(<span class=\"keyword\">$this</span>-&gt;greeter-&gt;greet($name, $yell));</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> === ($count = <span class=\"keyword\">$this</span>-&gt;greeter-&gt;countGreetings($name))) &#123;</div><div class=\"line\">            $output-&gt;writeln(<span class=\"string\">'(First time!)'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $output-&gt;writeln(sprintf(<span class=\"string\">'(%d times)'</span>, $count));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The command is totally self explainatory! It just defines the <em>greet</em> command offering a <em>name</em> argument and a <em>yell</em> option (both optional). The point here is that our command has a dependency on the <code>Greeter</code> class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).</p>\n<h3 id=\"Ladies-and-gents-the-Pimple-container\"><a href=\"#Ladies-and-gents-the-Pimple-container\" class=\"headerlink\" title=\"Ladies and gents, the Pimple container!\"></a>Ladies and gents, the Pimple container!</h3><p>Finally it’s time to write our Pimple container. Before getting to the code let’s recap things a bit.<br>We have a parameter (the name of the greetings count file) and two services (the <code>Greeter</code> service and the <code>GreetCommand</code>).<br>We will create a <code>app/config/container.php</code> file to define our parameters and services with Pimple:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\">$c = <span class=\"keyword\">new</span> Pimple();</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'parameters'</span>] = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'greetings.file'</span> =&gt; <span class=\"string\">'greetings.yaml'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'greeter'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\LMammino\\ConsoleApp\\Greeter($c[<span class=\"string\">'parameters'</span>][<span class=\"string\">'greetings.file'</span>]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'command.greet'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\LMammino\\ConsoleApp\\Command\\GreetCommand($c[<span class=\"string\">'greeter'</span>]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'commands'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">        $c[<span class=\"string\">'command.greet'</span>]</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'application'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    $application = <span class=\"keyword\">new</span> \\Symfony\\Component\\Console\\Application();</div><div class=\"line\">    $application-&gt;addCommands($c[<span class=\"string\">'commands'</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> $application;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> $c;</div></pre></td></tr></table></figure>\n<p>If you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this “array” we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.<br>Let’s check our definitions one by one:</p>\n<ul>\n<li><code>$c[&#39;parameters&#39;]</code> contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)</li>\n<li><code>$c[&#39;greeter&#39;]</code> defines the construction of our <code>Greeter</code> service</li>\n<li><code>$c[&#39;command.greet&#39;]</code> defines the construction of our <em>greet</em> command</li>\n<li><code>$c[&#39;commands&#39;]</code> is an helper definition that returns an array with all the commands that we want to add in our application</li>\n<li><code>$c[&#39;application&#39;]</code> defines the creation of our command line application</li>\n</ul>\n<p>Ok, we are almost done. We just need to write our bootstrap file and our console executable file.</p>\n<h3 id=\"The-bootstrap-file\"><a href=\"#The-bootstrap-file\" class=\"headerlink\" title=\"The bootstrap file\"></a>The bootstrap file</h3><p>The file <code>app/bootstrap.php</code> is used to load the composer autoloader class and our container:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/../vendor/autoload.php'</span>;</div><div class=\"line\"></div><div class=\"line\">$container = <span class=\"keyword\">require</span>(<span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/config/container.php'</span>);</div></pre></td></tr></table></figure>\n<p><code>set_time_limit(0)</code> ensures that our script will not be killed after a certain amount of seconds (if your <em>php.ini</em> wants so). It’s almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).</p>\n<h3 id=\"The-executable-console-file\"><a href=\"#The-executable-console-file\" class=\"headerlink\" title=\"The executable console file\"></a>The executable console file</h3><p>The last step needed to make our application executable is to write the <code>app/console</code> file. This is a php file that can be executed from the command line (you need to <code>chmod +x</code> it).</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env php</span></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/bootstrap.php'</span>;</div><div class=\"line\"></div><div class=\"line\">$application = $container[<span class=\"string\">'application'</span>];</div><div class=\"line\">$application-&gt;run();</div></pre></td></tr></table></figure>\n<p>By using a container it just need to load our “application” service and call <code>run()</code> on it.</p>\n<p>Note that the first “<a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\" target=\"_blank\" rel=\"external\">shebang</a>“ line (<code>#!/usr/bin/env php</code>) allows us to run this file by calling <code>app/console</code> (so that you can avoid to call the php interpreter explicitly).</p>\n<h3 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><p>This app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.<br>I recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.</p>\n<p>Just to make a final recap I think this approach guarantees several benefits:</p>\n<ul>\n<li>Write <strong>“container agnostic” commands</strong> (they does not know the container, but have only the required dependencies injected)</li>\n<li><strong>Attach new commands from configuration</strong>: you just need to add them to the <code>$container[&#39;commands&#39;]</code> array</li>\n<li>Help you a lot to write <strong>thin commands</strong> (yes, I think commands acts like controllers and they should be “thin” too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command</li>\n<li>Allow you to have <strong>parameters and configuration</strong> (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)</li>\n</ul>\n<p>That should be all. Feel free to comment this post or to contribute to the <a href=\"https://github.com/lmammino/SymfonyConsolePimple\" target=\"_blank\" rel=\"external\">sample app repository</a> if you feel that this approach can be tweaked.</p>\n<p><strong>UPDATE</strong> (March 16, 2014):<br><a href=\"https://twitter.com/javiereguiluz\" target=\"_blank\" rel=\"external\">Javier Egiluz</a>, great Symfony evangelist, pointed out that one of his command line applications, <a href=\"http://easybook-project.org/\" target=\"_blank\" rel=\"external\">easybook</a>, uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the <a href=\"https://github.com/javiereguiluz/easybook\" target=\"_blank\" rel=\"external\">easybook code base</a>.</p>\n<p>Have a nice weekend!</p>\n","excerpt":"","more":"<p>In this article I will show you how to set up a stand alone command line application by using the <a href=\"https://github.com/symfony/console\">Symfony Console component</a> and <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>.</p>\n<p><img src=\"/content/images/2014/Mar/Screenshot_from_2014_03_15_03_19_53.png\" alt=\"Sample command line app\"></p>\n<p>Writing console commands for Symfony (full stack framework) is easy and enjoyable. It helps a lot when you need to handle particular collateral tasks that are needed, in a way or another, to make your website running (processing and crunching data, make async requests, create reports, etc.).</p>\n<p>Anyway I discovered that writing stand alone command line applications using only the <a href=\"https://github.com/symfony/console\">Symfony/Console</a> component is a lot more easy and enjoyable and that a lot of famous command line applications uses it (<a href=\"https://getcomposer.org/\">Composer</a> and <a href=\"http://laravel.com/docs/commands\">Laravel/Artisan</a> just to name a few). Furthermore by using Symfony I became a great fan of the <em>Dependency Injection</em> and <em>Inversion of Control (IoC)</em> <a href=\"http://martinfowler.com/articles/injection.html\">design pattern</a> and, as my dependencies started to grow, I wanted to put some sort of <em>container</em> in my command line apps. I decided to go with <a href=\"http://pimple.sensiolabs.org/\">Pimple</a>: a really simple dependency injection container written by <a href=\"http://fabien.potencier.org/\">Fabien Potencier</a>, the notorious head behind the Symfony framework and Sensio.</p>\n<p>###Let’s start<br>I will demonstrate my approach by creating a simple “hello <em>$name</em>“ command line application that will be able to count how many times you greet someone. You can find the whole code in a dedicated <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">GitHub repository</a>.</p>\n<p>So we will be able to run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/console greet Alice</div></pre></td></tr></table></figure>\n<p>and it will print out </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello Alice</div><div class=\"line\">(First time!)</div></pre></td></tr></table></figure>\n<p>Yes, intentionally simple! ;)</p>\n<p>Let’s start by creating our <em>composer.json</em> file. We will need the Symfony console and the Pimple packages. We also include the Symfony Yaml component as we will store data in a yaml file (obviously we could have been using json but I believe yaml is cooler :P).</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"lmammino/symfony-console-pimple\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A sample Symfony Console app using Pimple\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"symfony/console\"</span>: <span class=\"string\">\"dev-master\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"pimple/pimple\"</span>: <span class=\"string\">\"dev-master\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"symfony/yaml\"</span>: <span class=\"string\">\"dev-master\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luciano Mammino\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"lmammino@oryzone.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"LMammino\\\\ConsoleApp\\\\\"</span>: <span class=\"string\">\"src/\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Yes, let’s run <code>composer update</code> to download all the libraries.</p>\n<h3 id=\"Folder-structure\"><a href=\"#Folder-structure\" class=\"headerlink\" title=\"Folder structure\"></a>Folder structure</h3><p>Let’s structure our code. We want to separate application and configuration code from the main source code. So we will end up with the following folder structure:</p>\n<ul>\n<li>app</li>\n<li>src</li>\n<li>vendors</li>\n</ul>\n<p>The <strong>app</strong> folder will contain our console executable file, a bootstrap file and a config folder. We will get into the details in a while.</p>\n<h3 id=\"The-Greeter-service\"><a href=\"#The-Greeter-service\" class=\"headerlink\" title=\"The Greeter service\"></a>The Greeter service</h3><p>Let’s just define our core service by Writing the <code>Greeter</code> class. This class defines the business logic of our greeting application.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Yaml</span>\\<span class=\"title\">Yaml</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@var</span> string $file</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $file;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@var</span> array $greetings</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $greetings;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Constructor</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> string $file</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($file)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = $file;</div><div class=\"line\">        <span class=\"keyword\">if</span> (file_exists($file)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings = Yaml::parse(file_get_contents($file));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings = <span class=\"keyword\">array</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Destructor</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        file_put_contents(<span class=\"keyword\">$this</span>-&gt;file, Yaml::dump(<span class=\"keyword\">$this</span>-&gt;greetings));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Builds the greeting for someone (you can yell on it if you want!)</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  string $name</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  bool   $yell wanna yell?</div><div class=\"line\">     * <span class=\"doctag\">@return</span> string</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span><span class=\"params\">($name, $yell = false)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $output = sprintf(<span class=\"string\">'Hello %s'</span>, $name);</div><div class=\"line\">        <span class=\"keyword\">if</span> ($yell) &#123;</div><div class=\"line\">            $output = strtoupper($output);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        $name = strtolower($name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;greetings[$name])) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings[$name] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;greetings[$name]++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> $output;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Will tell you how many times you greet someone</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span>  string $name</div><div class=\"line\">     * <span class=\"doctag\">@return</span> int</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countGreetings</span><span class=\"params\">($name)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $name = strtolower($name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;greetings[$name])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;greetings[$name];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The class is really simple. The main methods are <code>greet</code> and <code>countGreetings</code> that allows you to build the greet string for someone and to count how many times you have greet someone.</p>\n<p>Note that this class needs to know on costruction which file to use to read and store the greetings count. This will be something we will configure through Pimple as a container parameter.</p>\n<h3 id=\"The-GreetCommand\"><a href=\"#The-GreetCommand\" class=\"headerlink\" title=\"The GreetCommand\"></a>The GreetCommand</h3><p>Now we have a service with the main business logic, let’s just write a Symfony command to run it:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>\\<span class=\"title\">Command</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">LMammino</span>\\<span class=\"title\">ConsoleApp</span>\\<span class=\"title\">Greeter</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>\\<span class=\"title\">Command</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputArgument</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputInterface</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Input</span>\\<span class=\"title\">InputOption</span>;</div><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Symfony</span>\\<span class=\"title\">Component</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Output</span>\\<span class=\"title\">OutputInterface</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@var</span> \\LMammino\\ConsoleApp\\Greeter $greeter</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $greeter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Constructor</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Greeter $greeter</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Greeter $greeter)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;greeter = $greeter;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configure</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setName(<span class=\"string\">'greet'</span>)</div><div class=\"line\">            -&gt;setDescription(<span class=\"string\">'Greet someone'</span>)</div><div class=\"line\">            -&gt;addArgument(<span class=\"string\">'name'</span>, InputArgument::OPTIONAL, <span class=\"string\">'The name of the one you want to greet'</span>, <span class=\"string\">'World'</span>)</div><div class=\"line\">            -&gt;addOption(<span class=\"string\">'yell'</span>, <span class=\"string\">'Y'</span>, InputOption::VALUE_NONE, <span class=\"string\">'If set will scream out the greeting. Use with caution!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">(InputInterface $input, OutputInterface $output)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $name = $input-&gt;getArgument(<span class=\"string\">'name'</span>);</div><div class=\"line\">        $yell = $input-&gt;getOption(<span class=\"string\">'yell'</span>);</div><div class=\"line\"></div><div class=\"line\">        $output-&gt;writeln(<span class=\"keyword\">$this</span>-&gt;greeter-&gt;greet($name, $yell));</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> === ($count = <span class=\"keyword\">$this</span>-&gt;greeter-&gt;countGreetings($name))) &#123;</div><div class=\"line\">            $output-&gt;writeln(<span class=\"string\">'(First time!)'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $output-&gt;writeln(sprintf(<span class=\"string\">'(%d times)'</span>, $count));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The command is totally self explainatory! It just defines the <em>greet</em> command offering a <em>name</em> argument and a <em>yell</em> option (both optional). The point here is that our command has a dependency on the <code>Greeter</code> class we wrote before. So we need to pass it on construction (or we need to configure our Pimple container to do so).</p>\n<h3 id=\"Ladies-and-gents-the-Pimple-container\"><a href=\"#Ladies-and-gents-the-Pimple-container\" class=\"headerlink\" title=\"Ladies and gents, the Pimple container!\"></a>Ladies and gents, the Pimple container!</h3><p>Finally it’s time to write our Pimple container. Before getting to the code let’s recap things a bit.<br>We have a parameter (the name of the greetings count file) and two services (the <code>Greeter</code> service and the <code>GreetCommand</code>).<br>We will create a <code>app/config/container.php</code> file to define our parameters and services with Pimple:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\">$c = <span class=\"keyword\">new</span> Pimple();</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'parameters'</span>] = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'greetings.file'</span> =&gt; <span class=\"string\">'greetings.yaml'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'greeter'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\LMammino\\ConsoleApp\\Greeter($c[<span class=\"string\">'parameters'</span>][<span class=\"string\">'greetings.file'</span>]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'command.greet'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> \\LMammino\\ConsoleApp\\Command\\GreetCommand($c[<span class=\"string\">'greeter'</span>]);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'commands'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">        $c[<span class=\"string\">'command.greet'</span>]</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$c[<span class=\"string\">'application'</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($c)</span> </span>&#123;</div><div class=\"line\">    $application = <span class=\"keyword\">new</span> \\Symfony\\Component\\Console\\Application();</div><div class=\"line\">    $application-&gt;addCommands($c[<span class=\"string\">'commands'</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> $application;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> $c;</div></pre></td></tr></table></figure>\n<p>If you were not familiar with Pimple you should have noticed the simple syntax of this container. We just need to create a Pimple instance and it acts like an array. In this “array” we put parameters as simple data (scalar or array values) and service definitions as functions that return instantiated services.<br>Let’s check our definitions one by one:</p>\n<ul>\n<li><code>$c[&#39;parameters&#39;]</code> contains the applications parameters (in a more complex application with a lot of parameters you can load the values from an external configuration file)</li>\n<li><code>$c[&#39;greeter&#39;]</code> defines the construction of our <code>Greeter</code> service</li>\n<li><code>$c[&#39;command.greet&#39;]</code> defines the construction of our <em>greet</em> command</li>\n<li><code>$c[&#39;commands&#39;]</code> is an helper definition that returns an array with all the commands that we want to add in our application</li>\n<li><code>$c[&#39;application&#39;]</code> defines the creation of our command line application</li>\n</ul>\n<p>Ok, we are almost done. We just need to write our bootstrap file and our console executable file.</p>\n<h3 id=\"The-bootstrap-file\"><a href=\"#The-bootstrap-file\" class=\"headerlink\" title=\"The bootstrap file\"></a>The bootstrap file</h3><p>The file <code>app/bootstrap.php</code> is used to load the composer autoloader class and our container:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\">set_time_limit(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/../vendor/autoload.php'</span>;</div><div class=\"line\"></div><div class=\"line\">$container = <span class=\"keyword\">require</span>(<span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/config/container.php'</span>);</div></pre></td></tr></table></figure>\n<p><code>set_time_limit(0)</code> ensures that our script will not be killed after a certain amount of seconds (if your <em>php.ini</em> wants so). It’s almost useless in this particular case (our command will run in a few milliseconds) but adding it in Php command line applications is a good practice (especially when you have to deal with long running tasks).</p>\n<h3 id=\"The-executable-console-file\"><a href=\"#The-executable-console-file\" class=\"headerlink\" title=\"The executable console file\"></a>The executable console file</h3><p>The last step needed to make our application executable is to write the <code>app/console</code> file. This is a php file that can be executed from the command line (you need to <code>chmod +x</code> it).</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env php</span></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/bootstrap.php'</span>;</div><div class=\"line\"></div><div class=\"line\">$application = $container[<span class=\"string\">'application'</span>];</div><div class=\"line\">$application-&gt;run();</div></pre></td></tr></table></figure>\n<p>By using a container it just need to load our “application” service and call <code>run()</code> on it.</p>\n<p>Note that the first “<a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\">shebang</a>“ line (<code>#!/usr/bin/env php</code>) allows us to run this file by calling <code>app/console</code> (so that you can avoid to call the php interpreter explicitly).</p>\n<h3 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><p>This app is very simple and it will be easy to build even without adopting a container. Anyway I think this approach guarantees a good organization for your code and will became really useful when your command line application start to grow in terms of complexity.<br>I recently had to build a command line app that uses Doctrine and JMS/Serializer (plus several other dependecies). I can say that adopting a container like Pimple helped me a lot to keep things organized and services decoupled.</p>\n<p>Just to make a final recap I think this approach guarantees several benefits:</p>\n<ul>\n<li>Write <strong>“container agnostic” commands</strong> (they does not know the container, but have only the required dependencies injected)</li>\n<li><strong>Attach new commands from configuration</strong>: you just need to add them to the <code>$container[&#39;commands&#39;]</code> array</li>\n<li>Help you a lot to write <strong>thin commands</strong> (yes, I think commands acts like controllers and they should be “thin” too), because you have a simple way to declare services and their dependencies and you are able to inject only the needed ones in every command</li>\n<li>Allow you to have <strong>parameters and configuration</strong> (useful when you have to enstablish a connection with a database or use external resources that needs configuration such as an external API)</li>\n</ul>\n<p>That should be all. Feel free to comment this post or to contribute to the <a href=\"https://github.com/lmammino/SymfonyConsolePimple\">sample app repository</a> if you feel that this approach can be tweaked.</p>\n<p><strong>UPDATE</strong> (March 16, 2014):<br><a href=\"https://twitter.com/javiereguiluz\">Javier Egiluz</a>, great Symfony evangelist, pointed out that one of his command line applications, <a href=\"http://easybook-project.org/\">easybook</a>, uses the Symfony Console component in conjunction with Pimple. So if you want to have a look to a more complete and realistic (and complex :P) use case I really suggest you to have a look at the <a href=\"https://github.com/javiereguiluz/easybook\">easybook code base</a>.</p>\n<p>Have a nice weekend!</p>\n"},{"uuid":"e935373e-574b-493e-8f84-de5194c67401","layout":"post","title":"Writing a new Extractor for PHPoAuthUserData","slug":"writing-a-new-extractor-for-php-oauth-user-data","subtitle":null,"date":"2014-02-10T17:23:54.000Z","updated":"2014-02-10T17:30:42.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":null,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\nIn my [previous post](http://loige.com/new-php-library-php-oauth-user-data/) I introduced my latest library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) that allows to abstract the process of\nextracting user profile data from various OAuth providers (*Facebook*, *Twitter*, *Linkedin*, etc).\n\nThe library still need a lot of work, especially to write the logic to extract data from all the services available in the [parent OAuth library](https://github.com/Lusitanian/PHPoAuthLib).\n\nAt the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:\n\nAmazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.\n\nSo that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.\n\nThis article illustrates how to add support for a new service by writing a dedicate **extractor** class. It's really simple so stick with me and you will be able to submit your pull request in minutes!\n\nExtractors defines the logic to request information to a given service API and to normalize the received data according to a common [interface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php).\nThe most basic way to define an extractor is to write a class that implements the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php) (that is pretty self-explanatory). \n\nYou could extend the class [Extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php) that implements most of the needed code to get you started. Anyway, extractors should **really** extend the class [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) where possible\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that **lazy loads** data (perform requests only when needed to) and **caches** data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make\nrequests and how to normalize data.\n\nTo understand how to write a new extractor by adopting the [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) we need to clarify some concepts:\n\n  - **Supported fields**: an array of the fields that can be extracted (you should use field constants from the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php)).\n  - **Loaders**: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix `Loader` in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: `profileLoader`).\n  - **Normalizers**: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix `Normalizer` (eg. `uniqueIdNormalizer` or `descriptionNormalizer`).\n  - **LoadersMap**: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the `Loader` suffix.\nMost of the time, if you have only the `profileLoader` loader you will have an array with all fields mapping to the string `profile`.\n  - **NormalizersMap**: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the `Normalizer` suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. `array(self::FIELD_UNIQUE_ID => self::FIELD_UNIQUE_ID)`) for\nevery supported field.\n\nOnce you defined *Supported Fields*, *Loaders*, *Normalizers*, *Loaders Map* and *Normalizers Map* from within your new extractor class you must\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as `getSupportedField`, `getLoadersMap` and `getNormalizersMap`\nyou will end up with a constructor like this:\n\n```php\npublic function __construct()\n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n```\n\nBut let's see how I built the [Instagram extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php) to have a better understanding on the whole process.\n\n## Writing the Instagram extractor\n\nFirst of all I had a look on [a bit of documentation](http://instagram.com/developer/api-console/) to find out what kind of data can be extracted from Instagram users.\n\nSo I discovered that the request to retrieve information about the user is: `/users/self` and its response is a json object that looks like the following:\n\n```json\n{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n```\n\nSo I understood wich fields can be mapped and started writing the `Instagram` class under the `OAuth\\UserData\\Extractor` namespace.\n\n```php\n<?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor\n{\n\t//...\n}\n```\n\nFirst of all I wrote the method `profileLoader` and added a class constant that defines the url of the request.\n\n```php\nconst REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()\n{\n\treturn json_decode($this->service->request(self::REQUEST_PROFILE), true);\n}\n```\n\nEach extractor has access to the property `$this->service` that is an instance of the specific OAuth service from the parent library (`OAuth\\OAuth2\\Service\\Instagram`) in this case. With this instance you can easily make request to the provider API endpoint.\n\nThen I added the `getSupportedFields` method:\n\n```php\nprotected static function getSupportedFields()\n{\n\treturn array(\n\t\tself::FIELD_UNIQUE_ID,\n\t\tself::FIELD_USERNAME,\n\t\tself::FIELD_FULL_NAME,\n\t\tself::FIELD_FIRST_NAME,\n\t\tself::FIELD_LAST_NAME,\n\t\tself::FIELD_DESCRIPTION,\n\t\tself::FIELD_WEBSITES,\n\t\tself::FIELD_IMAGE_URL,\n\t\tself::FIELD_PROFILE_URL,\n\t\tself::FIELD_EXTRA\n\t);\n}\n```\n\nThe fields *first_name*, *last_name* and *profile_url* are not directly available on the json response but are easy to reconstruct by using the *full_name* and *username* fields.\n\nThan I started writing all the normalizer methods to map the raw data to the respective supported fields:\n\n```php\nprotected function uniqueIdNormalizer($data)\n{\n\treturn isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)\n{\n\treturn isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)\n{\n\treturn isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\treturn $names[0];\n\t}\n\n\treturn null;\n}\n\nprotected function lastNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\t\treturn $names[sizeof($names) - 1];\n\t}\n\n\treturn null;\n}\n\nprotected function descriptionNormalizer($data)\n{\n\treturn isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)\n{\n\t$websites = array();\n\tif (isset($data['data']['website'])) {\n\t\t$websites[] = $data['data']['website'];\n\t}\n\n\treturn $websites;\n}\n\nprotected function profileUrlNormalizer()\n{\n\t$username = $this->getField(self::FIELD_USERNAME);\n\n\tif (null !== $username) {\n\t\treturn sprintf('http://instagram.com/%s', $username);\n\t}\n\n\treturn null;\n}\n\nprotected function imageUrlNormalizer($data)\n{\n\treturn isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)\n{\n\treturn ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n\t));\n}\n```\n\nNotice that each normalizer must return `null` if the field is not defined. That's a best pratice to follow for safety.\n\nAlso notice that the `extraNormalizer` method has the purpose to keep track of all the fields that could not be mapped to the `ExtractorInterface` fields. So we use the `OAuth\\UserData\\Utils\\ArrayUtils::removeKeys` method to simply remove already mapped data.\n\nFinally we need to wire our `profileLoader` method and all our normalizers methods in the constructor:\n\n```php\npublic function __construct()\n{\n\tparent::__construct(\n\t\tself::getDefaultLoadersMap(),\n\t\tself::getDefaultNormalizersMap(),\n\t\tself::getSupportedFields()\n\t);\n}\n```\n\nThe methods `self::getDefaultLoadersMap` and `self::getDefaultNormalizersMap` are convenience methods defined in the `LazyExtractor` class that defines respectively a loaders map and a normalizers map that are good in most of the cases.\n\nThat's all. To see the complete class have a look [here](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php).\n\n**Important note**: if you are willing to submit a pull request to integrate a new extractor be sure to follow [PSR-2 code style](http://www.php-fig.org/psr/psr-2/) and to add a dedicated test case. Have a look at the [InstagramTest](https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php) class to understand how to do it.\n","source":"_posts/writing-a-new-extractor-for-php-oauth-user-data.md","raw":"uuid:             e935373e-574b-493e-8f84-de5194c67401\nlayout:           post\ntitle:            'Writing a new Extractor for PHPoAuthUserData'\nslug:             writing-a-new-extractor-for-php-oauth-user-data\nsubtitle:         null\ndate:             '2014-02-10T17:23:54.000Z'\nupdated:          '2014-02-10T17:30:42.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       null\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Library\n  - Php\n  - Oauth\n  - Instagram\n  - Github\n\n---\n\nIn my [previous post](http://loige.com/new-php-library-php-oauth-user-data/) I introduced my latest library [PHPoAuthUserData](https://github.com/Oryzone/PHPoAuthUserData) that allows to abstract the process of\nextracting user profile data from various OAuth providers (*Facebook*, *Twitter*, *Linkedin*, etc).\n\nThe library still need a lot of work, especially to write the logic to extract data from all the services available in the [parent OAuth library](https://github.com/Lusitanian/PHPoAuthLib).\n\nAt the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:\n\nAmazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.\n\nSo that's a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.\n\nThis article illustrates how to add support for a new service by writing a dedicate **extractor** class. It's really simple so stick with me and you will be able to submit your pull request in minutes!\n\nExtractors defines the logic to request information to a given service API and to normalize the received data according to a common [interface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php).\nThe most basic way to define an extractor is to write a class that implements the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php) (that is pretty self-explanatory). \n\nYou could extend the class [Extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php) that implements most of the needed code to get you started. Anyway, extractors should **really** extend the class [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) where possible\nbecause this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that **lazy loads** data (perform requests only when needed to) and **caches** data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you'll need to focus only on methods that define how to make\nrequests and how to normalize data.\n\nTo understand how to write a new extractor by adopting the [LazyExtractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php) we need to clarify some concepts:\n\n  - **Supported fields**: an array of the fields that can be extracted (you should use field constants from the [ExtractorInterface](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php)).\n  - **Loaders**: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix `Loader` in their name.\nMost of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: `profileLoader`).\n  - **Normalizers**: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.\nUsually you have a normalizer for each supported field. Normalizers methods must have the suffix `Normalizer` (eg. `uniqueIdNormalizer` or `descriptionNormalizer`).\n  - **LoadersMap**: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the `Loader` suffix.\nMost of the time, if you have only the `profileLoader` loader you will have an array with all fields mapping to the string `profile`.\n  - **NormalizersMap**: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the `Normalizer` suffix. It's highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. `array(self::FIELD_UNIQUE_ID => self::FIELD_UNIQUE_ID)`) for\nevery supported field.\n\nOnce you defined *Supported Fields*, *Loaders*, *Normalizers*, *Loaders Map* and *Normalizers Map* from within your new extractor class you must\nwire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as `getSupportedField`, `getLoadersMap` and `getNormalizersMap`\nyou will end up with a constructor like this:\n\n```php\npublic function __construct()\n{\n    parent::__construct(\n        self::getLoadersMap(),\n        self::getNormalizersMap(),\n        self::getSupportedFields()\n    );\n}\n```\n\nBut let's see how I built the [Instagram extractor](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php) to have a better understanding on the whole process.\n\n## Writing the Instagram extractor\n\nFirst of all I had a look on [a bit of documentation](http://instagram.com/developer/api-console/) to find out what kind of data can be extracted from Instagram users.\n\nSo I discovered that the request to retrieve information about the user is: `/users/self` and its response is a json object that looks like the following:\n\n```json\n{\n  \"meta\":  {\n    \"code\": 200\n  },\n  \"data\":  {\n    \"username\": \"johnnydonny\",\n    \"bio\": \"A life on the edge\",\n    \"website\": \"http://blog.johnnydonny.com\",\n    \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\",\n    \"full_name\": \"John Doe\",\n    \"counts\":  {\n      \"media\": 131,\n      \"followed_by\": 80,\n      \"follows\": 64\n    },\n    \"id\": \"1111222333\"\n  }\n}\n```\n\nSo I understood wich fields can be mapped and started writing the `Instagram` class under the `OAuth\\UserData\\Extractor` namespace.\n\n```php\n<?php\n\nnamespace OAuth\\UserData\\Extractor;\n\nclass Instagram extends LazyExtractor\n{\n\t//...\n}\n```\n\nFirst of all I wrote the method `profileLoader` and added a class constant that defines the url of the request.\n\n```php\nconst REQUEST_PROFILE = '/users/self';\n\nprotected function profileLoader()\n{\n\treturn json_decode($this->service->request(self::REQUEST_PROFILE), true);\n}\n```\n\nEach extractor has access to the property `$this->service` that is an instance of the specific OAuth service from the parent library (`OAuth\\OAuth2\\Service\\Instagram`) in this case. With this instance you can easily make request to the provider API endpoint.\n\nThen I added the `getSupportedFields` method:\n\n```php\nprotected static function getSupportedFields()\n{\n\treturn array(\n\t\tself::FIELD_UNIQUE_ID,\n\t\tself::FIELD_USERNAME,\n\t\tself::FIELD_FULL_NAME,\n\t\tself::FIELD_FIRST_NAME,\n\t\tself::FIELD_LAST_NAME,\n\t\tself::FIELD_DESCRIPTION,\n\t\tself::FIELD_WEBSITES,\n\t\tself::FIELD_IMAGE_URL,\n\t\tself::FIELD_PROFILE_URL,\n\t\tself::FIELD_EXTRA\n\t);\n}\n```\n\nThe fields *first_name*, *last_name* and *profile_url* are not directly available on the json response but are easy to reconstruct by using the *full_name* and *username* fields.\n\nThan I started writing all the normalizer methods to map the raw data to the respective supported fields:\n\n```php\nprotected function uniqueIdNormalizer($data)\n{\n\treturn isset($data['data']['id']) ? $data['data']['id'] : null;\n}\n\nprotected function usernameNormalizer($data)\n{\n\treturn isset($data['data']['username']) ? $data['data']['username'] : null;\n}\n\nprotected function fullNameNormalizer($data)\n{\n\treturn isset($data['data']['full_name']) ? $data['data']['full_name'] : null;\n}\n\nprotected function firstNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\treturn $names[0];\n\t}\n\n\treturn null;\n}\n\nprotected function lastNameNormalizer()\n{\n\t$fullName = $this->getField(self::FIELD_FULL_NAME);\n\tif ($fullName) {\n\t\t$names = explode(' ', $fullName);\n\n\t\t\treturn $names[sizeof($names) - 1];\n\t}\n\n\treturn null;\n}\n\nprotected function descriptionNormalizer($data)\n{\n\treturn isset($data['data']['bio']) ? $data['data']['bio'] : null;\n}\n\nprotected function websitesNormalizer($data)\n{\n\t$websites = array();\n\tif (isset($data['data']['website'])) {\n\t\t$websites[] = $data['data']['website'];\n\t}\n\n\treturn $websites;\n}\n\nprotected function profileUrlNormalizer()\n{\n\t$username = $this->getField(self::FIELD_USERNAME);\n\n\tif (null !== $username) {\n\t\treturn sprintf('http://instagram.com/%s', $username);\n\t}\n\n\treturn null;\n}\n\nprotected function imageUrlNormalizer($data)\n{\n\treturn isset($data['data']['profile_picture']) ? $data['data']['profile_picture'] : null;\n}\n\nprotected function extraNormalizer($data)\n{\n\treturn ArrayUtils::removeKeys($data['data'], array(\n            'id',\n            'username',\n            'full_name',\n            'website',\n            'profile_picture',\n            'bio',\n\t));\n}\n```\n\nNotice that each normalizer must return `null` if the field is not defined. That's a best pratice to follow for safety.\n\nAlso notice that the `extraNormalizer` method has the purpose to keep track of all the fields that could not be mapped to the `ExtractorInterface` fields. So we use the `OAuth\\UserData\\Utils\\ArrayUtils::removeKeys` method to simply remove already mapped data.\n\nFinally we need to wire our `profileLoader` method and all our normalizers methods in the constructor:\n\n```php\npublic function __construct()\n{\n\tparent::__construct(\n\t\tself::getDefaultLoadersMap(),\n\t\tself::getDefaultNormalizersMap(),\n\t\tself::getSupportedFields()\n\t);\n}\n```\n\nThe methods `self::getDefaultLoadersMap` and `self::getDefaultNormalizersMap` are convenience methods defined in the `LazyExtractor` class that defines respectively a loaders map and a normalizers map that are good in most of the cases.\n\nThat's all. To see the complete class have a look [here](https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php).\n\n**Important note**: if you are willing to submit a pull request to integrate a new extractor be sure to follow [PSR-2 code style](http://www.php-fig.org/psr/psr-2/) and to add a dedicated test case. Have a look at the [InstagramTest](https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php) class to understand how to do it.\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixaggrzg001msvvugv991vll","content":"<p>In my <a href=\"http://loige.com/new-php-library-php-oauth-user-data/\" target=\"_blank\" rel=\"external\">previous post</a> I introduced my latest library <a href=\"https://github.com/Oryzone/PHPoAuthUserData\" target=\"_blank\" rel=\"external\">PHPoAuthUserData</a> that allows to abstract the process of<br>extracting user profile data from various OAuth providers (<em>Facebook</em>, <em>Twitter</em>, <em>Linkedin</em>, etc).</p>\n<p>The library still need a lot of work, especially to write the logic to extract data from all the services available in the <a href=\"https://github.com/Lusitanian/PHPoAuthLib\" target=\"_blank\" rel=\"external\">parent OAuth library</a>.</p>\n<p>At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:</p>\n<p>Amazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.</p>\n<p>So that’s a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.</p>\n<p>This article illustrates how to add support for a new service by writing a dedicate <strong>extractor</strong> class. It’s really simple so stick with me and you will be able to submit your pull request in minutes!</p>\n<p>Extractors defines the logic to request information to a given service API and to normalize the received data according to a common <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\" target=\"_blank\" rel=\"external\">interface</a>.<br>The most basic way to define an extractor is to write a class that implements the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\" target=\"_blank\" rel=\"external\">ExtractorInterface</a> (that is pretty self-explanatory). </p>\n<p>You could extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php\" target=\"_blank\" rel=\"external\">Extractor</a> that implements most of the needed code to get you started. Anyway, extractors should <strong>really</strong> extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\" target=\"_blank\" rel=\"external\">LazyExtractor</a> where possible<br>because this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that <strong>lazy loads</strong> data (perform requests only when needed to) and <strong>caches</strong> data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you’ll need to focus only on methods that define how to make<br>requests and how to normalize data.</p>\n<p>To understand how to write a new extractor by adopting the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\" target=\"_blank\" rel=\"external\">LazyExtractor</a> we need to clarify some concepts:</p>\n<ul>\n<li><strong>Supported fields</strong>: an array of the fields that can be extracted (you should use field constants from the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\" target=\"_blank\" rel=\"external\">ExtractorInterface</a>).</li>\n<li><strong>Loaders</strong>: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix <code>Loader</code> in their name.<br>Most of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: <code>profileLoader</code>).</li>\n<li><strong>Normalizers</strong>: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.<br>Usually you have a normalizer for each supported field. Normalizers methods must have the suffix <code>Normalizer</code> (eg. <code>uniqueIdNormalizer</code> or <code>descriptionNormalizer</code>).</li>\n<li><strong>LoadersMap</strong>: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the <code>Loader</code> suffix.<br>Most of the time, if you have only the <code>profileLoader</code> loader you will have an array with all fields mapping to the string <code>profile</code>.</li>\n<li><strong>NormalizersMap</strong>: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the <code>Normalizer</code> suffix. It’s highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. <code>array(self::FIELD_UNIQUE_ID =&gt; self::FIELD_UNIQUE_ID)</code>) for<br>every supported field.</li>\n</ul>\n<p>Once you defined <em>Supported Fields</em>, <em>Loaders</em>, <em>Normalizers</em>, <em>Loaders Map</em> and <em>Normalizers Map</em> from within your new extractor class you must<br>wire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as <code>getSupportedField</code>, <code>getLoadersMap</code> and <code>getNormalizersMap</code><br>you will end up with a constructor like this:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">parent</span>::__construct(</div><div class=\"line\">        <span class=\"keyword\">self</span>::getLoadersMap(),</div><div class=\"line\">        <span class=\"keyword\">self</span>::getNormalizersMap(),</div><div class=\"line\">        <span class=\"keyword\">self</span>::getSupportedFields()</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But let’s see how I built the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\" target=\"_blank\" rel=\"external\">Instagram extractor</a> to have a better understanding on the whole process.</p>\n<h2 id=\"Writing-the-Instagram-extractor\"><a href=\"#Writing-the-Instagram-extractor\" class=\"headerlink\" title=\"Writing the Instagram extractor\"></a>Writing the Instagram extractor</h2><p>First of all I had a look on <a href=\"http://instagram.com/developer/api-console/\" target=\"_blank\" rel=\"external\">a bit of documentation</a> to find out what kind of data can be extracted from Instagram users.</p>\n<p>So I discovered that the request to retrieve information about the user is: <code>/users/self</code> and its response is a json object that looks like the following:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"meta\"</span>:  &#123;</div><div class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>:  &#123;</div><div class=\"line\">    <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"johnnydonny\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"bio\"</span>: <span class=\"string\">\"A life on the edge\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"website\"</span>: <span class=\"string\">\"http://blog.johnnydonny.com\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profile_picture\"</span>: <span class=\"string\">\"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"full_name\"</span>: <span class=\"string\">\"John Doe\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"counts\"</span>:  &#123;</div><div class=\"line\">      <span class=\"attr\">\"media\"</span>: <span class=\"number\">131</span>,</div><div class=\"line\">      <span class=\"attr\">\"followed_by\"</span>: <span class=\"number\">80</span>,</div><div class=\"line\">      <span class=\"attr\">\"follows\"</span>: <span class=\"number\">64</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1111222333\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So I understood wich fields can be mapped and started writing the <code>Instagram</code> class under the <code>OAuth\\UserData\\Extractor</code> namespace.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">OAuth</span>\\<span class=\"title\">UserData</span>\\<span class=\"title\">Extractor</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Instagram</span> <span class=\"keyword\">extends</span> <span class=\"title\">LazyExtractor</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>First of all I wrote the method <code>profileLoader</code> and added a class constant that defines the url of the request.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> REQUEST_PROFILE = <span class=\"string\">'/users/self'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profileLoader</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> json_decode(<span class=\"keyword\">$this</span>-&gt;service-&gt;request(<span class=\"keyword\">self</span>::REQUEST_PROFILE), <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Each extractor has access to the property <code>$this-&gt;service</code> that is an instance of the specific OAuth service from the parent library (<code>OAuth\\OAuth2\\Service\\Instagram</code>) in this case. With this instance you can easily make request to the provider API endpoint.</p>\n<p>Then I added the <code>getSupportedFields</code> method:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSupportedFields</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_UNIQUE_ID,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_USERNAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_FULL_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_FIRST_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_LAST_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_DESCRIPTION,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_WEBSITES,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_IMAGE_URL,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_PROFILE_URL,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_EXTRA</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The fields <em>first_name</em>, <em>last_name</em> and <em>profile_url</em> are not directly available on the json response but are easy to reconstruct by using the <em>full_name</em> and <em>username</em> fields.</p>\n<p>Than I started writing all the normalizer methods to map the raw data to the respective supported fields:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uniqueIdNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'id'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'id'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usernameNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'username'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'username'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fullNameNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'full_name'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'full_name'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstNameNormalizer</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t$fullName = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_FULL_NAME);</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($fullName) &#123;</div><div class=\"line\">\t\t$names = explode(<span class=\"string\">' '</span>, $fullName);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> $names[<span class=\"number\">0</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lastNameNormalizer</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t$fullName = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_FULL_NAME);</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($fullName) &#123;</div><div class=\"line\">\t\t$names = explode(<span class=\"string\">' '</span>, $fullName);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $names[sizeof($names) - <span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">descriptionNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'bio'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'bio'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">websitesNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t$websites = <span class=\"keyword\">array</span>();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'website'</span>])) &#123;</div><div class=\"line\">\t\t$websites[] = $data[<span class=\"string\">'data'</span>][<span class=\"string\">'website'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> $websites;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profileUrlNormalizer</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t$username = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_USERNAME);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $username) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sprintf(<span class=\"string\">'http://instagram.com/%s'</span>, $username);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imageUrlNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'profile_picture'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'profile_picture'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extraNormalizer</span><span class=\"params\">($data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ArrayUtils::removeKeys($data[<span class=\"string\">'data'</span>], <span class=\"keyword\">array</span>(</div><div class=\"line\">            <span class=\"string\">'id'</span>,</div><div class=\"line\">            <span class=\"string\">'username'</span>,</div><div class=\"line\">            <span class=\"string\">'full_name'</span>,</div><div class=\"line\">            <span class=\"string\">'website'</span>,</div><div class=\"line\">            <span class=\"string\">'profile_picture'</span>,</div><div class=\"line\">            <span class=\"string\">'bio'</span>,</div><div class=\"line\">\t));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that each normalizer must return <code>null</code> if the field is not defined. That’s a best pratice to follow for safety.</p>\n<p>Also notice that the <code>extraNormalizer</code> method has the purpose to keep track of all the fields that could not be mapped to the <code>ExtractorInterface</code> fields. So we use the <code>OAuth\\UserData\\Utils\\ArrayUtils::removeKeys</code> method to simply remove already mapped data.</p>\n<p>Finally we need to wire our <code>profileLoader</code> method and all our normalizers methods in the constructor:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">parent</span>::__construct(</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getDefaultLoadersMap(),</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getDefaultNormalizersMap(),</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getSupportedFields()</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The methods <code>self::getDefaultLoadersMap</code> and <code>self::getDefaultNormalizersMap</code> are convenience methods defined in the <code>LazyExtractor</code> class that defines respectively a loaders map and a normalizers map that are good in most of the cases.</p>\n<p>That’s all. To see the complete class have a look <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p><strong>Important note</strong>: if you are willing to submit a pull request to integrate a new extractor be sure to follow <a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"external\">PSR-2 code style</a> and to add a dedicated test case. Have a look at the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php\" target=\"_blank\" rel=\"external\">InstagramTest</a> class to understand how to do it.</p>\n","excerpt":"","more":"<p>In my <a href=\"http://loige.com/new-php-library-php-oauth-user-data/\">previous post</a> I introduced my latest library <a href=\"https://github.com/Oryzone/PHPoAuthUserData\">PHPoAuthUserData</a> that allows to abstract the process of<br>extracting user profile data from various OAuth providers (<em>Facebook</em>, <em>Twitter</em>, <em>Linkedin</em>, etc).</p>\n<p>The library still need a lot of work, especially to write the logic to extract data from all the services available in the <a href=\"https://github.com/Lusitanian/PHPoAuthLib\">parent OAuth library</a>.</p>\n<p>At the moment the library supports only the most common OAuth providers. I would be glad to support all the following services:</p>\n<p>Amazon, BitBucket, BitLy, Box, Dailymotion, Dropbox, Etsy, FitBit, Flickr, Foursquare, GitHub, Google, Heroku, Mailchimp, Microsoft, PayPal, Reddit, RunKeeper, SoundCloud, Tumblr, Vkontakte, Yammer.</p>\n<p>So that’s a lot of work! And yes, of course I would be glad to share it with someone interested in using the library.</p>\n<p>This article illustrates how to add support for a new service by writing a dedicate <strong>extractor</strong> class. It’s really simple so stick with me and you will be able to submit your pull request in minutes!</p>\n<p>Extractors defines the logic to request information to a given service API and to normalize the received data according to a common <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">interface</a>.<br>The most basic way to define an extractor is to write a class that implements the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a> (that is pretty self-explanatory). </p>\n<p>You could extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Extractor.php\">Extractor</a> that implements most of the needed code to get you started. Anyway, extractors should <strong>really</strong> extend the class <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> where possible<br>because this class acts as a boilerplate to define highly optimized extractors. It easily allows you to implement extractors that <strong>lazy loads</strong> data (perform requests only when needed to) and <strong>caches</strong> data (does not make the same request more than once and avoids normalizing the same data more than once). Everything is done behind the scenes, so you’ll need to focus only on methods that define how to make<br>requests and how to normalize data.</p>\n<p>To understand how to write a new extractor by adopting the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/LazyExtractor.php\">LazyExtractor</a> we need to clarify some concepts:</p>\n<ul>\n<li><strong>Supported fields</strong>: an array of the fields that can be extracted (you should use field constants from the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/ExtractorInterface.php\">ExtractorInterface</a>).</li>\n<li><strong>Loaders</strong>: methods whose responsibility is to trigger the proper request to the OAuth provider endpoint to load a specific set of raw data. Generally you need to define a loader for each block of information that could be retrieved from the endpoint. this methods must have the suffix <code>Loader</code> in their name.<br>Most of the service will allow you to retrieve all the user data with a single request, so, in this cases, you would have only a single loader method (eg: <code>profileLoader</code>).</li>\n<li><strong>Normalizers</strong>: methods that accept raw data (the one previously fetched by some loader method) and uses it to extract the value for a given field.<br>Usually you have a normalizer for each supported field. Normalizers methods must have the suffix <code>Normalizer</code> (eg. <code>uniqueIdNormalizer</code> or <code>descriptionNormalizer</code>).</li>\n<li><strong>LoadersMap</strong>: an array that associates supported fields (keys) to loaders methods (values). Loaders methods must be referenced without the <code>Loader</code> suffix.<br>Most of the time, if you have only the <code>profileLoader</code> loader you will have an array with all fields mapping to the string <code>profile</code>.</li>\n<li><strong>NormalizersMap</strong>: an array that associates supported fields (keys) to the related normalizer methods (values). Normalizers methods must be referenced without the <code>Normalizer</code> suffix. It’s highly suggested to use the same name of the field for its related normalizer, so, most of the time, you will end up by having an array that maps field constants to the same field constant (eg. <code>array(self::FIELD_UNIQUE_ID =&gt; self::FIELD_UNIQUE_ID)</code>) for<br>every supported field.</li>\n</ul>\n<p>Once you defined <em>Supported Fields</em>, <em>Loaders</em>, <em>Normalizers</em>, <em>Loaders Map</em> and <em>Normalizers Map</em> from within your new extractor class you must<br>wire them to the underlying logic by passing them to the parent constructor. So if you defined methods such as <code>getSupportedField</code>, <code>getLoadersMap</code> and <code>getNormalizersMap</code><br>you will end up with a constructor like this:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">parent</span>::__construct(</div><div class=\"line\">        <span class=\"keyword\">self</span>::getLoadersMap(),</div><div class=\"line\">        <span class=\"keyword\">self</span>::getNormalizersMap(),</div><div class=\"line\">        <span class=\"keyword\">self</span>::getSupportedFields()</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But let’s see how I built the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">Instagram extractor</a> to have a better understanding on the whole process.</p>\n<h2 id=\"Writing-the-Instagram-extractor\"><a href=\"#Writing-the-Instagram-extractor\" class=\"headerlink\" title=\"Writing the Instagram extractor\"></a>Writing the Instagram extractor</h2><p>First of all I had a look on <a href=\"http://instagram.com/developer/api-console/\">a bit of documentation</a> to find out what kind of data can be extracted from Instagram users.</p>\n<p>So I discovered that the request to retrieve information about the user is: <code>/users/self</code> and its response is a json object that looks like the following:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"meta\"</span>:  &#123;</div><div class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>:  &#123;</div><div class=\"line\">    <span class=\"attr\">\"username\"</span>: <span class=\"string\">\"johnnydonny\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"bio\"</span>: <span class=\"string\">\"A life on the edge\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"website\"</span>: <span class=\"string\">\"http://blog.johnnydonny.com\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profile_picture\"</span>: <span class=\"string\">\"http://images.ak.instagram.com/profiles/profile_weird_numbers.jpg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"full_name\"</span>: <span class=\"string\">\"John Doe\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"counts\"</span>:  &#123;</div><div class=\"line\">      <span class=\"attr\">\"media\"</span>: <span class=\"number\">131</span>,</div><div class=\"line\">      <span class=\"attr\">\"followed_by\"</span>: <span class=\"number\">80</span>,</div><div class=\"line\">      <span class=\"attr\">\"follows\"</span>: <span class=\"number\">64</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1111222333\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So I understood wich fields can be mapped and started writing the <code>Instagram</code> class under the <code>OAuth\\UserData\\Extractor</code> namespace.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">OAuth</span>\\<span class=\"title\">UserData</span>\\<span class=\"title\">Extractor</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Instagram</span> <span class=\"keyword\">extends</span> <span class=\"title\">LazyExtractor</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>First of all I wrote the method <code>profileLoader</code> and added a class constant that defines the url of the request.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> REQUEST_PROFILE = <span class=\"string\">'/users/self'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profileLoader</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> json_decode(<span class=\"keyword\">$this</span>-&gt;service-&gt;request(<span class=\"keyword\">self</span>::REQUEST_PROFILE), <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Each extractor has access to the property <code>$this-&gt;service</code> that is an instance of the specific OAuth service from the parent library (<code>OAuth\\OAuth2\\Service\\Instagram</code>) in this case. With this instance you can easily make request to the provider API endpoint.</p>\n<p>Then I added the <code>getSupportedFields</code> method:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSupportedFields</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_UNIQUE_ID,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_USERNAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_FULL_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_FIRST_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_LAST_NAME,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_DESCRIPTION,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_WEBSITES,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_IMAGE_URL,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_PROFILE_URL,</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::FIELD_EXTRA</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The fields <em>first_name</em>, <em>last_name</em> and <em>profile_url</em> are not directly available on the json response but are easy to reconstruct by using the <em>full_name</em> and <em>username</em> fields.</p>\n<p>Than I started writing all the normalizer methods to map the raw data to the respective supported fields:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uniqueIdNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'id'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'id'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usernameNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'username'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'username'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fullNameNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'full_name'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'full_name'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstNameNormalizer</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t$fullName = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_FULL_NAME);</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($fullName) &#123;</div><div class=\"line\">\t\t$names = explode(<span class=\"string\">' '</span>, $fullName);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> $names[<span class=\"number\">0</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lastNameNormalizer</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t$fullName = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_FULL_NAME);</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($fullName) &#123;</div><div class=\"line\">\t\t$names = explode(<span class=\"string\">' '</span>, $fullName);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $names[sizeof($names) - <span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">descriptionNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'bio'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'bio'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">websitesNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t$websites = <span class=\"keyword\">array</span>();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'website'</span>])) &#123;</div><div class=\"line\">\t\t$websites[] = $data[<span class=\"string\">'data'</span>][<span class=\"string\">'website'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> $websites;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profileUrlNormalizer</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t$username = <span class=\"keyword\">$this</span>-&gt;getField(<span class=\"keyword\">self</span>::FIELD_USERNAME);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> !== $username) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sprintf(<span class=\"string\">'http://instagram.com/%s'</span>, $username);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imageUrlNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>($data[<span class=\"string\">'data'</span>][<span class=\"string\">'profile_picture'</span>]) ? $data[<span class=\"string\">'data'</span>][<span class=\"string\">'profile_picture'</span>] : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extraNormalizer</span><span class=\"params\">($data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ArrayUtils::removeKeys($data[<span class=\"string\">'data'</span>], <span class=\"keyword\">array</span>(</div><div class=\"line\">            <span class=\"string\">'id'</span>,</div><div class=\"line\">            <span class=\"string\">'username'</span>,</div><div class=\"line\">            <span class=\"string\">'full_name'</span>,</div><div class=\"line\">            <span class=\"string\">'website'</span>,</div><div class=\"line\">            <span class=\"string\">'profile_picture'</span>,</div><div class=\"line\">            <span class=\"string\">'bio'</span>,</div><div class=\"line\">\t));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice that each normalizer must return <code>null</code> if the field is not defined. That’s a best pratice to follow for safety.</p>\n<p>Also notice that the <code>extraNormalizer</code> method has the purpose to keep track of all the fields that could not be mapped to the <code>ExtractorInterface</code> fields. So we use the <code>OAuth\\UserData\\Utils\\ArrayUtils::removeKeys</code> method to simply remove already mapped data.</p>\n<p>Finally we need to wire our <code>profileLoader</code> method and all our normalizers methods in the constructor:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">parent</span>::__construct(</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getDefaultLoadersMap(),</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getDefaultNormalizersMap(),</div><div class=\"line\">\t\t<span class=\"keyword\">self</span>::getSupportedFields()</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The methods <code>self::getDefaultLoadersMap</code> and <code>self::getDefaultNormalizersMap</code> are convenience methods defined in the <code>LazyExtractor</code> class that defines respectively a loaders map and a normalizers map that are good in most of the cases.</p>\n<p>That’s all. To see the complete class have a look <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/src/OAuth/UserData/Extractor/Instagram.php\">here</a>.</p>\n<p><strong>Important note</strong>: if you are willing to submit a pull request to integrate a new extractor be sure to follow <a href=\"http://www.php-fig.org/psr/psr-2/\">PSR-2 code style</a> and to add a dedicated test case. Have a look at the <a href=\"https://github.com/Oryzone/PHPoAuthUserData/blob/master/tests/OAuth/Unit/UserData/Extractor/InstagramTest.php\">InstagramTest</a> class to understand how to do it.</p>\n"},{"uuid":"d95c5807-6e27-4bd3-b248-3935754fce3a","layout":"post","title":"2016 - A year in review","slug":"2016-a-year-in-review","subtitle":null,"date":"2016-12-24T18:13:18.000Z","updated":"2016-12-27T07:41:37.000Z","author":"Luciano Mammino","author_slug":"luciano-mammino","header_img":"/content/images/2016/12/loige-luciano-mammino-2016-a-year-in-review-blog-post.jpg","status":"published","language":"en_US","meta_title":null,"meta_description":null,"_content":"\n2016 is almost over and I just realised that it has been one of my most productive and exciting years ever. With that in mind I would love to write a recap of all the good and bad things (mostly from a career perspective) that happened in my life  during this year. I want to keep track and benchmark my productivity over the coming years. This might be boring for you to read but I hope it's going to serve myself as a good motivation to keep doing better over the years, both in terms of career and quality of life.\n\n\n## Co-authoring a book about Node.js and Design patterns\n\nOne of the biggest achievements this year (and possibly during the course of my entire life) was to co-author a technical book!\nFrom November last year to July this year I helped the great [Mario Casciaro](https://twitter.com/mariocasciaro) and *Packt Publishing* joining them as co-author to revise \"**Node.js Design Patterns**\" and come up with a shiny [second edition](https://www.nodejsdesignpatterns.com).\nBeing part of this initiative served me a double value. First of all, it was an amazing learning experience, I had to get my hands dirty with so many [Node.js](/tag/node-js) details and patterns and nail most of them in a relatively short timespan. Now I feel like I'm fully aware of what's going on under the hood of Node.js and I am confident I can write pretty decent Node.js code using the right patterns for specific needs. In the second place, being a book author gave me much more visibility as a Node.js enthusiast and now I have more chances to interact with other people interested in this trending topic.\n\nIf you are curious about Node.js and Design Patterns you can check out the official website of the book at: [https://www.nodejsdesignpatterns.com](https://www.nodejsdesignpatterns.com).\n\n[![Book Cover Node.Js design patterns second edition Mario Casciaro Luciano Mammino Packt Publishing](/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg)](https://www.nodejsdesignpatterns.com)\n\n\n## Career\n\nIn terms of career, this October I also moved from my position of Senior PHP Developer at *Smartbox* to a new role as Senior Software Developer at [Planet9 Energy](http://planet9energy.com). I am still pretty new in the company, but so far this change has been very exciting for a bunch of reasons:\n\n - I get to work with a team of insanely skilled professionals like [@hughsheehy](https://twitter.com/hughsheehy), [@tech\\_fort](https://twitter.com/tech_fort), [@Podgeypoos79](https://twitter.com/Podgeypoos79), [@quasi\\_modal](https://twitter.com/quasi_modal), Aleksandar Čambas (who doesn't like Twitter!) and [@katavic_d](https://twitter.com/katavic_d). It's a pleasure to learn from them and with them everyday!\n - Most of my work is in Node.js so I can stick to a language (JavaScript) I am loving and keep improving my knowledge and experience with it.\n - I can be part of many architectural discussions and decisions about how we evolve a very sophisticated product that is managing an insane amount of data.\n\nI really look forward to keep doing my best next year and see some of the things we are building going live!\n\n\n## Conferences and meet-ups talks\n\nThis year I did my first official conference talk at Codemotion Milan in November. If you are interested in Universal JavaScript and React you can find all the details (slides, video and notes) here: [My Universal JavaScript Web Applications talk at Codemotion Milan 2016](http://loige.co/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2/).\n\nIn march I also made a talk at the PHP Dublin meet-up group about web application performance. Check it out here: [6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)](http://loige.co/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk/).\n\nI really enjoyed both experiences and I hope I will have more chances next year to deliver tech talks in meet-ups and conferences around Europe.\n\n\n## Blog posts\n\nI have to admit this year I wasn't a very prolific author, I guess the book drained all my energies during my free time. Anyway, I still managed to write some posts. Here are the most interesting ones (based on actual reading stats):\n\n - [Extracting data from Wikipedia using curl, grep, cut and other shell commands](http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/) (~18.000 views)\n - [Gulp and FTP: update a website \"on the fly\"](http://loige.co/gulp-and-ftp-update-a-website-on-the-fly/) (~7.000 views)\n - [To promise or to callback? That is the question...](http://loige.co/to-promise-or-to-callback-that-is-the-question/) (~3.000 views)\n - [Introducing Gulp cozy - Manage your gulp tasks in a cozier way](http://loige.co/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way/) (~2.000 views)\n\nAlso it's worth noticing that an article from 2015 is still driving a significant portion of traffic: [Developing a web application with Lumen and MySql](http://loige.co/developing-a-web-application-with-lumen-and-mysql/) (~20.000 views).\n\nEven considering such small amount of posts, the blog reached an impressive total of about 90.000 page views.\n\n\n## External posts and Interviews\n\nI also had the time (and the pleasure) to keep going with some interesting collaboration with websites I love like [Scotch.io](https://scotch.io/) and [RisingStack](https://community.risingstack.com/). These are the posts that I enjoyed writing for external websites:\n\n - [React on the Server for Beginners: Build a Universal React and Node App](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app) (~56.000 views)\n - **ZeroMQ & Node.js Tutorial - Cracking JWT Tokens** [Part 1](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/) & [Part 2](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/) (~7.000 views in total)\n\nI also had the pleasure to have two interviews about being a software developer and a book author:\n\n- Usersnap: [Meet the community: Luciano Mammino, software developer from Sicily](http://usersnap.com/blog/developer-community-luciano-mammino/) (~1.000 views)\n- Packt blog: [With Node.js, it’s easy to get things done](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done) (undisclosed stats)\n\nFinally, I'd love to mention that one of my best posts from 2015 has been translated to Italian and published on [HTML5Today.it](http://html5today.it), \"[Performance: 6 regole per sviluppare applicazioni web](http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/)\".\n\n\n## Open Sourcing\n\nThis year I also spent some time working out some small open source contributions, mostly creating little Node.js libraries or command line utilities for different purposes. Here's the complete list of the open source repository I have been working on sorted by the number of stars received:\n\n- [Atinux/schema-inspector](https://github.com/Atinux/schema-inspector) (contribution): Schema-Inspector is an JSON API sanitisation and validation module.\n- [silas/node-consul](https://github.com/silas/node-consul) (contribution): Node.js Consul client\n- [lmammino/judo-heroes](https://github.com/lmammino/judo-heroes): A React application to showcase rendering with Universal JavaScript\n- [lmammino/flickr-set-get](https://github.com/lmammino/flickr-set-get): A simple command line app to download photos from a flickr set\n- [lmammino/distributed-jwt-cracker](https://github.com/lmammino/distributed-jwt-cracker): An experimental distributed JWT token cracker built using Node.js and ZeroMQ\n- [lmammino/godaddy-dns](https://github.com/lmammino/godaddy-dns): A Node.js script to programmatically update GoDaddy DNS records\n- [lmammino/indexed-string-variation](https://github.com/lmammino/indexed-string-variation): Experimental JavaScript module to generate all possible variations of strings over an alphabet using an n-ary virtual tree\n- [lmammino/gulp-cozy](https://github.com/lmammino/gulp-cozy): Manage your gulp tasks in a cozier way\n- [lmammino/jwt-cracker](https://github.com/lmammino/jwt-cracker): Simple HS256 JWT token brute force cracker\n- [lmammino/ghost2hexo](https://github.com/lmammino/ghost2hexo): A command line tool to convert Ghost json export to a set of source posts for Hexo\n- [lmammino/x2j-cli](https://github.com/lmammino/x2j-cli): Node.js command line script to convert xml input into json output (can be piped easily)\n- [lmammino/vtt-creator](https://github.com/lmammino/vtt-creator): Very basic Node.js/JavaScript library to generate VTT open subtitles files\n- [lmammino/package-strip-deps](https://github.com/lmammino/package-strip-deps): A little command line utility that allows to strip dependencies from a NPM package.json file\n\n\n## Learning\n\nDuring the last 5 months I slowly started to have a look into the (quite new) [Elixir programming language](http://elixir-lang.org/).\n\nFor those who never heard before, let me quote the official website:\n\n> Elixir is a dynamic, functional language designed for building scalable and maintainable applications.\n\n> Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.\n\nWhy, you might wonder? In the last 2 or 3 year I wanted to spend some time with a pure functional language but Haskell, Clojure, Lisp and other more famous language never really convinced me different reasons. Elixir, for some weird reasons, immediately catch my attention. Plus, it seems to be competing quite well with other \"new-shiny\" languages:\n\n[![Comparison trend Elixir, Rust and Clojure](/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png)](https://www.google.com/trends/explore?date=2008-01-01%202016-12-24&q=%2Fm%2F0dsbpg6,%2Fm%2F0pl075p,%2Fm%2F03yb8hb)\n\nFinally I also have to admit that my friend [@bit_shark](https://twitter.com/bit_shark) had me brainwashed with \"how cool Elixir is\"! Thanks for that!\n\nAlso some other honourable mentions in my learning path this year have been:\n\n - [AWS](https://aws.amazon.com/) (mostly API Gateway, Lambda, Redshift, DynamoDB, S3, EC2, RDS, Route53 and Cloudfront)\n - [Serverless framework](http://serverless.com/)\n - [React](/tag/react/)\n - [ZeroMQ](/tag/zeromq/)\n - A bit of Python and [Scrapy](https://scrapy.org/)\n - A bit of Docker\n\n\n## Failures\n\nWell, so far so good, but... I have to admit it wasn't all peaches and dandelions. There were some failures here and there and it's good to take them into account.\n\nThe first and more important failure was not being able to focus on a side project. There is a *kind-of-secret-project™* I have been working on with my great friend [@andreaman87](https://twitter.com/andreaman87). I think I prioritised and planned really badly the time I wanted to spend on this project and I kept delaying my tasks. That's a bit of a shame and I need to apologise with Andrea for that!\n\nAlso another failure has been in my non-tech life, I haven't been able to train Brazilian Jiu Jitsu as much as I should have done and I feel like my game and my knowledge hasn't improved a lot! I guess I am going to keep my white belt still for a while :D\n\n\n## Expectations for next year\n\nOk, it's finally time to move to the good intentions for the next year! I have been very lengthy already so I'll just sort this part out with a simple unordered checklist, I am already looking forward to see, in one year time, how many items will be crossed:\n\n - Keep improving my knowledge of Node.js and everything related\n - Publish the first version of my side project with Andrea\n - Getting better with AWS and the Serverless framework\n - Move my blog to a static publishing engine and (possibly) use a serverless hosting approach\n - Keep investing time on Elixir and build something with it\n - Presentations and talks in conferences and meet-ups\n - Get more proficient with VIM (Cheers to [@quasi_modal](https://twitter.com/quasi_modal) for giving me [an amazing book](https://leanpub.com/painless_vim) as Christmas present!)\n - Keep open sourcing stuff\n - Travel more!\n - More serious and constant BJJ training! 👊\n\n\nWell, That's all... I hope I didn't bore you to death!\nAnyway, **I'd really love to know what was your biggest achievement in 2016**. If you feel like you want to share this information with me feel free to [write me on Twitter](https://twitter.com/loige) or to post a comment here! I'll make sure to have a pint in your honour! :D\n\n\"**Merry X-Mas and Happy New Year**\" to you all! 🎅🏻\n","source":"_posts/2016-a-year-in-review.md","raw":"uuid:             d95c5807-6e27-4bd3-b248-3935754fce3a\nlayout:           post\ntitle:            '2016 - A year in review'\nslug:             2016-a-year-in-review\nsubtitle:         null\ndate:             '2016-12-24T18:13:18.000Z'\nupdated:          '2016-12-27T07:41:37.000Z'\nauthor:           'Luciano Mammino'\nauthor_slug:      luciano-mammino\nheader_img:       /content/images/2016/12/loige-luciano-mammino-2016-a-year-in-review-blog-post.jpg\nstatus:           published\nlanguage:         en_US\nmeta_title:       null\nmeta_description: null\ntags:\n  - Life\n\n---\n\n2016 is almost over and I just realised that it has been one of my most productive and exciting years ever. With that in mind I would love to write a recap of all the good and bad things (mostly from a career perspective) that happened in my life  during this year. I want to keep track and benchmark my productivity over the coming years. This might be boring for you to read but I hope it's going to serve myself as a good motivation to keep doing better over the years, both in terms of career and quality of life.\n\n\n## Co-authoring a book about Node.js and Design patterns\n\nOne of the biggest achievements this year (and possibly during the course of my entire life) was to co-author a technical book!\nFrom November last year to July this year I helped the great [Mario Casciaro](https://twitter.com/mariocasciaro) and *Packt Publishing* joining them as co-author to revise \"**Node.js Design Patterns**\" and come up with a shiny [second edition](https://www.nodejsdesignpatterns.com).\nBeing part of this initiative served me a double value. First of all, it was an amazing learning experience, I had to get my hands dirty with so many [Node.js](/tag/node-js) details and patterns and nail most of them in a relatively short timespan. Now I feel like I'm fully aware of what's going on under the hood of Node.js and I am confident I can write pretty decent Node.js code using the right patterns for specific needs. In the second place, being a book author gave me much more visibility as a Node.js enthusiast and now I have more chances to interact with other people interested in this trending topic.\n\nIf you are curious about Node.js and Design Patterns you can check out the official website of the book at: [https://www.nodejsdesignpatterns.com](https://www.nodejsdesignpatterns.com).\n\n[![Book Cover Node.Js design patterns second edition Mario Casciaro Luciano Mammino Packt Publishing](/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg)](https://www.nodejsdesignpatterns.com)\n\n\n## Career\n\nIn terms of career, this October I also moved from my position of Senior PHP Developer at *Smartbox* to a new role as Senior Software Developer at [Planet9 Energy](http://planet9energy.com). I am still pretty new in the company, but so far this change has been very exciting for a bunch of reasons:\n\n - I get to work with a team of insanely skilled professionals like [@hughsheehy](https://twitter.com/hughsheehy), [@tech\\_fort](https://twitter.com/tech_fort), [@Podgeypoos79](https://twitter.com/Podgeypoos79), [@quasi\\_modal](https://twitter.com/quasi_modal), Aleksandar Čambas (who doesn't like Twitter!) and [@katavic_d](https://twitter.com/katavic_d). It's a pleasure to learn from them and with them everyday!\n - Most of my work is in Node.js so I can stick to a language (JavaScript) I am loving and keep improving my knowledge and experience with it.\n - I can be part of many architectural discussions and decisions about how we evolve a very sophisticated product that is managing an insane amount of data.\n\nI really look forward to keep doing my best next year and see some of the things we are building going live!\n\n\n## Conferences and meet-ups talks\n\nThis year I did my first official conference talk at Codemotion Milan in November. If you are interested in Universal JavaScript and React you can find all the details (slides, video and notes) here: [My Universal JavaScript Web Applications talk at Codemotion Milan 2016](http://loige.co/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2/).\n\nIn march I also made a talk at the PHP Dublin meet-up group about web application performance. Check it out here: [6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)](http://loige.co/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk/).\n\nI really enjoyed both experiences and I hope I will have more chances next year to deliver tech talks in meet-ups and conferences around Europe.\n\n\n## Blog posts\n\nI have to admit this year I wasn't a very prolific author, I guess the book drained all my energies during my free time. Anyway, I still managed to write some posts. Here are the most interesting ones (based on actual reading stats):\n\n - [Extracting data from Wikipedia using curl, grep, cut and other shell commands](http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/) (~18.000 views)\n - [Gulp and FTP: update a website \"on the fly\"](http://loige.co/gulp-and-ftp-update-a-website-on-the-fly/) (~7.000 views)\n - [To promise or to callback? That is the question...](http://loige.co/to-promise-or-to-callback-that-is-the-question/) (~3.000 views)\n - [Introducing Gulp cozy - Manage your gulp tasks in a cozier way](http://loige.co/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way/) (~2.000 views)\n\nAlso it's worth noticing that an article from 2015 is still driving a significant portion of traffic: [Developing a web application with Lumen and MySql](http://loige.co/developing-a-web-application-with-lumen-and-mysql/) (~20.000 views).\n\nEven considering such small amount of posts, the blog reached an impressive total of about 90.000 page views.\n\n\n## External posts and Interviews\n\nI also had the time (and the pleasure) to keep going with some interesting collaboration with websites I love like [Scotch.io](https://scotch.io/) and [RisingStack](https://community.risingstack.com/). These are the posts that I enjoyed writing for external websites:\n\n - [React on the Server for Beginners: Build a Universal React and Node App](https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app) (~56.000 views)\n - **ZeroMQ & Node.js Tutorial - Cracking JWT Tokens** [Part 1](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/) & [Part 2](https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/) (~7.000 views in total)\n\nI also had the pleasure to have two interviews about being a software developer and a book author:\n\n- Usersnap: [Meet the community: Luciano Mammino, software developer from Sicily](http://usersnap.com/blog/developer-community-luciano-mammino/) (~1.000 views)\n- Packt blog: [With Node.js, it’s easy to get things done](https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done) (undisclosed stats)\n\nFinally, I'd love to mention that one of my best posts from 2015 has been translated to Italian and published on [HTML5Today.it](http://html5today.it), \"[Performance: 6 regole per sviluppare applicazioni web](http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/)\".\n\n\n## Open Sourcing\n\nThis year I also spent some time working out some small open source contributions, mostly creating little Node.js libraries or command line utilities for different purposes. Here's the complete list of the open source repository I have been working on sorted by the number of stars received:\n\n- [Atinux/schema-inspector](https://github.com/Atinux/schema-inspector) (contribution): Schema-Inspector is an JSON API sanitisation and validation module.\n- [silas/node-consul](https://github.com/silas/node-consul) (contribution): Node.js Consul client\n- [lmammino/judo-heroes](https://github.com/lmammino/judo-heroes): A React application to showcase rendering with Universal JavaScript\n- [lmammino/flickr-set-get](https://github.com/lmammino/flickr-set-get): A simple command line app to download photos from a flickr set\n- [lmammino/distributed-jwt-cracker](https://github.com/lmammino/distributed-jwt-cracker): An experimental distributed JWT token cracker built using Node.js and ZeroMQ\n- [lmammino/godaddy-dns](https://github.com/lmammino/godaddy-dns): A Node.js script to programmatically update GoDaddy DNS records\n- [lmammino/indexed-string-variation](https://github.com/lmammino/indexed-string-variation): Experimental JavaScript module to generate all possible variations of strings over an alphabet using an n-ary virtual tree\n- [lmammino/gulp-cozy](https://github.com/lmammino/gulp-cozy): Manage your gulp tasks in a cozier way\n- [lmammino/jwt-cracker](https://github.com/lmammino/jwt-cracker): Simple HS256 JWT token brute force cracker\n- [lmammino/ghost2hexo](https://github.com/lmammino/ghost2hexo): A command line tool to convert Ghost json export to a set of source posts for Hexo\n- [lmammino/x2j-cli](https://github.com/lmammino/x2j-cli): Node.js command line script to convert xml input into json output (can be piped easily)\n- [lmammino/vtt-creator](https://github.com/lmammino/vtt-creator): Very basic Node.js/JavaScript library to generate VTT open subtitles files\n- [lmammino/package-strip-deps](https://github.com/lmammino/package-strip-deps): A little command line utility that allows to strip dependencies from a NPM package.json file\n\n\n## Learning\n\nDuring the last 5 months I slowly started to have a look into the (quite new) [Elixir programming language](http://elixir-lang.org/).\n\nFor those who never heard before, let me quote the official website:\n\n> Elixir is a dynamic, functional language designed for building scalable and maintainable applications.\n\n> Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.\n\nWhy, you might wonder? In the last 2 or 3 year I wanted to spend some time with a pure functional language but Haskell, Clojure, Lisp and other more famous language never really convinced me different reasons. Elixir, for some weird reasons, immediately catch my attention. Plus, it seems to be competing quite well with other \"new-shiny\" languages:\n\n[![Comparison trend Elixir, Rust and Clojure](/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png)](https://www.google.com/trends/explore?date=2008-01-01%202016-12-24&q=%2Fm%2F0dsbpg6,%2Fm%2F0pl075p,%2Fm%2F03yb8hb)\n\nFinally I also have to admit that my friend [@bit_shark](https://twitter.com/bit_shark) had me brainwashed with \"how cool Elixir is\"! Thanks for that!\n\nAlso some other honourable mentions in my learning path this year have been:\n\n - [AWS](https://aws.amazon.com/) (mostly API Gateway, Lambda, Redshift, DynamoDB, S3, EC2, RDS, Route53 and Cloudfront)\n - [Serverless framework](http://serverless.com/)\n - [React](/tag/react/)\n - [ZeroMQ](/tag/zeromq/)\n - A bit of Python and [Scrapy](https://scrapy.org/)\n - A bit of Docker\n\n\n## Failures\n\nWell, so far so good, but... I have to admit it wasn't all peaches and dandelions. There were some failures here and there and it's good to take them into account.\n\nThe first and more important failure was not being able to focus on a side project. There is a *kind-of-secret-project™* I have been working on with my great friend [@andreaman87](https://twitter.com/andreaman87). I think I prioritised and planned really badly the time I wanted to spend on this project and I kept delaying my tasks. That's a bit of a shame and I need to apologise with Andrea for that!\n\nAlso another failure has been in my non-tech life, I haven't been able to train Brazilian Jiu Jitsu as much as I should have done and I feel like my game and my knowledge hasn't improved a lot! I guess I am going to keep my white belt still for a while :D\n\n\n## Expectations for next year\n\nOk, it's finally time to move to the good intentions for the next year! I have been very lengthy already so I'll just sort this part out with a simple unordered checklist, I am already looking forward to see, in one year time, how many items will be crossed:\n\n - Keep improving my knowledge of Node.js and everything related\n - Publish the first version of my side project with Andrea\n - Getting better with AWS and the Serverless framework\n - Move my blog to a static publishing engine and (possibly) use a serverless hosting approach\n - Keep investing time on Elixir and build something with it\n - Presentations and talks in conferences and meet-ups\n - Get more proficient with VIM (Cheers to [@quasi_modal](https://twitter.com/quasi_modal) for giving me [an amazing book](https://leanpub.com/painless_vim) as Christmas present!)\n - Keep open sourcing stuff\n - Travel more!\n - More serious and constant BJJ training! 👊\n\n\nWell, That's all... I hope I didn't bore you to death!\nAnyway, **I'd really love to know what was your biggest achievement in 2016**. If you feel like you want to share this information with me feel free to [write me on Twitter](https://twitter.com/loige) or to post a comment here! I'll make sure to have a pint in your honour! :D\n\n\"**Merry X-Mas and Happy New Year**\" to you all! 🎅🏻\n","published":1,"comments":1,"photos":[],"link":"","_id":"cixahwrcx0000mrvuzlmvtmx3","content":"<p>2016 is almost over and I just realised that it has been one of my most productive and exciting years ever. With that in mind I would love to write a recap of all the good and bad things (mostly from a career perspective) that happened in my life  during this year. I want to keep track and benchmark my productivity over the coming years. This might be boring for you to read but I hope it’s going to serve myself as a good motivation to keep doing better over the years, both in terms of career and quality of life.</p>\n<h2 id=\"Co-authoring-a-book-about-Node-js-and-Design-patterns\"><a href=\"#Co-authoring-a-book-about-Node-js-and-Design-patterns\" class=\"headerlink\" title=\"Co-authoring a book about Node.js and Design patterns\"></a>Co-authoring a book about Node.js and Design patterns</h2><p>One of the biggest achievements this year (and possibly during the course of my entire life) was to co-author a technical book!<br>From November last year to July this year I helped the great <a href=\"https://twitter.com/mariocasciaro\" target=\"_blank\" rel=\"external\">Mario Casciaro</a> and <em>Packt Publishing</em> joining them as co-author to revise “<strong>Node.js Design Patterns</strong>“ and come up with a shiny <a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">second edition</a>.<br>Being part of this initiative served me a double value. First of all, it was an amazing learning experience, I had to get my hands dirty with so many <a href=\"/tag/node-js\">Node.js</a> details and patterns and nail most of them in a relatively short timespan. Now I feel like I’m fully aware of what’s going on under the hood of Node.js and I am confident I can write pretty decent Node.js code using the right patterns for specific needs. In the second place, being a book author gave me much more visibility as a Node.js enthusiast and now I have more chances to interact with other people interested in this trending topic.</p>\n<p>If you are curious about Node.js and Design Patterns you can check out the official website of the book at: <a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\">https://www.nodejsdesignpatterns.com</a>.</p>\n<p><a href=\"https://www.nodejsdesignpatterns.com\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg\" alt=\"Book Cover Node.Js design patterns second edition Mario Casciaro Luciano Mammino Packt Publishing\"></a></p>\n<h2 id=\"Career\"><a href=\"#Career\" class=\"headerlink\" title=\"Career\"></a>Career</h2><p>In terms of career, this October I also moved from my position of Senior PHP Developer at <em>Smartbox</em> to a new role as Senior Software Developer at <a href=\"http://planet9energy.com\" target=\"_blank\" rel=\"external\">Planet9 Energy</a>. I am still pretty new in the company, but so far this change has been very exciting for a bunch of reasons:</p>\n<ul>\n<li>I get to work with a team of insanely skilled professionals like <a href=\"https://twitter.com/hughsheehy\" target=\"_blank\" rel=\"external\">@hughsheehy</a>, <a href=\"https://twitter.com/tech_fort\" target=\"_blank\" rel=\"external\">@tech_fort</a>, <a href=\"https://twitter.com/Podgeypoos79\" target=\"_blank\" rel=\"external\">@Podgeypoos79</a>, <a href=\"https://twitter.com/quasi_modal\" target=\"_blank\" rel=\"external\">@quasi_modal</a>, Aleksandar Čambas (who doesn’t like Twitter!) and <a href=\"https://twitter.com/katavic_d\" target=\"_blank\" rel=\"external\">@katavic_d</a>. It’s a pleasure to learn from them and with them everyday!</li>\n<li>Most of my work is in Node.js so I can stick to a language (JavaScript) I am loving and keep improving my knowledge and experience with it.</li>\n<li>I can be part of many architectural discussions and decisions about how we evolve a very sophisticated product that is managing an insane amount of data.</li>\n</ul>\n<p>I really look forward to keep doing my best next year and see some of the things we are building going live!</p>\n<h2 id=\"Conferences-and-meet-ups-talks\"><a href=\"#Conferences-and-meet-ups-talks\" class=\"headerlink\" title=\"Conferences and meet-ups talks\"></a>Conferences and meet-ups talks</h2><p>This year I did my first official conference talk at Codemotion Milan in November. If you are interested in Universal JavaScript and React you can find all the details (slides, video and notes) here: <a href=\"http://loige.co/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2/\" target=\"_blank\" rel=\"external\">My Universal JavaScript Web Applications talk at Codemotion Milan 2016</a>.</p>\n<p>In march I also made a talk at the PHP Dublin meet-up group about web application performance. Check it out here: <a href=\"http://loige.co/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk/\" target=\"_blank\" rel=\"external\">6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)</a>.</p>\n<p>I really enjoyed both experiences and I hope I will have more chances next year to deliver tech talks in meet-ups and conferences around Europe.</p>\n<h2 id=\"Blog-posts\"><a href=\"#Blog-posts\" class=\"headerlink\" title=\"Blog posts\"></a>Blog posts</h2><p>I have to admit this year I wasn’t a very prolific author, I guess the book drained all my energies during my free time. Anyway, I still managed to write some posts. Here are the most interesting ones (based on actual reading stats):</p>\n<ul>\n<li><a href=\"http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/\" target=\"_blank\" rel=\"external\">Extracting data from Wikipedia using curl, grep, cut and other shell commands</a> (~18.000 views)</li>\n<li><a href=\"http://loige.co/gulp-and-ftp-update-a-website-on-the-fly/\" target=\"_blank\" rel=\"external\">Gulp and FTP: update a website “on the fly”</a> (~7.000 views)</li>\n<li><a href=\"http://loige.co/to-promise-or-to-callback-that-is-the-question/\" target=\"_blank\" rel=\"external\">To promise or to callback? That is the question…</a> (~3.000 views)</li>\n<li><a href=\"http://loige.co/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way/\" target=\"_blank\" rel=\"external\">Introducing Gulp cozy - Manage your gulp tasks in a cozier way</a> (~2.000 views)</li>\n</ul>\n<p>Also it’s worth noticing that an article from 2015 is still driving a significant portion of traffic: <a href=\"http://loige.co/developing-a-web-application-with-lumen-and-mysql/\" target=\"_blank\" rel=\"external\">Developing a web application with Lumen and MySql</a> (~20.000 views).</p>\n<p>Even considering such small amount of posts, the blog reached an impressive total of about 90.000 page views.</p>\n<h2 id=\"External-posts-and-Interviews\"><a href=\"#External-posts-and-Interviews\" class=\"headerlink\" title=\"External posts and Interviews\"></a>External posts and Interviews</h2><p>I also had the time (and the pleasure) to keep going with some interesting collaboration with websites I love like <a href=\"https://scotch.io/\" target=\"_blank\" rel=\"external\">Scotch.io</a> and <a href=\"https://community.risingstack.com/\" target=\"_blank\" rel=\"external\">RisingStack</a>. These are the posts that I enjoyed writing for external websites:</p>\n<ul>\n<li><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\" target=\"_blank\" rel=\"external\">React on the Server for Beginners: Build a Universal React and Node App</a> (~56.000 views)</li>\n<li><strong>ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens</strong> <a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\" target=\"_blank\" rel=\"external\">Part 1</a> &amp; <a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/\" target=\"_blank\" rel=\"external\">Part 2</a> (~7.000 views in total)</li>\n</ul>\n<p>I also had the pleasure to have two interviews about being a software developer and a book author:</p>\n<ul>\n<li>Usersnap: <a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\" target=\"_blank\" rel=\"external\">Meet the community: Luciano Mammino, software developer from Sicily</a> (~1.000 views)</li>\n<li>Packt blog: <a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\" target=\"_blank\" rel=\"external\">With Node.js, it’s easy to get things done</a> (undisclosed stats)</li>\n</ul>\n<p>Finally, I’d love to mention that one of my best posts from 2015 has been translated to Italian and published on <a href=\"http://html5today.it\" target=\"_blank\" rel=\"external\">HTML5Today.it</a>, “<a href=\"http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/\" target=\"_blank\" rel=\"external\">Performance: 6 regole per sviluppare applicazioni web</a>“.</p>\n<h2 id=\"Open-Sourcing\"><a href=\"#Open-Sourcing\" class=\"headerlink\" title=\"Open Sourcing\"></a>Open Sourcing</h2><p>This year I also spent some time working out some small open source contributions, mostly creating little Node.js libraries or command line utilities for different purposes. Here’s the complete list of the open source repository I have been working on sorted by the number of stars received:</p>\n<ul>\n<li><a href=\"https://github.com/Atinux/schema-inspector\" target=\"_blank\" rel=\"external\">Atinux/schema-inspector</a> (contribution): Schema-Inspector is an JSON API sanitisation and validation module.</li>\n<li><a href=\"https://github.com/silas/node-consul\" target=\"_blank\" rel=\"external\">silas/node-consul</a> (contribution): Node.js Consul client</li>\n<li><a href=\"https://github.com/lmammino/judo-heroes\" target=\"_blank\" rel=\"external\">lmammino/judo-heroes</a>: A React application to showcase rendering with Universal JavaScript</li>\n<li><a href=\"https://github.com/lmammino/flickr-set-get\" target=\"_blank\" rel=\"external\">lmammino/flickr-set-get</a>: A simple command line app to download photos from a flickr set</li>\n<li><a href=\"https://github.com/lmammino/distributed-jwt-cracker\" target=\"_blank\" rel=\"external\">lmammino/distributed-jwt-cracker</a>: An experimental distributed JWT token cracker built using Node.js and ZeroMQ</li>\n<li><a href=\"https://github.com/lmammino/godaddy-dns\" target=\"_blank\" rel=\"external\">lmammino/godaddy-dns</a>: A Node.js script to programmatically update GoDaddy DNS records</li>\n<li><a href=\"https://github.com/lmammino/indexed-string-variation\" target=\"_blank\" rel=\"external\">lmammino/indexed-string-variation</a>: Experimental JavaScript module to generate all possible variations of strings over an alphabet using an n-ary virtual tree</li>\n<li><a href=\"https://github.com/lmammino/gulp-cozy\" target=\"_blank\" rel=\"external\">lmammino/gulp-cozy</a>: Manage your gulp tasks in a cozier way</li>\n<li><a href=\"https://github.com/lmammino/jwt-cracker\" target=\"_blank\" rel=\"external\">lmammino/jwt-cracker</a>: Simple HS256 JWT token brute force cracker</li>\n<li><a href=\"https://github.com/lmammino/ghost2hexo\" target=\"_blank\" rel=\"external\">lmammino/ghost2hexo</a>: A command line tool to convert Ghost json export to a set of source posts for Hexo</li>\n<li><a href=\"https://github.com/lmammino/x2j-cli\" target=\"_blank\" rel=\"external\">lmammino/x2j-cli</a>: Node.js command line script to convert xml input into json output (can be piped easily)</li>\n<li><a href=\"https://github.com/lmammino/vtt-creator\" target=\"_blank\" rel=\"external\">lmammino/vtt-creator</a>: Very basic Node.js/JavaScript library to generate VTT open subtitles files</li>\n<li><a href=\"https://github.com/lmammino/package-strip-deps\" target=\"_blank\" rel=\"external\">lmammino/package-strip-deps</a>: A little command line utility that allows to strip dependencies from a NPM package.json file</li>\n</ul>\n<h2 id=\"Learning\"><a href=\"#Learning\" class=\"headerlink\" title=\"Learning\"></a>Learning</h2><p>During the last 5 months I slowly started to have a look into the (quite new) <a href=\"http://elixir-lang.org/\" target=\"_blank\" rel=\"external\">Elixir programming language</a>.</p>\n<p>For those who never heard before, let me quote the official website:</p>\n<blockquote>\n<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications.</p>\n<p>Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.</p>\n</blockquote>\n<p>Why, you might wonder? In the last 2 or 3 year I wanted to spend some time with a pure functional language but Haskell, Clojure, Lisp and other more famous language never really convinced me different reasons. Elixir, for some weird reasons, immediately catch my attention. Plus, it seems to be competing quite well with other “new-shiny” languages:</p>\n<p><a href=\"https://www.google.com/trends/explore?date=2008-01-01%202016-12-24&amp;q=%2Fm%2F0dsbpg6,%2Fm%2F0pl075p,%2Fm%2F03yb8hb\" target=\"_blank\" rel=\"external\"><img src=\"/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png\" alt=\"Comparison trend Elixir, Rust and Clojure\"></a></p>\n<p>Finally I also have to admit that my friend <a href=\"https://twitter.com/bit_shark\" target=\"_blank\" rel=\"external\">@bit_shark</a> had me brainwashed with “how cool Elixir is”! Thanks for that!</p>\n<p>Also some other honourable mentions in my learning path this year have been:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"external\">AWS</a> (mostly API Gateway, Lambda, Redshift, DynamoDB, S3, EC2, RDS, Route53 and Cloudfront)</li>\n<li><a href=\"http://serverless.com/\" target=\"_blank\" rel=\"external\">Serverless framework</a></li>\n<li><a href=\"/tag/react/\">React</a></li>\n<li><a href=\"/tag/zeromq/\">ZeroMQ</a></li>\n<li>A bit of Python and <a href=\"https://scrapy.org/\" target=\"_blank\" rel=\"external\">Scrapy</a></li>\n<li>A bit of Docker</li>\n</ul>\n<h2 id=\"Failures\"><a href=\"#Failures\" class=\"headerlink\" title=\"Failures\"></a>Failures</h2><p>Well, so far so good, but… I have to admit it wasn’t all peaches and dandelions. There were some failures here and there and it’s good to take them into account.</p>\n<p>The first and more important failure was not being able to focus on a side project. There is a <em>kind-of-secret-project™</em> I have been working on with my great friend <a href=\"https://twitter.com/andreaman87\" target=\"_blank\" rel=\"external\">@andreaman87</a>. I think I prioritised and planned really badly the time I wanted to spend on this project and I kept delaying my tasks. That’s a bit of a shame and I need to apologise with Andrea for that!</p>\n<p>Also another failure has been in my non-tech life, I haven’t been able to train Brazilian Jiu Jitsu as much as I should have done and I feel like my game and my knowledge hasn’t improved a lot! I guess I am going to keep my white belt still for a while :D</p>\n<h2 id=\"Expectations-for-next-year\"><a href=\"#Expectations-for-next-year\" class=\"headerlink\" title=\"Expectations for next year\"></a>Expectations for next year</h2><p>Ok, it’s finally time to move to the good intentions for the next year! I have been very lengthy already so I’ll just sort this part out with a simple unordered checklist, I am already looking forward to see, in one year time, how many items will be crossed:</p>\n<ul>\n<li>Keep improving my knowledge of Node.js and everything related</li>\n<li>Publish the first version of my side project with Andrea</li>\n<li>Getting better with AWS and the Serverless framework</li>\n<li>Move my blog to a static publishing engine and (possibly) use a serverless hosting approach</li>\n<li>Keep investing time on Elixir and build something with it</li>\n<li>Presentations and talks in conferences and meet-ups</li>\n<li>Get more proficient with VIM (Cheers to <a href=\"https://twitter.com/quasi_modal\" target=\"_blank\" rel=\"external\">@quasi_modal</a> for giving me <a href=\"https://leanpub.com/painless_vim\" target=\"_blank\" rel=\"external\">an amazing book</a> as Christmas present!)</li>\n<li>Keep open sourcing stuff</li>\n<li>Travel more!</li>\n<li>More serious and constant BJJ training! 👊</li>\n</ul>\n<p>Well, That’s all… I hope I didn’t bore you to death!<br>Anyway, <strong>I’d really love to know what was your biggest achievement in 2016</strong>. If you feel like you want to share this information with me feel free to <a href=\"https://twitter.com/loige\" target=\"_blank\" rel=\"external\">write me on Twitter</a> or to post a comment here! I’ll make sure to have a pint in your honour! :D</p>\n<p>“<strong>Merry X-Mas and Happy New Year</strong>“ to you all! 🎅🏻</p>\n","excerpt":"","more":"<p>2016 is almost over and I just realised that it has been one of my most productive and exciting years ever. With that in mind I would love to write a recap of all the good and bad things (mostly from a career perspective) that happened in my life  during this year. I want to keep track and benchmark my productivity over the coming years. This might be boring for you to read but I hope it’s going to serve myself as a good motivation to keep doing better over the years, both in terms of career and quality of life.</p>\n<h2 id=\"Co-authoring-a-book-about-Node-js-and-Design-patterns\"><a href=\"#Co-authoring-a-book-about-Node-js-and-Design-patterns\" class=\"headerlink\" title=\"Co-authoring a book about Node.js and Design patterns\"></a>Co-authoring a book about Node.js and Design patterns</h2><p>One of the biggest achievements this year (and possibly during the course of my entire life) was to co-author a technical book!<br>From November last year to July this year I helped the great <a href=\"https://twitter.com/mariocasciaro\">Mario Casciaro</a> and <em>Packt Publishing</em> joining them as co-author to revise “<strong>Node.js Design Patterns</strong>“ and come up with a shiny <a href=\"https://www.nodejsdesignpatterns.com\">second edition</a>.<br>Being part of this initiative served me a double value. First of all, it was an amazing learning experience, I had to get my hands dirty with so many <a href=\"/tag/node-js\">Node.js</a> details and patterns and nail most of them in a relatively short timespan. Now I feel like I’m fully aware of what’s going on under the hood of Node.js and I am confident I can write pretty decent Node.js code using the right patterns for specific needs. In the second place, being a book author gave me much more visibility as a Node.js enthusiast and now I have more chances to interact with other people interested in this trending topic.</p>\n<p>If you are curious about Node.js and Design Patterns you can check out the official website of the book at: <a href=\"https://www.nodejsdesignpatterns.com\">https://www.nodejsdesignpatterns.com</a>.</p>\n<p><a href=\"https://www.nodejsdesignpatterns.com\"><img src=\"/content/images/2016/12/book-cover-nodejs-design-patterns-second-edition-mario-casciaro-luciano-mammino-small.jpg\" alt=\"Book Cover Node.Js design patterns second edition Mario Casciaro Luciano Mammino Packt Publishing\"></a></p>\n<h2 id=\"Career\"><a href=\"#Career\" class=\"headerlink\" title=\"Career\"></a>Career</h2><p>In terms of career, this October I also moved from my position of Senior PHP Developer at <em>Smartbox</em> to a new role as Senior Software Developer at <a href=\"http://planet9energy.com\">Planet9 Energy</a>. I am still pretty new in the company, but so far this change has been very exciting for a bunch of reasons:</p>\n<ul>\n<li>I get to work with a team of insanely skilled professionals like <a href=\"https://twitter.com/hughsheehy\">@hughsheehy</a>, <a href=\"https://twitter.com/tech_fort\">@tech_fort</a>, <a href=\"https://twitter.com/Podgeypoos79\">@Podgeypoos79</a>, <a href=\"https://twitter.com/quasi_modal\">@quasi_modal</a>, Aleksandar Čambas (who doesn’t like Twitter!) and <a href=\"https://twitter.com/katavic_d\">@katavic_d</a>. It’s a pleasure to learn from them and with them everyday!</li>\n<li>Most of my work is in Node.js so I can stick to a language (JavaScript) I am loving and keep improving my knowledge and experience with it.</li>\n<li>I can be part of many architectural discussions and decisions about how we evolve a very sophisticated product that is managing an insane amount of data.</li>\n</ul>\n<p>I really look forward to keep doing my best next year and see some of the things we are building going live!</p>\n<h2 id=\"Conferences-and-meet-ups-talks\"><a href=\"#Conferences-and-meet-ups-talks\" class=\"headerlink\" title=\"Conferences and meet-ups talks\"></a>Conferences and meet-ups talks</h2><p>This year I did my first official conference talk at Codemotion Milan in November. If you are interested in Universal JavaScript and React you can find all the details (slides, video and notes) here: <a href=\"http://loige.co/my-universal-javascript-web-applications-talk-at-codemotion-milan-2016-2/\">My Universal JavaScript Web Applications talk at Codemotion Milan 2016</a>.</p>\n<p>In march I also made a talk at the PHP Dublin meet-up group about web application performance. Check it out here: <a href=\"http://loige.co/6-tips-to-build-fast-web-applications-php-dublin-march-2016-talk/\">6 Tips to Build Fast Web Applications (Php Dublin March 2016 Talk)</a>.</p>\n<p>I really enjoyed both experiences and I hope I will have more chances next year to deliver tech talks in meet-ups and conferences around Europe.</p>\n<h2 id=\"Blog-posts\"><a href=\"#Blog-posts\" class=\"headerlink\" title=\"Blog posts\"></a>Blog posts</h2><p>I have to admit this year I wasn’t a very prolific author, I guess the book drained all my energies during my free time. Anyway, I still managed to write some posts. Here are the most interesting ones (based on actual reading stats):</p>\n<ul>\n<li><a href=\"http://loige.co/extracting-data-from-wikipedia-using-curl-grep-cut-and-other-bash-commands/\">Extracting data from Wikipedia using curl, grep, cut and other shell commands</a> (~18.000 views)</li>\n<li><a href=\"http://loige.co/gulp-and-ftp-update-a-website-on-the-fly/\">Gulp and FTP: update a website “on the fly”</a> (~7.000 views)</li>\n<li><a href=\"http://loige.co/to-promise-or-to-callback-that-is-the-question/\">To promise or to callback? That is the question…</a> (~3.000 views)</li>\n<li><a href=\"http://loige.co/introducing-gulp-cozy-manage-your-gulp-tasks-in-a-cozier-way/\">Introducing Gulp cozy - Manage your gulp tasks in a cozier way</a> (~2.000 views)</li>\n</ul>\n<p>Also it’s worth noticing that an article from 2015 is still driving a significant portion of traffic: <a href=\"http://loige.co/developing-a-web-application-with-lumen-and-mysql/\">Developing a web application with Lumen and MySql</a> (~20.000 views).</p>\n<p>Even considering such small amount of posts, the blog reached an impressive total of about 90.000 page views.</p>\n<h2 id=\"External-posts-and-Interviews\"><a href=\"#External-posts-and-Interviews\" class=\"headerlink\" title=\"External posts and Interviews\"></a>External posts and Interviews</h2><p>I also had the time (and the pleasure) to keep going with some interesting collaboration with websites I love like <a href=\"https://scotch.io/\">Scotch.io</a> and <a href=\"https://community.risingstack.com/\">RisingStack</a>. These are the posts that I enjoyed writing for external websites:</p>\n<ul>\n<li><a href=\"https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app\">React on the Server for Beginners: Build a Universal React and Node App</a> (~56.000 views)</li>\n<li><strong>ZeroMQ &amp; Node.js Tutorial - Cracking JWT Tokens</strong> <a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-1/\">Part 1</a> &amp; <a href=\"https://community.risingstack.com/zeromq-node-js-cracking-jwt-tokens-part2/\">Part 2</a> (~7.000 views in total)</li>\n</ul>\n<p>I also had the pleasure to have two interviews about being a software developer and a book author:</p>\n<ul>\n<li>Usersnap: <a href=\"http://usersnap.com/blog/developer-community-luciano-mammino/\">Meet the community: Luciano Mammino, software developer from Sicily</a> (~1.000 views)</li>\n<li>Packt blog: <a href=\"https://www.packtpub.com/books/content/nodejs-its-easy-get-things-done\">With Node.js, it’s easy to get things done</a> (undisclosed stats)</li>\n</ul>\n<p>Finally, I’d love to mention that one of my best posts from 2015 has been translated to Italian and published on <a href=\"http://html5today.it\">HTML5Today.it</a>, “<a href=\"http://html5today.it/tutorial/performance-6-regole-sviluppare-applicazioni-web/\">Performance: 6 regole per sviluppare applicazioni web</a>“.</p>\n<h2 id=\"Open-Sourcing\"><a href=\"#Open-Sourcing\" class=\"headerlink\" title=\"Open Sourcing\"></a>Open Sourcing</h2><p>This year I also spent some time working out some small open source contributions, mostly creating little Node.js libraries or command line utilities for different purposes. Here’s the complete list of the open source repository I have been working on sorted by the number of stars received:</p>\n<ul>\n<li><a href=\"https://github.com/Atinux/schema-inspector\">Atinux/schema-inspector</a> (contribution): Schema-Inspector is an JSON API sanitisation and validation module.</li>\n<li><a href=\"https://github.com/silas/node-consul\">silas/node-consul</a> (contribution): Node.js Consul client</li>\n<li><a href=\"https://github.com/lmammino/judo-heroes\">lmammino/judo-heroes</a>: A React application to showcase rendering with Universal JavaScript</li>\n<li><a href=\"https://github.com/lmammino/flickr-set-get\">lmammino/flickr-set-get</a>: A simple command line app to download photos from a flickr set</li>\n<li><a href=\"https://github.com/lmammino/distributed-jwt-cracker\">lmammino/distributed-jwt-cracker</a>: An experimental distributed JWT token cracker built using Node.js and ZeroMQ</li>\n<li><a href=\"https://github.com/lmammino/godaddy-dns\">lmammino/godaddy-dns</a>: A Node.js script to programmatically update GoDaddy DNS records</li>\n<li><a href=\"https://github.com/lmammino/indexed-string-variation\">lmammino/indexed-string-variation</a>: Experimental JavaScript module to generate all possible variations of strings over an alphabet using an n-ary virtual tree</li>\n<li><a href=\"https://github.com/lmammino/gulp-cozy\">lmammino/gulp-cozy</a>: Manage your gulp tasks in a cozier way</li>\n<li><a href=\"https://github.com/lmammino/jwt-cracker\">lmammino/jwt-cracker</a>: Simple HS256 JWT token brute force cracker</li>\n<li><a href=\"https://github.com/lmammino/ghost2hexo\">lmammino/ghost2hexo</a>: A command line tool to convert Ghost json export to a set of source posts for Hexo</li>\n<li><a href=\"https://github.com/lmammino/x2j-cli\">lmammino/x2j-cli</a>: Node.js command line script to convert xml input into json output (can be piped easily)</li>\n<li><a href=\"https://github.com/lmammino/vtt-creator\">lmammino/vtt-creator</a>: Very basic Node.js/JavaScript library to generate VTT open subtitles files</li>\n<li><a href=\"https://github.com/lmammino/package-strip-deps\">lmammino/package-strip-deps</a>: A little command line utility that allows to strip dependencies from a NPM package.json file</li>\n</ul>\n<h2 id=\"Learning\"><a href=\"#Learning\" class=\"headerlink\" title=\"Learning\"></a>Learning</h2><p>During the last 5 months I slowly started to have a look into the (quite new) <a href=\"http://elixir-lang.org/\">Elixir programming language</a>.</p>\n<p>For those who never heard before, let me quote the official website:</p>\n<blockquote>\n<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications.</p>\n<p>Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.</p>\n</blockquote>\n<p>Why, you might wonder? In the last 2 or 3 year I wanted to spend some time with a pure functional language but Haskell, Clojure, Lisp and other more famous language never really convinced me different reasons. Elixir, for some weird reasons, immediately catch my attention. Plus, it seems to be competing quite well with other “new-shiny” languages:</p>\n<p><a href=\"https://www.google.com/trends/explore?date=2008-01-01%202016-12-24&amp;q=%2Fm%2F0dsbpg6,%2Fm%2F0pl075p,%2Fm%2F03yb8hb\"><img src=\"/content/images/2016/12/google-trend-clojure-elixir-rust-comparison.png\" alt=\"Comparison trend Elixir, Rust and Clojure\"></a></p>\n<p>Finally I also have to admit that my friend <a href=\"https://twitter.com/bit_shark\">@bit_shark</a> had me brainwashed with “how cool Elixir is”! Thanks for that!</p>\n<p>Also some other honourable mentions in my learning path this year have been:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/\">AWS</a> (mostly API Gateway, Lambda, Redshift, DynamoDB, S3, EC2, RDS, Route53 and Cloudfront)</li>\n<li><a href=\"http://serverless.com/\">Serverless framework</a></li>\n<li><a href=\"/tag/react/\">React</a></li>\n<li><a href=\"/tag/zeromq/\">ZeroMQ</a></li>\n<li>A bit of Python and <a href=\"https://scrapy.org/\">Scrapy</a></li>\n<li>A bit of Docker</li>\n</ul>\n<h2 id=\"Failures\"><a href=\"#Failures\" class=\"headerlink\" title=\"Failures\"></a>Failures</h2><p>Well, so far so good, but… I have to admit it wasn’t all peaches and dandelions. There were some failures here and there and it’s good to take them into account.</p>\n<p>The first and more important failure was not being able to focus on a side project. There is a <em>kind-of-secret-project™</em> I have been working on with my great friend <a href=\"https://twitter.com/andreaman87\">@andreaman87</a>. I think I prioritised and planned really badly the time I wanted to spend on this project and I kept delaying my tasks. That’s a bit of a shame and I need to apologise with Andrea for that!</p>\n<p>Also another failure has been in my non-tech life, I haven’t been able to train Brazilian Jiu Jitsu as much as I should have done and I feel like my game and my knowledge hasn’t improved a lot! I guess I am going to keep my white belt still for a while :D</p>\n<h2 id=\"Expectations-for-next-year\"><a href=\"#Expectations-for-next-year\" class=\"headerlink\" title=\"Expectations for next year\"></a>Expectations for next year</h2><p>Ok, it’s finally time to move to the good intentions for the next year! I have been very lengthy already so I’ll just sort this part out with a simple unordered checklist, I am already looking forward to see, in one year time, how many items will be crossed:</p>\n<ul>\n<li>Keep improving my knowledge of Node.js and everything related</li>\n<li>Publish the first version of my side project with Andrea</li>\n<li>Getting better with AWS and the Serverless framework</li>\n<li>Move my blog to a static publishing engine and (possibly) use a serverless hosting approach</li>\n<li>Keep investing time on Elixir and build something with it</li>\n<li>Presentations and talks in conferences and meet-ups</li>\n<li>Get more proficient with VIM (Cheers to <a href=\"https://twitter.com/quasi_modal\">@quasi_modal</a> for giving me <a href=\"https://leanpub.com/painless_vim\">an amazing book</a> as Christmas present!)</li>\n<li>Keep open sourcing stuff</li>\n<li>Travel more!</li>\n<li>More serious and constant BJJ training! 👊</li>\n</ul>\n<p>Well, That’s all… I hope I didn’t bore you to death!<br>Anyway, <strong>I’d really love to know what was your biggest achievement in 2016</strong>. If you feel like you want to share this information with me feel free to <a href=\"https://twitter.com/loige\">write me on Twitter</a> or to post a comment here! I’ll make sure to have a pint in your honour! :D</p>\n<p>“<strong>Merry X-Mas and Happy New Year</strong>“ to you all! 🎅🏻</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cixaggrxr0000svvuv82fp6z4","tag_id":"cixaggrxy0002svvusjddjnjc","_id":"cixaggry60007svvu0ts4ke9d"},{"post_id":"cixaggrxv0001svvudg44cuun","tag_id":"cixaggry50006svvuorlj8jkt","_id":"cixaggryf000fsvvuwbnodes4"},{"post_id":"cixaggrxv0001svvudg44cuun","tag_id":"cixaggryb000asvvulj2d1407","_id":"cixaggryg000hsvvumy6efbdy"},{"post_id":"cixaggry00003svvuezfykvw1","tag_id":"cixaggryd000dsvvuzcyctsqv","_id":"cixaggrym000nsvvus8tyuy20"},{"post_id":"cixaggry00003svvuezfykvw1","tag_id":"cixaggryg000isvvu32a1ehp7","_id":"cixaggryo000psvvusvnm3hl0"},{"post_id":"cixaggry20004svvuxgdgfbf4","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggrz50016svvu9h009nas"},{"post_id":"cixaggry20004svvuxgdgfbf4","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggrz70018svvun722uws3"},{"post_id":"cixaggry20004svvuxgdgfbf4","tag_id":"cixaggrys000usvvu7onwi9vs","_id":"cixaggrz9001bsvvuuvms9k35"},{"post_id":"cixaggry20004svvuxgdgfbf4","tag_id":"cixaggryx000xsvvugloq5wgc","_id":"cixaggrzb001dsvvueok8rsqq"},{"post_id":"cixaggry20004svvuxgdgfbf4","tag_id":"cixaggrz00011svvuufdv748m","_id":"cixaggrzc001gsvvuckxwejmd"},{"post_id":"cixaggrz60017svvuk3erfayc","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggrzd001isvvu4d9qw2h9"},{"post_id":"cixaggrz60017svvuk3erfayc","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggrzf001lsvvu53i9jehm"},{"post_id":"cixaggrz60017svvuk3erfayc","tag_id":"cixaggry50006svvuorlj8jkt","_id":"cixaggrzg001nsvvu7h3ubgn0"},{"post_id":"cixaggry40005svvu9g8db8dg","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggrzh001psvvudcvz063x"},{"post_id":"cixaggry40005svvu9g8db8dg","tag_id":"cixaggrz80019svvuk4wmm5ug","_id":"cixaggrzh001qsvvu8y7o3x9n"},{"post_id":"cixaggry40005svvu9g8db8dg","tag_id":"cixaggrzb001esvvu5g3ur0z5","_id":"cixaggrzi001ssvvu0g576me4"},{"post_id":"cixaggry40005svvu9g8db8dg","tag_id":"cixaggryx000xsvvugloq5wgc","_id":"cixaggrzi001tsvvujal6e29h"},{"post_id":"cixaggry60008svvu2fdtiw9c","tag_id":"cixaggrzh001osvvu43csdwgl","_id":"cixaggrzi001wsvvur6w7ruru"},{"post_id":"cixaggry60008svvu2fdtiw9c","tag_id":"cixaggrzh001rsvvu26s0d8yl","_id":"cixaggrzj001xsvvuwhry925y"},{"post_id":"cixaggry60008svvu2fdtiw9c","tag_id":"cixaggrzi001usvvu26g7njos","_id":"cixaggrzj001zsvvu7t9rlfo8"},{"post_id":"cixaggry80009svvuq7fcrjba","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggrzk0022svvuk3qfrxt6"},{"post_id":"cixaggry80009svvuq7fcrjba","tag_id":"cixaggrzj001ysvvugncb4xyl","_id":"cixaggrzk0023svvude0eaa3d"},{"post_id":"cixaggry80009svvuq7fcrjba","tag_id":"cixaggrzj0020svvu6im4axrl","_id":"cixaggrzk0025svvuflkaqj13"},{"post_id":"cixaggryc000bsvvu8vbs0dly","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggrzl0029svvuwd70uu5h"},{"post_id":"cixaggryc000bsvvu8vbs0dly","tag_id":"cixaggrzk0024svvuoyor4b88","_id":"cixaggrzl002asvvu9jt7qp7l"},{"post_id":"cixaggryc000bsvvu8vbs0dly","tag_id":"cixaggrzk0026svvurnm4rnkl","_id":"cixaggrzm002csvvugoei4zyb"},{"post_id":"cixaggryc000bsvvu8vbs0dly","tag_id":"cixaggrys000usvvu7onwi9vs","_id":"cixaggrzm002dsvvu2zjdpn8e"},{"post_id":"cixaggryd000csvvudo1w1xzz","tag_id":"cixaggrzl0028svvump92fqlx","_id":"cixaggrzn002fsvvuz4s6dh16"},{"post_id":"cixaggryd000csvvudo1w1xzz","tag_id":"cixaggrzl002bsvvu67d91ai7","_id":"cixaggrzn002gsvvum9mjblhv"},{"post_id":"cixaggrye000esvvugv2u396f","tag_id":"cixaggrzm002esvvuom24w7tn","_id":"cixaggrzn002isvvudvdg8jnw"},{"post_id":"cixaggryf000gsvvuvocmby6x","tag_id":"cixaggrzn002hsvvuatxv9anp","_id":"cixaggrzp002lsvvuj33pfh1v"},{"post_id":"cixaggryf000gsvvuvocmby6x","tag_id":"cixaggrzn002jsvvulo2vumas","_id":"cixaggrzp002msvvuiqk8pd10"},{"post_id":"cixaggryh000jsvvudwin2z4b","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggrzq002qsvvuf16f97a3"},{"post_id":"cixaggryh000jsvvudwin2z4b","tag_id":"cixaggrzp002nsvvugilznvn7","_id":"cixaggrzq002rsvvu40gmt9h1"},{"post_id":"cixaggryh000jsvvudwin2z4b","tag_id":"cixaggrzp002osvvu9m2jxbgj","_id":"cixaggrzq002tsvvuc3eh2qbf"},{"post_id":"cixaggryi000ksvvu7wunldg5","tag_id":"cixaggrzp002psvvudhtwbfwl","_id":"cixaggrzt002xsvvu5ft2y4it"},{"post_id":"cixaggryi000ksvvu7wunldg5","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggrzt002ysvvu4yuyt08y"},{"post_id":"cixaggryi000ksvvu7wunldg5","tag_id":"cixaggrzr002usvvu7gns6zxk","_id":"cixaggrzu0030svvu94n24yzd"},{"post_id":"cixaggryi000ksvvu7wunldg5","tag_id":"cixaggrzi001usvvu26g7njos","_id":"cixaggrzu0031svvuk88002zm"},{"post_id":"cixaggryk000lsvvujor1vx5u","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggrzw0036svvuejlgfdd4"},{"post_id":"cixaggryk000lsvvujor1vx5u","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggrzw0037svvuyzr9iyeo"},{"post_id":"cixaggryk000lsvvujor1vx5u","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggrzx0039svvu0oyvmdyn"},{"post_id":"cixaggryk000lsvvujor1vx5u","tag_id":"cixaggrzv0033svvu4q9cx93u","_id":"cixaggrzx003asvvu6xu504nn"},{"post_id":"cixaggryk000lsvvujor1vx5u","tag_id":"cixaggrzv0034svvucscqu0o0","_id":"cixaggrzy003csvvuti8ucf1h"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs00003hsvvu2ulwdg14"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzx0038svvu7m2xmdtf","_id":"cixaggs00003isvvuv3k0ktxo"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzx003bsvvulzg2kc34","_id":"cixaggs00003ksvvu1xtz3kvu"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzp002osvvu9m2jxbgj","_id":"cixaggs00003lsvvue780id4u"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzy003esvvuoi4j4l0f","_id":"cixaggs02003nsvvur7wx5hy8"},{"post_id":"cixaggryo000qsvvum8p9og11","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs02003osvvuc8ai04at"},{"post_id":"cixaggryp000ssvvusam4vxkh","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs04003ssvvubxl26k4a"},{"post_id":"cixaggryp000ssvvusam4vxkh","tag_id":"cixaggs00003jsvvubfaxboxd","_id":"cixaggs04003tsvvu1wa8i1dy"},{"post_id":"cixaggryp000ssvvusam4vxkh","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs04003vsvvudsjmzh1x"},{"post_id":"cixaggryp000ssvvusam4vxkh","tag_id":"cixaggs02003psvvur4drdzbx","_id":"cixaggs05003wsvvus1h4bhqx"},{"post_id":"cixaggryp000ssvvusam4vxkh","tag_id":"cixaggs03003qsvvujb0i2pdi","_id":"cixaggs05003ysvvuwdwrqx3x"},{"post_id":"cixaggryr000tsvvuph8393oo","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs060041svvuhw0fw9jb"},{"post_id":"cixaggryr000tsvvuph8393oo","tag_id":"cixaggs04003usvvuhd8ecb8b","_id":"cixaggs070042svvup6tdha4a"},{"post_id":"cixaggryr000tsvvuph8393oo","tag_id":"cixaggs05003xsvvut0kn6d6t","_id":"cixaggs070044svvuzdim7s0u"},{"post_id":"cixaggryr000tsvvuph8393oo","tag_id":"cixaggrzn002jsvvulo2vumas","_id":"cixaggs070045svvul6y5n4y5"},{"post_id":"cixaggryt000vsvvusy52mpiq","tag_id":"cixaggrzp002psvvudhtwbfwl","_id":"cixaggs090049svvupdghqe3e"},{"post_id":"cixaggryt000vsvvusy52mpiq","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs09004asvvut16qwmz2"},{"post_id":"cixaggryt000vsvvusy52mpiq","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs09004csvvut8ei358y"},{"post_id":"cixaggryt000vsvvusy52mpiq","tag_id":"cixaggs04003usvvuhd8ecb8b","_id":"cixaggs09004dsvvu3z8l9bp2"},{"post_id":"cixaggryv000wsvvuupz0uzrh","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs0a004fsvvubbvf4yzi"},{"post_id":"cixaggryv000wsvvuupz0uzrh","tag_id":"cixaggs080048svvuiaxbscwz","_id":"cixaggs0b004gsvvuovtkty21"},{"post_id":"cixaggryv000wsvvuupz0uzrh","tag_id":"cixaggs09004bsvvuvyodcb13","_id":"cixaggs0b004isvvufckmboyl"},{"post_id":"cixaggryx000ysvvuedb7ley4","tag_id":"cixaggs04003usvvuhd8ecb8b","_id":"cixaggs0e004lsvvup44apw69"},{"post_id":"cixaggryx000ysvvuedb7ley4","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs0e004msvvucmlgdt4w"},{"post_id":"cixaggryx000ysvvuedb7ley4","tag_id":"cixaggs0b004hsvvut1n339d4","_id":"cixaggs0e004osvvugtzbk5a0"},{"post_id":"cixaggryx000ysvvuedb7ley4","tag_id":"cixaggrzn002jsvvulo2vumas","_id":"cixaggs0f004psvvuwmf01x3t"},{"post_id":"cixaggryy000zsvvudp48xth1","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs0g004ssvvugcmjjq7c"},{"post_id":"cixaggryy000zsvvudp48xth1","tag_id":"cixaggs0e004nsvvuatvi9uhl","_id":"cixaggs0g004tsvvuhkdggoon"},{"post_id":"cixaggryy000zsvvudp48xth1","tag_id":"cixaggrzp002osvvu9m2jxbgj","_id":"cixaggs0g004vsvvu4xtyqdx7"},{"post_id":"cixaggryz0010svvuxck86c2o","tag_id":"cixaggry50006svvuorlj8jkt","_id":"cixaggs0h004xsvvuoy7f9m7b"},{"post_id":"cixaggryz0010svvuxck86c2o","tag_id":"cixaggrzk0024svvuoyor4b88","_id":"cixaggs0h004ysvvu0hjrmtmz"},{"post_id":"cixaggryz0010svvuxck86c2o","tag_id":"cixaggrzi001usvvu26g7njos","_id":"cixaggs0h0050svvuqhtzljcm"},{"post_id":"cixaggrz00012svvugm7717xd","tag_id":"cixaggrz80019svvuk4wmm5ug","_id":"cixaggs0j0055svvurvas7gl6"},{"post_id":"cixaggrz00012svvugm7717xd","tag_id":"cixaggrzb001esvvu5g3ur0z5","_id":"cixaggs0l0056svvug9tr121n"},{"post_id":"cixaggrz00012svvugm7717xd","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs0m0058svvutc43i4e2"},{"post_id":"cixaggrz00012svvugm7717xd","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs0m0059svvu3i12jxsi"},{"post_id":"cixaggrz00012svvugm7717xd","tag_id":"cixaggs0e004nsvvuatvi9uhl","_id":"cixaggs0m005bsvvuk5dq5fwi"},{"post_id":"cixaggrz10013svvun1s7brf1","tag_id":"cixaggrzi001usvvu26g7njos","_id":"cixaggs0o005dsvvuvsgd06pd"},{"post_id":"cixaggrz10013svvun1s7brf1","tag_id":"cixaggs0l0057svvuoco5ckkp","_id":"cixaggs0o005esvvunv0r47pi"},{"post_id":"cixaggrz10013svvun1s7brf1","tag_id":"cixaggs0m005asvvuywhndmsf","_id":"cixaggs0o005gsvvu51fujpau"},{"post_id":"cixaggrz50015svvuahw62evl","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs0q005jsvvuedxkl40r"},{"post_id":"cixaggrz50015svvuahw62evl","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggs0q005ksvvu75pjuere"},{"post_id":"cixaggrz50015svvuahw62evl","tag_id":"cixaggs00003jsvvubfaxboxd","_id":"cixaggs0q005msvvu62rivtej"},{"post_id":"cixaggrz50015svvuahw62evl","tag_id":"cixaggs0o005fsvvu5jfa4dst","_id":"cixaggs0q005nsvvusopmoj1s"},{"post_id":"cixaggrz50015svvuahw62evl","tag_id":"cixaggs0o005hsvvu5hgpwaw8","_id":"cixaggs0r005psvvu69gttnhd"},{"post_id":"cixaggrz9001asvvuegriapty","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs0r005qsvvu1gp4w7dn"},{"post_id":"cixaggrz9001asvvuegriapty","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggs0s005ssvvuujxh01a4"},{"post_id":"cixaggrz9001asvvuegriapty","tag_id":"cixaggs00003jsvvubfaxboxd","_id":"cixaggs0s005tsvvut9sefedb"},{"post_id":"cixaggrza001csvvub1l90mzk","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs0s005vsvvuriwdiahb"},{"post_id":"cixaggrza001csvvub1l90mzk","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs0s005wsvvuy2boz378"},{"post_id":"cixaggrzb001fsvvuewuut8u6","tag_id":"cixaggrzp002osvvu9m2jxbgj","_id":"cixaggs0u005zsvvu9kj23mcj"},{"post_id":"cixaggrzb001fsvvuewuut8u6","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs0u0060svvuota13sac"},{"post_id":"cixaggrzb001fsvvuewuut8u6","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs0u0062svvu5zrk1vxe"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggrzq002ssvvut40idono","_id":"cixaggs0z0069svvuf4zspr0u"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggrzi001usvvu26g7njos","_id":"cixaggs0z006asvvuzw167yrf"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggrzi001vsvvudtz1cfpj","_id":"cixaggs0z006csvvulzbmee92"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggs0v0064svvu6jbd83k2","_id":"cixaggs0z006dsvvu3sq5vp1n"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggrzn002hsvvuatxv9anp","_id":"cixaggs10006fsvvu3gfl55km"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggs0w0066svvukn9pjbkz","_id":"cixaggs10006gsvvukis7cy6o"},{"post_id":"cixaggrzc001hsvvufqyf9dfi","tag_id":"cixaggrzp002osvvu9m2jxbgj","_id":"cixaggs11006isvvuo6urcney"},{"post_id":"cixaggrzd001ksvvulj1ocudt","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs11006jsvvuioi88c0u"},{"post_id":"cixaggrzd001ksvvulj1ocudt","tag_id":"cixaggryo000rsvvu3twe0tn3","_id":"cixaggs11006lsvvukitgnikl"},{"post_id":"cixaggrzd001ksvvulj1ocudt","tag_id":"cixaggs0x0068svvudtzfaw5s","_id":"cixaggs11006msvvu8esl3w40"},{"post_id":"cixaggrzd001ksvvulj1ocudt","tag_id":"cixaggs0z006bsvvuf5qqh62d","_id":"cixaggs12006osvvudmoxrsiw"},{"post_id":"cixaggrzg001msvvugv991vll","tag_id":"cixaggs04003usvvuhd8ecb8b","_id":"cixaggs13006psvvusmzqq2d0"},{"post_id":"cixaggrzg001msvvugv991vll","tag_id":"cixaggryl000msvvujtejs12r","_id":"cixaggs13006qsvvu6ukc02tx"},{"post_id":"cixaggrzg001msvvugv991vll","tag_id":"cixaggs0b004hsvvut1n339d4","_id":"cixaggs13006rsvvu2f7yw0oy"},{"post_id":"cixaggrzg001msvvugv991vll","tag_id":"cixaggs11006ksvvuryiz5061","_id":"cixaggs13006ssvvuvztvbssz"},{"post_id":"cixaggrzg001msvvugv991vll","tag_id":"cixaggrzn002jsvvulo2vumas","_id":"cixaggs13006tsvvu0f6tt3wj"},{"post_id":"cixahwrcx0000mrvuzlmvtmx3","tag_id":"cixaggrzm002esvvuom24w7tn","_id":"cixahwrd30001mrvuo7xvzxty"}],"Tag":[{"name":"Atom.io","_id":"cixaggrxy0002svvusjddjnjc"},{"name":"Security","_id":"cixaggry50006svvuorlj8jkt"},{"name":"Cryptography","_id":"cixaggryb000asvvulj2d1407"},{"name":"Startup","_id":"cixaggryd000dsvvuzcyctsqv"},{"name":"Entrepreneurship","_id":"cixaggryg000isvvu32a1ehp7"},{"name":"Php","_id":"cixaggryl000msvvujtejs12r"},{"name":"Symfony","_id":"cixaggryo000rsvvu3twe0tn3"},{"name":"Laravel","_id":"cixaggrys000usvvu7onwi9vs"},{"name":"Performance","_id":"cixaggryx000xsvvugloq5wgc"},{"name":"Scalaibility","_id":"cixaggrz00011svvuufdv748m"},{"name":"Slides","_id":"cixaggrz80019svvuk4wmm5ug"},{"name":"Talk","_id":"cixaggrzb001esvvu5g3ur0z5"},{"name":"Backup","_id":"cixaggrzh001osvvu43csdwgl"},{"name":"Dropbox","_id":"cixaggrzh001rsvvu26s0d8yl"},{"name":"Server","_id":"cixaggrzi001usvvu26g7njos"},{"name":"Node.js","_id":"cixaggrzi001vsvvudtz1cfpj"},{"name":"Books","_id":"cixaggrzj001ysvvugncb4xyl"},{"name":"Design Patterns","_id":"cixaggrzj0020svvu6im4axrl"},{"name":"MySql","_id":"cixaggrzk0024svvuoyor4b88"},{"name":"Lumen","_id":"cixaggrzk0026svvurnm4rnkl"},{"name":"Bash","_id":"cixaggrzl0028svvump92fqlx"},{"name":"Shell","_id":"cixaggrzl002bsvvu67d91ai7"},{"name":"Life","_id":"cixaggrzm002esvvuom24w7tn"},{"name":"Git","_id":"cixaggrzn002hsvvuatxv9anp"},{"name":"Github","_id":"cixaggrzn002jsvvulo2vumas"},{"name":"Slack","_id":"cixaggrzp002nsvvugilznvn7"},{"name":"Collaboration","_id":"cixaggrzp002osvvu9m2jxbgj"},{"name":"Gulp","_id":"cixaggrzp002psvvudhtwbfwl"},{"name":"JavaScript","_id":"cixaggrzq002ssvvut40idono"},{"name":"FTP","_id":"cixaggrzr002usvvu7gns6zxk"},{"name":"Translation","_id":"cixaggrzv0033svvu4q9cx93u"},{"name":"Twig","_id":"cixaggrzv0034svvucscqu0o0"},{"name":"ZeroMq","_id":"cixaggrzx0038svvu7m2xmdtf"},{"name":"Distributed","_id":"cixaggrzx003bsvvulzg2kc34"},{"name":"JWT","_id":"cixaggrzy003esvvuoi4j4l0f"},{"name":"Http","_id":"cixaggs00003jsvvubfaxboxd"},{"name":"API","_id":"cixaggs02003psvvur4drdzbx"},{"name":"Flickr","_id":"cixaggs03003qsvvujb0i2pdi"},{"name":"Library","_id":"cixaggs04003usvvuhd8ecb8b"},{"name":"MongoDb","_id":"cixaggs05003xsvvut0kn6d6t"},{"name":"Doctrine","_id":"cixaggs080048svvuiaxbscwz"},{"name":"ORM","_id":"cixaggs09004bsvvuvyodcb13"},{"name":"Oauth","_id":"cixaggs0b004hsvvut1n339d4"},{"name":"React","_id":"cixaggs0e004nsvvuatvi9uhl"},{"name":"GoLang","_id":"cixaggs0l0057svvuoco5ckkp"},{"name":"Docker","_id":"cixaggs0m005asvvuywhndmsf"},{"name":"Tracking","_id":"cixaggs0o005fsvvu5jfa4dst"},{"name":"Email","_id":"cixaggs0o005hsvvu5hgpwaw8"},{"name":"Nginx","_id":"cixaggs0v0064svvu6jbd83k2"},{"name":"Flightplan","_id":"cixaggs0w0066svvukn9pjbkz"},{"name":"Console","_id":"cixaggs0x0068svvudtzfaw5s"},{"name":"Pimple","_id":"cixaggs0z006bsvvuf5qqh62d"},{"name":"Instagram","_id":"cixaggs11006ksvvuryiz5061"}]}}